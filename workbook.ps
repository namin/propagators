%!PS-Adobe-3.0
%%BoundingBox: 18 36 594 756
%%Title: Enscript Output
%%Creator: GNU enscript 1.6.4
%%CreationDate: Wed Nov  2 22:21:52 2011
%%Orientation: Portrait
%%Pages: (atend)
%%DocumentMedia: Letter 612 792 0 () ()
%%DocumentNeededResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset Enscript-Prolog 1.6 4
%
% Procedures.
%

/_S {	% save current state
  /_s save def
} def
/_R {	% restore from saved state
  _s restore
} def

/S {	% showpage protecting gstate
  gsave
  showpage
  grestore
} bind def

/MF {	% fontname newfontname -> -	make a new encoded font
  /newfontname exch def
  /fontname exch def

  /fontdict fontname findfont def
  /newfont fontdict maxlength dict def

  fontdict {
    exch
    dup /FID eq {
      % skip FID pair
      pop pop
    } {
      % copy to the new font dictionary
      exch newfont 3 1 roll put
    } ifelse
  } forall

  newfont /FontName newfontname put

  % insert only valid encoding vectors
  encoding_vector length 256 eq {
    newfont /Encoding encoding_vector put
  } if

  newfontname newfont definefont pop
} def

/MF_PS { % fontname newfontname -> -	make a new font preserving its enc
  /newfontname exch def
  /fontname exch def

  /fontdict fontname findfont def
  /newfont fontdict maxlength dict def

  fontdict {
    exch
    dup /FID eq {
      % skip FID pair
      pop pop
    } {
      % copy to the new font dictionary
      exch newfont 3 1 roll put
    } ifelse
  } forall

  newfont /FontName newfontname put

  newfontname newfont definefont pop
} def

/SF { % fontname width height -> -	set a new font
  /height exch def
  /width exch def

  findfont
  [width 0 0 height 0 0] makefont setfont
} def

/SUF { % fontname width height -> -	set a new user font
  /height exch def
  /width exch def

  /F-gs-user-font MF
  /F-gs-user-font width height SF
} def

/SUF_PS { % fontname width height -> -	set a new user font preserving its enc
  /height exch def
  /width exch def

  /F-gs-user-font MF_PS
  /F-gs-user-font width height SF
} def

/M {moveto} bind def
/s {show} bind def

/Box {	% x y w h -> -			define box path
  /d_h exch def /d_w exch def /d_y exch def /d_x exch def
  d_x d_y  moveto
  d_w 0 rlineto
  0 d_h rlineto
  d_w neg 0 rlineto
  closepath
} def

/bgs {	% x y height blskip gray str -> -	show string with bg color
  /str exch def
  /gray exch def
  /blskip exch def
  /height exch def
  /y exch def
  /x exch def

  gsave
    x y blskip sub str stringwidth pop height Box
    gray setgray
    fill
  grestore
  x y M str s
} def

/bgcs { % x y height blskip red green blue str -> -  show string with bg color
  /str exch def
  /blue exch def
  /green exch def
  /red exch def
  /blskip exch def
  /height exch def
  /y exch def
  /x exch def

  gsave
    x y blskip sub str stringwidth pop height Box
    red green blue setrgbcolor
    fill
  grestore
  x y M str s
} def

% Highlight bars.
/highlight_bars {	% nlines lineheight output_y_margin gray -> -
  gsave
    setgray
    /ymarg exch def
    /lineheight exch def
    /nlines exch def

    % This 2 is just a magic number to sync highlight lines to text.
    0 d_header_y ymarg sub 2 sub translate

    /cw d_output_w cols div def
    /nrows d_output_h ymarg 2 mul sub lineheight div cvi def

    % for each column
    0 1 cols 1 sub {
      cw mul /xp exch def

      % for each rows
      0 1 nrows 1 sub {
        /rn exch def
        rn lineheight mul neg /yp exch def
        rn nlines idiv 2 mod 0 eq {
	  % Draw highlight bar.  4 is just a magic indentation.
	  xp 4 add yp cw 8 sub lineheight neg Box fill
	} if
      } for
    } for

  grestore
} def

% Line highlight bar.
/line_highlight {	% x y width height gray -> -
  gsave
    /gray exch def
    Box gray setgray fill
  grestore
} def

% Column separator lines.
/column_lines {
  gsave
    .1 setlinewidth
    0 d_footer_h translate
    /cw d_output_w cols div def
    1 1 cols 1 sub {
      cw mul 0 moveto
      0 d_output_h rlineto stroke
    } for
  grestore
} def

% Column borders.
/column_borders {
  gsave
    .1 setlinewidth
    0 d_footer_h moveto
    0 d_output_h rlineto
    d_output_w 0 rlineto
    0 d_output_h neg rlineto
    closepath stroke
  grestore
} def

% Do the actual underlay drawing
/draw_underlay {
  ul_style 0 eq {
    ul_str true charpath stroke
  } {
    ul_str show
  } ifelse
} def

% Underlay
/underlay {	% - -> -
  gsave
    0 d_page_h translate
    d_page_h neg d_page_w atan rotate

    ul_gray setgray
    ul_font setfont
    /dw d_page_h dup mul d_page_w dup mul add sqrt def
    ul_str stringwidth pop dw exch sub 2 div ul_h_ptsize -2 div moveto
    draw_underlay
  grestore
} def

/user_underlay {	% - -> -
  gsave
    ul_x ul_y translate
    ul_angle rotate
    ul_gray setgray
    ul_font setfont
    0 0 ul_h_ptsize 2 div sub moveto
    draw_underlay
  grestore
} def

% Page prefeed
/page_prefeed {		% bool -> -
  statusdict /prefeed known {
    statusdict exch /prefeed exch put
  } {
    pop
  } ifelse
} def

% Wrapped line markers
/wrapped_line_mark {	% x y charwith charheight type -> -
  /type exch def
  /h exch def
  /w exch def
  /y exch def
  /x exch def

  type 2 eq {
    % Black boxes (like TeX does)
    gsave
      0 setlinewidth
      x w 4 div add y M
      0 h rlineto w 2 div 0 rlineto 0 h neg rlineto
      closepath fill
    grestore
  } {
    type 3 eq {
      % Small arrows
      gsave
        .2 setlinewidth
        x w 2 div add y h 2 div add M
        w 4 div 0 rlineto
        x w 4 div add y lineto stroke

        x w 4 div add w 8 div add y h 4 div add M
        x w 4 div add y lineto
	w 4 div h 8 div rlineto stroke
      grestore
    } {
      % do nothing
    } ifelse
  } ifelse
} def

% EPSF import.

/BeginEPSF {
  /b4_Inc_state save def    		% Save state for cleanup
  /dict_count countdictstack def	% Count objects on dict stack
  /op_count count 1 sub def		% Count objects on operand stack
  userdict begin
  /showpage { } def
  0 setgray 0 setlinecap
  1 setlinewidth 0 setlinejoin
  10 setmiterlimit [ ] 0 setdash newpath
  /languagelevel where {
    pop languagelevel
    1 ne {
      false setstrokeadjust false setoverprint
    } if
  } if
} bind def

/EndEPSF {
  count op_count sub { pos } repeat	% Clean up stacks
  countdictstack dict_count sub { end } repeat
  b4_Inc_state restore
} bind def

% Check PostScript language level.
/languagelevel where {
  pop /gs_languagelevel languagelevel def
} {
  /gs_languagelevel 1 def
} ifelse
%%EndResource
%%BeginResource: procset Enscript-Encoding-88591 1.6 4
/encoding_vector [
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/space        	/exclam       	/quotedbl     	/numbersign   	
/dollar       	/percent      	/ampersand    	/quoteright   	
/parenleft    	/parenright   	/asterisk     	/plus         	
/comma        	/hyphen       	/period       	/slash        	
/zero         	/one          	/two          	/three        	
/four         	/five         	/six          	/seven        	
/eight        	/nine         	/colon        	/semicolon    	
/less         	/equal        	/greater      	/question     	
/at           	/A            	/B            	/C            	
/D            	/E            	/F            	/G            	
/H            	/I            	/J            	/K            	
/L            	/M            	/N            	/O            	
/P            	/Q            	/R            	/S            	
/T            	/U            	/V            	/W            	
/X            	/Y            	/Z            	/bracketleft  	
/backslash    	/bracketright 	/asciicircum  	/underscore   	
/quoteleft    	/a            	/b            	/c            	
/d            	/e            	/f            	/g            	
/h            	/i            	/j            	/k            	
/l            	/m            	/n            	/o            	
/p            	/q            	/r            	/s            	
/t            	/u            	/v            	/w            	
/x            	/y            	/z            	/braceleft    	
/bar          	/braceright   	/tilde        	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/space        	/exclamdown   	/cent         	/sterling     	
/currency     	/yen          	/brokenbar    	/section      	
/dieresis     	/copyright    	/ordfeminine  	/guillemotleft	
/logicalnot   	/hyphen       	/registered   	/macron       	
/degree       	/plusminus    	/twosuperior  	/threesuperior	
/acute        	/mu           	/paragraph    	/bullet       	
/cedilla      	/onesuperior  	/ordmasculine 	/guillemotright	
/onequarter   	/onehalf      	/threequarters	/questiondown 	
/Agrave       	/Aacute       	/Acircumflex  	/Atilde       	
/Adieresis    	/Aring        	/AE           	/Ccedilla     	
/Egrave       	/Eacute       	/Ecircumflex  	/Edieresis    	
/Igrave       	/Iacute       	/Icircumflex  	/Idieresis    	
/Eth          	/Ntilde       	/Ograve       	/Oacute       	
/Ocircumflex  	/Otilde       	/Odieresis    	/multiply     	
/Oslash       	/Ugrave       	/Uacute       	/Ucircumflex  	
/Udieresis    	/Yacute       	/Thorn        	/germandbls   	
/agrave       	/aacute       	/acircumflex  	/atilde       	
/adieresis    	/aring        	/ae           	/ccedilla     	
/egrave       	/eacute       	/ecircumflex  	/edieresis    	
/igrave       	/iacute       	/icircumflex  	/idieresis    	
/eth          	/ntilde       	/ograve       	/oacute       	
/ocircumflex  	/otilde       	/odieresis    	/divide       	
/oslash       	/ugrave       	/uacute       	/ucircumflex  	
/udieresis    	/yacute       	/thorn        	/ydieresis    	
] def
%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeResource: font Courier-Bold
/HFpt_w 10 def
/HFpt_h 10 def
/Courier-Bold /HF-gs-font MF
/HF /HF-gs-font findfont [HFpt_w 0 0 HFpt_h 0 0] makefont def
/Courier-Bold /F-gs-font MF
/F-gs-font 12 12 SF
/#copies 1 def
% Pagedevice definitions:
gs_languagelevel 1 gt {
  <<
    /PageSize [612 792] 
  >> setpagedevice
} if
%%BeginResource: procset Enscript-Header-simple 1.6 4

/do_header {	% print default simple header
  gsave
    d_header_x d_header_y HFpt_h 3 div add translate

    HF setfont
    user_header_p {
      5 0 moveto user_header_left_str show

      d_header_w user_header_center_str stringwidth pop sub 2 div
      0 moveto user_header_center_str show

      d_header_w user_header_right_str stringwidth pop sub 5 sub
      0 moveto user_header_right_str show
    } {
      5 0 moveto fname show
      45 0 rmoveto fmodstr show
      45 0 rmoveto pagenumstr show
    } ifelse

  grestore
} def
%%EndResource
/d_page_w 576 def
/d_page_h 720 def
/d_header_x 0 def
/d_header_y 705 def
/d_header_w 576 def
/d_header_h 15 def
/d_footer_x 0 def
/d_footer_y 0 def
/d_footer_w 576 def
/d_footer_h 0 def
/d_output_w 576 def
/d_output_h 705 def
/cols 1 def
%%EndSetup
%%Page: (1) 1
%%BeginPageSetup
_S
18 36 translate
/pagenum 1 def
/fname (core/scheduler.scm) def
/fdir (core/) def
/ftail (scheduler.scm) def
% User defined strings:
/fmodstr (Tue Jul 20 18:31:36 2010) def
/pagenumstr (1) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 690 M
(;;; ----------------------------------------------------------------------) s
5 677 M
(;;; Copyright 2009 Massachusetts Institute of Technology.) s
5 664 M
(;;; ----------------------------------------------------------------------) s
5 651 M
(;;; This file is part of Propagator Network Prototype.) s
5 638 M
(;;; ) s
5 625 M
(;;; Propagator Network Prototype is free software; you can) s
5 612 M
(;;; redistribute it and/or modify it under the terms of the GNU) s
5 599 M
(;;; General Public License as published by the Free Software) s
5 586 M
(;;; Foundation, either version 3 of the License, or \(at your option\)) s
5 573 M
(;;; any later version.) s
5 560 M
(;;; ) s
5 547 M
(;;; Propagator Network Prototype is distributed in the hope that it) s
5 534 M
(;;; will be useful, but WITHOUT ANY WARRANTY; without even the implied) s
5 521 M
(;;; warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.) s
5 508 M
(;;; See the GNU General Public License for more details.) s
5 495 M
(;;; ) s
5 482 M
(;;; You should have received a copy of the GNU General Public License) s
5 469 M
(;;; along with Propagator Network Prototype.  If not, see) s
5 456 M
(;;; <http://www.gnu.org/licenses/>.) s
5 443 M
(;;; ----------------------------------------------------------------------) s
5 417 M
(\(declare \(usual-integrations make-cell cell?\)\)) s
5 391 M
(;;;; Basic scheduling system) s
5 365 M
(;;; This scheduler maintains a list of jobs that need to be run.  Each) s
5 352 M
(;;; job is a thunk.  Jobs are run serially and are not preempted.) s
5 339 M
(;;; When a job exits \(normally\) it is forgotten and the next job is) s
5 326 M
(;;; run.  The jobs are permitted to schedule additional jobs,) s
5 313 M
(;;; including rescheduling themselves.  Jobs are presumed idempotent,) s
5 300 M
(;;; and specifically it is assumed acceptable not to count how many) s
5 287 M
(;;; times a given job \(by eq?-ness\) was scheduled, but merely that it) s
5 274 M
(;;; was scheduled.  When the scheduler runs out of jobs, it returns) s
5 261 M
(;;; the symbol 'DONE to its caller.) s
5 235 M
(;;; The scheduler supplies an escape mechanism: running the procedure) s
5 222 M
(;;; ABORT-PROCESS, with a value, will terminate the entire job run,) s
5 209 M
(;;; and return the supplied value to the scheduler's caller.) s
5 196 M
(;;; Subsequent calls to the scheduler without first scheduling more) s
5 183 M
(;;; jobs will also return that same value.  If ABORT-PROCESS is called) s
5 170 M
(;;; outside the dynamic extent of a run, it deschedules any jobs that) s
5 157 M
(;;; might be scheduled and saves the value for future reference as) s
5 144 M
(;;; above.) s
5 118 M
(;;; This scheduler is meant as a low-level support for the propagator) s
5 105 M
(;;; network in this prototype.  In that use case, the jobs would be) s
5 92 M
(;;; propagators that the network knows need to be run.  Any cells in) s
5 79 M
(;;; the network are invisible to the scheduler, but presumably help) s
5 66 M
(;;; the network schedule more propagators to run \(namely those that) s
5 53 M
(;;; may be interested in the cell's goings on\).) s
_R
S
%%Page: (2) 2
%%BeginPageSetup
_S
18 36 translate
/pagenum 2 def
/fname (core/scheduler.scm) def
/fdir (core/) def
/ftail (scheduler.scm) def
% User defined strings:
/fmodstr (Tue Jul 20 18:31:36 2010) def
/pagenumstr (2) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 677 M
(;;; The main public interface is) s
5 664 M
(;;;   \(initialize-scheduler\)      clear all scheduler state) s
5 651 M
(;;;   \(alert-propagators jobs\)    schedule a list \(or set\) of jobs) s
5 638 M
(;;;   \(alert-all-propagators!\)    reschedule all jobs ever scheduled) s
5 625 M
(;;;   \(run\)                       run scheduled jobs until done) s
5 612 M
(;;;   \(abort-process x\)           terminate the run returning x) s
5 586 M
(;;; The scheduler also provides) s
5 573 M
(;;; \(with-independent-scheduler thunk\)) s
5 560 M
(;;;   Run thunk in a fresh scheduler, then restore current scheduler.) s
5 547 M
(;;; \(make-scheduler\) ) s
5 534 M
(;;;   Mutation point that can be configured to expriment with) s
5 521 M
(;;;   different scheduling strategies.) s
5 508 M
(;;; \(execute-propagator propagator\)) s
5 495 M
(;;;   Execute a propagator immediately rather than scheduling it for) s
5 482 M
(;;;   later.  Use judiciously.) s
5 469 M
(;;; \(all-propagators\)) s
5 456 M
(;;;   Returns a list of all known propagators.  Mainly for debugging) s
5 443 M
(;;;   a propagator network.) s
5 417 M
(\(define *scheduler*\)) s
5 404 M
(\(define *abort-process*\)) s
5 391 M
(\(define *last-value-of-run*\)) s
5 378 M
(\(define *propagators-ever-alerted*\)) s
5 352 M
(;; This is a mutation point, if one wants to play with different kinds) s
5 339 M
(;; of schedulers.  The default is round-robin, below.) s
5 326 M
(\(define \(make-scheduler\) \(make-round-robin-scheduler\)\)) s
5 300 M
(\(define \(initialize-scheduler\)) s
5 287 M
(  \(set! *scheduler* \(make-scheduler\)\)) s
5 274 M
(  \(set! *abort-process* #f\)) s
5 261 M
(  \(set! *last-value-of-run* 'done\)) s
5 248 M
(  \(set! *propagators-ever-alerted* \(make-eq-oset\)\)) s
5 235 M
(  'ok\)) s
5 209 M
(\(define \(with-independent-scheduler thunk\)) s
5 196 M
(  \(fluid-let \(\(*scheduler* #f\)) s
5 183 M
(              \(*abort-process* #f\)) s
5 170 M
(              \(*last-value-of-run* #f\)) s
5 157 M
(              \(*propagators-ever-alerted* #f\)\)) s
5 144 M
(    \(initialize-scheduler\)) s
5 131 M
(    \(thunk\)\)\)) s
5 105 M
(\(define \(execute-propagator propagator\)) s
5 92 M
(  \(propagator\)\)) s
_R
S
%%Page: (3) 3
%%BeginPageSetup
_S
18 36 translate
/pagenum 3 def
/fname (core/scheduler.scm) def
/fdir (core/) def
/ftail (scheduler.scm) def
% User defined strings:
/fmodstr (Tue Jul 20 18:31:36 2010) def
/pagenumstr (3) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 677 M
(\(define \(alert-propagators propagators\)) s
5 664 M
(  \(for-each) s
5 651 M
(   \(lambda \(propagator\)) s
5 638 M
(     \(if \(not \(procedure? propagator\)\)) s
5 625 M
(         \(error "Alerting a non-procedure" propagator\)\)) s
5 612 M
(     \(oset-insert *propagators-ever-alerted* propagator\)) s
5 599 M
(     \(\(*scheduler* 'alert-one\) propagator\)\)) s
5 586 M
(   \(listify propagators\)\)) s
5 573 M
(  #f\)) s
5 560 M
(\(define alert-propagator alert-propagators\)) s
5 534 M
(\(define \(all-propagators\)) s
5 521 M
(  \(oset-members *propagators-ever-alerted*\)\)) s
5 495 M
(\(define \(alert-all-propagators!\)) s
5 482 M
(  \(for-each \(*scheduler* 'alert-one\) \(all-propagators\)\)\)) s
5 456 M
(\(define \(with-process-abortion thunk\)) s
5 443 M
(  \(call-with-current-continuation) s
5 430 M
(   \(lambda \(k\)) s
5 417 M
(     \(fluid-let \(\(*abort-process* k\)\)) s
5 404 M
(       \(thunk\)\)\)\)\)) s
5 378 M
(\(define termination-trace #f\)) s
5 352 M
(\(define \(abort-process value\)) s
5 339 M
(  \(if termination-trace) s
5 326 M
(      \(ppc `\(calling abort-process with ,value and ,*abort-process*\)\)\)) s
5 313 M
(  \(if *abort-process*) s
5 300 M
(      ;; if the propagator is running) s
5 287 M
(      \(begin \(*scheduler* 'clear!\)) s
5 274 M
(             \(*abort-process* value\)\)) s
5 261 M
(      ;; if the user is setting up state) s
5 248 M
(      \(begin \(*scheduler* 'clear!\)) s
5 235 M
(             \(set! *last-value-of-run* value\)\)\)\)) s
5 209 M
(\(define \(run\)) s
5 196 M
(  \(define \(do-run\)) s
5 183 M
(    \(*scheduler* 'run\)\)) s
5 170 M
(  \(if \(not \(*scheduler* 'done?\)\)) s
5 157 M
(      \(set! *last-value-of-run* \(with-process-abortion do-run\)\)\)) s
5 144 M
(  *last-value-of-run*\)) s
_R
S
%%Page: (4) 4
%%BeginPageSetup
_S
18 36 translate
/pagenum 4 def
/fname (core/scheduler.scm) def
/fdir (core/) def
/ftail (scheduler.scm) def
% User defined strings:
/fmodstr (Tue Jul 20 18:31:36 2010) def
/pagenumstr (4) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 677 M
(\(define \(make-oset-scheduler policy\)) s
5 664 M
(  \(let \(\(propagators-left \(make-eq-oset\)\)\)) s
5 651 M
(    \(define \(run-alerted\)) s
5 638 M
(      \(if \(any-alerted?\)) s
5 625 M
(          \(begin) s
5 612 M
(            \(policy propagators-left\)) s
5 599 M
(            \(run-alerted\)\)) s
5 586 M
(          'done\)\)) s
5 560 M
(    \(define \(alert-one propagator\)) s
5 547 M
(      \(oset-insert propagators-left propagator\)\)) s
5 521 M
(    \(define \(clear!\)) s
5 508 M
(      \(oset-clear! propagators-left\)\)) s
5 482 M
(    \(define \(any-alerted?\)) s
5 469 M
(      \(< 0 \(oset-count propagators-left\)\)\)) s
5 443 M
(    \(define \(me message\)) s
5 430 M
(      \(cond \(\(eq? message 'run\) \(run-alerted\)\)) s
5 417 M
(            \(\(eq? message 'alert-one\) alert-one\)) s
5 404 M
(            \(\(eq? message 'clear!\) \(clear!\)\)) s
5 391 M
(            \(\(eq? message 'done?\) \(not \(any-alerted?\)\)\)\)\)) s
5 378 M
(    me\)\)) s
5 352 M
(\(define \(round-robin-policy propagators-left\)) s
5 339 M
(  \(let \(\(temp \(oset-members propagators-left\)\)\)) s
5 326 M
(    \(oset-clear! propagators-left\)) s
5 313 M
(    \(for-each \(lambda \(propagator\)) s
5 300 M
(                \(execute-propagator propagator\)\)) s
5 287 M
(              temp\)\)\)) s
5 261 M
(\(define \(stack-policy propagators-left\)) s
5 248 M
(  \(execute-propagator \(oset-pop! propagators-left\)\)\)) s
5 222 M
(\(define \(make-round-robin-scheduler\)) s
5 209 M
(  \(make-oset-scheduler round-robin-policy\)\)) s
5 183 M
(\(define \(make-stack-scheduler\)) s
5 170 M
(  \(make-oset-scheduler stack-policy\)\)) s
_R
S
%%Page: (5) 5
%%BeginPageSetup
_S
18 36 translate
/pagenum 5 def
/fname (core/scheduler.scm) def
/fdir (core/) def
/ftail (scheduler.scm) def
% User defined strings:
/fmodstr (Tue Jul 20 18:31:36 2010) def
/pagenumstr (5) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 677 M
(\(define \(make-fast-slow-scheduler fast-policy slow-policy\)) s
5 664 M
(  \(let \(\(propagators-left \(make-eq-oset\)\)) s
5 651 M
(        \(slow-propagators \(make-eq-oset\)\)\)) s
5 638 M
(    \(define \(run-alerted\)) s
5 625 M
(      \(cond \(\(any-normal?\)) s
5 612 M
(             \(fast-policy propagators-left\)) s
5 599 M
(             \(run-alerted\)\)) s
5 586 M
(            \(\(any-slow?\)) s
5 573 M
(             \(slow-policy slow-propagators\)) s
5 560 M
(             \(run-alerted\)\)) s
5 547 M
(            \(else 'done\)\)\)) s
5 521 M
(    \(define \(alert-one propagator\)) s
5 508 M
(      \(if \(tagged-slow? propagator\)) s
5 495 M
(          \(oset-insert slow-propagators propagator\)) s
5 482 M
(          \(oset-insert propagators-left propagator\)\)\)) s
5 456 M
(    \(define \(clear!\)) s
5 443 M
(      \(oset-clear! propagators-left\)) s
5 430 M
(      \(oset-clear! slow-propagators\)\)) s
5 404 M
(    \(define \(any-alerted?\)) s
5 391 M
(      \(or \(any-normal?\) \(any-slow?\)\)\)) s
5 365 M
(    \(define \(any-normal?\)) s
5 352 M
(      \(< 0 \(oset-count propagators-left\)\)\)) s
5 326 M
(    \(define \(any-slow?\)) s
5 313 M
(      \(< 0 \(oset-count slow-propagators\)\)\)) s
5 287 M
(    \(define \(me message\)) s
5 274 M
(      \(cond \(\(eq? message 'run\) \(run-alerted\)\)) s
5 261 M
(            \(\(eq? message 'alert-one\) alert-one\)) s
5 248 M
(            \(\(eq? message 'clear!\) \(clear!\)\)) s
5 235 M
(            \(\(eq? message 'done?\) \(not \(any-alerted?\)\)\)\)\)) s
5 222 M
(    me\)\)) s
5 196 M
(\(define \(tagged-slow? thing\)) s
5 183 M
(  \(eq-get thing 'slow\)\)) s
5 157 M
(\(define \(tag-slow! thing\)) s
5 144 M
(  \(eq-put! thing 'slow #t\)) s
5 131 M
(  thing\)) s
5 105 M
(;;; These schedulers were much worse than round-robin on the slow) s
5 92 M
(;;; examples when tagging amb-choose propagators as slow.) s
5 79 M
(\(define \(make-two-stack-scheduler\)) s
5 66 M
(  \(make-fast-slow-scheduler stack-policy stack-policy\)\)) s
5 53 M
(\(define \(make-robin-stack-scheduler\)) s
5 40 M
(  \(make-fast-slow-scheduler round-robin-policy stack-policy\)\)) s
5 27 M
(\(define \(make-two-robin-scheduler\)) s
5 14 M
(  \(make-fast-slow-scheduler round-robin-policy round-robin-policy\)\)) s
_R
S
%%Page: (-) 6
S
%%Page: (1) 7
%%BeginPageSetup
_S
18 36 translate
/pagenum 1 def
/fname (core/metadata.scm) def
/fdir (core/) def
/ftail (metadata.scm) def
% User defined strings:
/fmodstr (Mon Aug 02 14:37:02 2010) def
/pagenumstr (1) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 690 M
(;;; ----------------------------------------------------------------------) s
5 677 M
(;;; Copyright 2010 Alexey Radul.) s
5 664 M
(;;; ----------------------------------------------------------------------) s
5 651 M
(;;; This file is part of Propagator Network Prototype.) s
5 638 M
(;;; ) s
5 625 M
(;;; Propagator Network Prototype is free software; you can) s
5 612 M
(;;; redistribute it and/or modify it under the terms of the GNU) s
5 599 M
(;;; General Public License as published by the Free Software) s
5 586 M
(;;; Foundation, either version 3 of the License, or \(at your option\)) s
5 573 M
(;;; any later version.) s
5 560 M
(;;; ) s
5 547 M
(;;; Propagator Network Prototype is distributed in the hope that it) s
5 534 M
(;;; will be useful, but WITHOUT ANY WARRANTY; without even the implied) s
5 521 M
(;;; warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.) s
5 508 M
(;;; See the GNU General Public License for more details.) s
5 495 M
(;;; ) s
5 482 M
(;;; You should have received a copy of the GNU General Public License) s
5 469 M
(;;; along with Propagator Network Prototype.  If not, see) s
5 456 M
(;;; <http://www.gnu.org/licenses/>.) s
5 443 M
(;;; ----------------------------------------------------------------------) s
5 417 M
(\(declare \(usual-integrations make-cell cell?\)\)) s
5 391 M
(;;;; Network Metadata) s
5 365 M
(;;; The purpose of this steaming pile is to allow the collection of) s
5 352 M
(;;; metadata sufficient to traverse and inspect a running propagator) s
5 339 M
(;;; network, for the purpose of debugging it.  As an extreme case,) s
5 326 M
(;;; extensions/draw.scm uses the collected metadata to draw pictures) s
5 313 M
(;;; of \(small, simple\) networks in dot and yFiles.) s
5 287 M
(\(define \(propagator-inputs propagator\)) s
5 274 M
(  \(or \(eq-get propagator 'inputs\)) s
5 261 M
(      \(eq-get propagator 'neighbors\)) s
5 248 M
(      '\(\)\)\)) s
5 222 M
(\(define \(propagator-outputs propagator\)) s
5 209 M
(  \(or \(eq-get propagator 'outputs\)) s
5 196 M
(      \(eq-get propagator 'neighbors\)) s
5 183 M
(      '\(\)\)\)) s
5 157 M
(\(define \(cell-non-readers cell\)) s
5 144 M
(  \(or \(eq-get cell 'shadow-connections\)) s
5 131 M
(      '\(\)\)\)) s
5 105 M
(\(define \(cell-connections cell\)) s
5 92 M
(  ;; The neighbors are the ones that need to be woken up; the) s
5 79 M
(  ;; connections are the ones that touch the cell at all.  This) s
5 66 M
(  ;; concept is useful for walking the graph structure of the network.) s
5 53 M
(  \(append \(neighbors cell\) \(cell-non-readers cell\)\)\)) s
_R
S
%%Page: (2) 8
%%BeginPageSetup
_S
18 36 translate
/pagenum 2 def
/fname (core/metadata.scm) def
/fdir (core/) def
/ftail (metadata.scm) def
% User defined strings:
/fmodstr (Mon Aug 02 14:37:02 2010) def
/pagenumstr (2) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 677 M
(\(define-structure \(network-group \(safe-accessors #t\)\)) s
5 664 M
(  elements) s
5 651 M
(  names\)) s
5 625 M
(\(define *current-network-group* #f\)) s
5 599 M
(\(define \(network-group-named name\)) s
5 586 M
(  \(name! \(make-network-group '\(\) \(make-eq-hash-table\)\) name\)\)) s
5 560 M
(\(define \(name-in-group! group thing name\)) s
5 547 M
(  \(hash-table/put! \(network-group-names group\) thing name\)) s
5 534 M
(  thing\)) s
5 508 M
(\(define \(name-in-group group thing\)) s
5 495 M
(  \(and group) s
5 482 M
(       \(hash-table/get \(network-group-names group\) thing #f\)\)\)) s
5 456 M
(\(define \(network-register thing\)) s
5 443 M
(  \(if \(memq thing \(network-group-elements *current-network-group*\)\)) s
5 430 M
(      'ok) s
5 417 M
(      \(set-network-group-elements! *current-network-group*) s
5 404 M
(       \(cons thing \(network-group-elements *current-network-group*\)\)\)\)) s
5 391 M
(  \(eq-put! thing 'network-group *current-network-group*\)\)) s
5 365 M
(\(define \(network-unregister thing\)) s
5 352 M
(  \(let \(\(group \(network-group-of thing\)\)\)) s
5 339 M
(    \(if group) s
5 326 M
(        \(set-network-group-elements! group) s
5 313 M
(         \(delq thing \(network-group-elements group\)\)\)\)\)) s
5 300 M
(  \(eq-rem! thing 'network-group\)\)) s
5 274 M
(\(define \(network-group-of thing\)) s
5 261 M
(  \(eq-get thing 'network-group\)\)) s
5 235 M
(\(define \(network-group-contains? group thing\)) s
5 222 M
(  \(or \(eq? group \(network-group-of thing\)\)) s
5 209 M
(      \(and \(network-group-of thing\)) s
5 196 M
(           \(network-group-contains? group \(network-group-of thing\)\)\)\)\)) s
5 170 M
(\(define \(in-network-group group thunk\)) s
5 157 M
(  \(if group) s
5 144 M
(      \(fluid-let \(\(*current-network-group* group\)\)) s
5 131 M
(        \(thunk\)\)) s
5 118 M
(      \(thunk\) ;; TODO What should I really do if there is no group?) s
5 105 M
(      \)\)) s
5 79 M
(\(define \(with-network-group group thunk\)) s
5 66 M
(  \(network-register group\)) s
5 53 M
(  \(in-network-group group thunk\)\)) s
_R
S
%%Page: (3) 9
%%BeginPageSetup
_S
18 36 translate
/pagenum 3 def
/fname (core/metadata.scm) def
/fdir (core/) def
/ftail (metadata.scm) def
% User defined strings:
/fmodstr (Mon Aug 02 14:37:02 2010) def
/pagenumstr (3) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 677 M
(\(define \(name-locally! thing name\)) s
5 664 M
(  \(name-in-group! *current-network-group* thing name\)\)) s
5 638 M
(\(define \(local-name thing\)) s
5 625 M
(  \(name-in-group *current-network-group* thing\)\)) s
5 599 M
(\(define name) s
5 586 M
(  \(let \(\(name name\)\)) s
5 573 M
(    \(lambda \(thing\)) s
5 560 M
(      \(let \(\(group-name \(name-in-group \(network-group-of thing\) thing\)\)\)) s
5 547 M
(        \(if group-name) s
5 534 M
(            \(name group-name\)) s
5 521 M
(            \(name thing\)\)\)\)\)\)) s
5 495 M
(\(define \(clear-network-group thing\)) s
5 482 M
(  \(eq-rem! thing 'shadow-connections 'inputs 'outputs 'network-group\)) s
5 469 M
(  \(if \(network-group? thing\)) s
5 456 M
(      \(for-each clear-network-group \(network-group-elements thing\)\)\)\)) s
5 430 M
(\(define \(reset-network-groups!\)) s
5 417 M
(  \(clear-network-group *current-network-group*\)) s
5 404 M
(  \(set! *current-network-group* \(network-group-named 'top-group\)\)\)) s
5 378 M
(\(define initialize-scheduler) s
5 365 M
(  \(let \(\(initialize-scheduler initialize-scheduler\)\)) s
5 352 M
(    \(lambda \(\)) s
5 339 M
(      \(initialize-scheduler\)) s
5 326 M
(      \(reset-network-groups!\)\)\)\)) s
5 300 M
(\(define with-independent-scheduler) s
5 287 M
(  \(let \(\(with-independent-scheduler with-independent-scheduler\)\)) s
5 274 M
(    \(lambda args) s
5 261 M
(      \(fluid-let \(\(*current-network-group* #f\)\)) s
5 248 M
(        \(apply with-independent-scheduler args\)\)\)\)\)) s
_R
S
%%Page: (4) 10
%%BeginPageSetup
_S
18 36 translate
/pagenum 4 def
/fname (core/metadata.scm) def
/fdir (core/) def
/ftail (metadata.scm) def
% User defined strings:
/fmodstr (Mon Aug 02 14:37:02 2010) def
/pagenumstr (4) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 677 M
(;;; Oof!) s
5 664 M
(;;; TODO Figure out what network-group-expression-substructure is) s
5 651 M
(;;; really doing and refactor it.) s
5 638 M
(\(define \(network-group-expression-substructure group\)) s
5 625 M
(  ;; Produce the collection of cells, propagators, network groups, and) s
5 612 M
(  ;; expression network groups that should be visible at this group) s
5 599 M
(  ;; level.  This may involve constructing network groups that) s
5 586 M
(  ;; represent expressions made with e: constructs, on the logic that) s
5 573 M
(  ;; the cells they create are implicit, and therefore should be) s
5 560 M
(  ;; hidden \(unless the use explicitly expands the autogenerated) s
5 547 M
(  ;; expression group that contains them\).) s
5 534 M
(  \(define \(should-hide? thing\)) s
5 521 M
(    \(and \(cell? thing\)) s
5 508 M
(         \(eq? group \(network-group-of thing\)\)) s
5 495 M
(         \(not \(name-in-group group thing\)\)\)\)) s
5 482 M
(  \(define \(should-not-hide? thing\)) s
5 469 M
(    \(and \(cell? thing\)) s
5 456 M
(         \(or \(not \(eq? group \(network-group-of thing\)\)\)) s
5 443 M
(             \(name-in-group group thing\)\)\)\)) s
5 430 M
(  \(define \(may-hide? thing\)) s
5 417 M
(    \(and \(not \(should-hide? thing\)\)) s
5 404 M
(         \(not \(should-not-hide? thing\)\)\)\)) s
5 391 M
(  \(define \(connected? thing1 thing2\)) s
5 378 M
(    \(define \(connected-to-cell? cell thing\)) s
5 365 M
(      \(and \(cell? cell\)) s
5 352 M
(           \(or \(memq thing \(cell-connections cell\)\)) s
5 339 M
(               \(and \(network-group? thing\)) s
5 326 M
(                    \(any \(lambda \(conn\)) s
5 313 M
(                           \(network-group-contains? thing conn\)\)) s
5 300 M
(                         \(cell-connections cell\)\)\)\)\)\)) s
5 287 M
(    \(or \(connected-to-cell? thing1 thing2\)) s
5 274 M
(        \(connected-to-cell? thing2 thing1\)\)\)) s
5 261 M
(  \(define \(make-subgroup elements\)) s
5 248 M
(    \(name!) s
5 235 M
(     \(make-network-group elements \(make-eq-hash-table\)\)) s
5 222 M
(     \(compute-expression-name elements\)\)\)) s
5 209 M
(  \(define \(compute-expression-name elements\)) s
5 196 M
(    \(define functionalized-tags \(make-eq-hash-table\)\)) s
5 183 M
(    \(define \(connections-of thing\)) s
5 170 M
(      \(if \(cell? thing\)) s
5 157 M
(          \(cell-connections thing\)) s
5 144 M
(          \(filter \(lambda \(other\)) s
5 131 M
(                    \(connected? thing other\)\)) s
5 118 M
(                  \(delete-duplicates) s
5 105 M
(                   \(append \(network-group-elements group\)) s
5 92 M
(                           ;; TODO Oops!  Travesing keys of a weak table!) s
5 79 M
(                           \(hash-table/key-list) s
5 66 M
(                            \(network-group-names group\)\)\)\)\)\)\)) s
5 53 M
(    \(define \(functionalized-to thing\)) s
5 40 M
(      \(and \(not \(cell? thing\)\)) s
5 27 M
(           \(let \(\(connections \(connections-of thing\)\)\)) s
5 14 M
(             ;; TODO Heuristic, and only works on single-output) s
_R
S
%%Page: (5) 11
%%BeginPageSetup
_S
18 36 translate
/pagenum 5 def
/fname (core/metadata.scm) def
/fdir (core/) def
/ftail (metadata.scm) def
% User defined strings:
/fmodstr (Mon Aug 02 14:37:02 2010) def
/pagenumstr (5) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 690 M
(             ;; functionalized things.  It wouldn't have worked to) s
5 677 M
(             ;; just tag them at functionalization time because) s
5 664 M
(             ;; functionalize sees the propagator constructor, but) s
5 651 M
(             ;; these things are the constructed propagators.) s
5 638 M
(             #;) s
5 625 M
(             \(pp \(list \(name thing\)) s
5 612 M
(                       \(hash thing\)) s
5 599 M
(                       \(map \(lambda \(c\)) s
5 586 M
(                              \(list \(name c\) \(hash c\)) s
5 573 M
(                                    \(and \(eq-get c 'subexprs\)) s
5 560 M
(                                         \(map \(lambda \(s\)) s
5 547 M
(                                                \(list \(name s\) \(hash s\)\)\)) s
5 534 M
(                                              \(eq-get c 'subexprs\)\)\)\)\)) s
5 521 M
(                            connections\)\)\)) s
5 508 M
(             \(any \(lambda \(connection\)) s
5 495 M
(                    \(and \(eq-get connection 'subexprs\)) s
5 482 M
(                         \(lset= eq? \(eq-get connection 'subexprs\)) s
5 469 M
(                                \(delq connection connections\)\)) s
5 456 M
(                         connection\)\)) s
5 443 M
(                  connections\)\)\)\)) s
5 430 M
(    \(define \(functionalized-tag! thing\)) s
5 417 M
(      \(let \(\(target \(functionalized-to thing\)\)\)) s
5 404 M
(        \(if target) s
5 391 M
(            \(hash-table/put! functionalized-tags thing target\)\)\)\)) s
5 378 M
(    \(define \(functionalized? thing\)) s
5 365 M
(      \(memq \(hash-table/get functionalized-tags thing #f\)) s
5 352 M
(            elements\)\)) s
5 339 M
(    \(define \(functionalized-to-me cell\)) s
5 326 M
(      \(and \(cell? cell\)) s
5 313 M
(           \(find \(lambda \(thing\)) s
5 300 M
(                   \(eq? cell \(hash-table/get functionalized-tags thing #f\)\)\)) s
5 287 M
(                 elements\)\)\)) s
5 274 M
(    \(for-each functionalized-tag! elements\)) s
5 261 M
(    #; \(pp \(hash-table->alist functionalized-tags\)\)) s
5 248 M
(    \(let loop \(\(head \(find \(lambda \(thing\)) s
5 235 M
(                             \(and \(not \(cell? thing\)\)) s
5 222 M
(                                  \(not \(functionalized? thing\)\)\)\)) s
5 209 M
(                           elements\)\)\)) s
5 196 M
(      #; \(pp `\(,\(name head\) ,\(hash head\)\)\)) s
5 183 M
(      \(if \(cell? head\)) s
5 170 M
(          \(if \(and \(memq head elements\)) s
5 157 M
(                   \(eq-get head 'subexprs\)\)) s
5 144 M
(              \(cons \(name \(functionalized-to-me head\)\)) s
5 131 M
(                    \(map loop \(eq-get head 'subexprs\)\)\)) s
5 118 M
(              \(name-in-group group head\)\)) s
5 105 M
(          \(cons \(name head\) \(map loop \(lset-intersection eq?) s
5 92 M
(                                        \(connections-of head\)) s
5 79 M
(                                        elements\)\)\)\)\)\)) s
_R
S
%%Page: (6) 12
%%BeginPageSetup
_S
18 36 translate
/pagenum 6 def
/fname (core/metadata.scm) def
/fdir (core/) def
/ftail (metadata.scm) def
% User defined strings:
/fmodstr (Mon Aug 02 14:37:02 2010) def
/pagenumstr (6) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 677 M
(  \(let loop \(\(target-subgroups) s
5 664 M
(              \(map list \(filter should-hide?) s
5 651 M
(                                \(network-group-elements group\)\)\)\)) s
5 638 M
(             \(hidable-elements) s
5 625 M
(              \(map list \(filter may-hide?) s
5 612 M
(                                \(network-group-elements group\)\)\)\)) s
5 599 M
(             \(shown-elements) s
5 586 M
(              \(filter should-not-hide? \(network-group-elements group\)\)\)\)) s
5 573 M
(    \(define \(find-pair-to-merge\)) s
5 560 M
(      \(let per-subgroup \(\(subgroups target-subgroups\)\)) s
5 547 M
(        \(if \(null? subgroups\)) s
5 534 M
(            #f) s
5 521 M
(            \(let per-element \(\(elements \(car subgroups\)\)\)) s
5 508 M
(              \(if \(null? elements\)) s
5 495 M
(                  \(per-subgroup \(cdr subgroups\)\)) s
5 482 M
(                  \(let \(\)) s
5 469 M
(                    \(define \(wanted? pile\)) s
5 456 M
(                      \(any \(lambda \(thing\)) s
5 443 M
(                             \(connected? \(car elements\) thing\)\)) s
5 430 M
(                           pile\)\)) s
5 417 M
(                    \(cond \(\(find wanted? \(cdr subgroups\)\) =>) s
5 404 M
(                           \(lambda \(wanted-subgroup\)) s
5 391 M
(                             \(cons elements wanted-subgroup\)\)\)) s
5 378 M
(                          \(\(find wanted? hidable-elements\) =>) s
5 365 M
(                           \(lambda \(wanted-subgroup\)) s
5 352 M
(                             \(cons elements wanted-subgroup\)\)\)) s
5 339 M
(                          \(else \(per-element \(cdr elements\)\)\)\)\)\)\)\)\)\)) s
5 326 M
(    \(let \(\(pair-to-merge \(find-pair-to-merge\)\)\)) s
5 313 M
(      \(if pair-to-merge) s
5 300 M
(          \(loop \(cons \(delete-duplicates) s
5 287 M
(                       ;; I don't get why I need this delete-duplicates,) s
5 274 M
(                       ;; but without it the substructure mysteriously) s
5 261 M
(                       ;; repeats elements.) s
5 248 M
(                       \(append \(car pair-to-merge\)) s
5 235 M
(                               \(cdr pair-to-merge\)\)\)) s
5 222 M
(                      \(delq \(car pair-to-merge\)) s
5 209 M
(                            \(delq \(cdr pair-to-merge\)) s
5 196 M
(                                  target-subgroups\)\)\)) s
5 183 M
(                \(delq \(car pair-to-merge\)) s
5 170 M
(                      \(delq \(cdr pair-to-merge\)) s
5 157 M
(                            hidable-elements\)\)) s
5 144 M
(                shown-elements\)) s
5 131 M
(          \(append \(map make-subgroup target-subgroups\)) s
5 118 M
(                  \(map car hidable-elements\)) s
5 105 M
(                  shown-elements\)\)\)\)\)) s
_R
S
%%Page: (7) 13
%%BeginPageSetup
_S
18 36 translate
/pagenum 7 def
/fname (core/metadata.scm) def
/fdir (core/) def
/ftail (metadata.scm) def
% User defined strings:
/fmodstr (Mon Aug 02 14:37:02 2010) def
/pagenumstr (7) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 677 M
(;;; Stuff for automatically determining the i/o characteristics of a) s
5 664 M
(;;; compound box by expanding it out \(in a sandbox\) and looking at the) s
5 651 M
(;;; i/o characteristics of its structure.) s
5 625 M
(\(define *interesting-cells* #f\)) s
5 599 M
(\(define \(compute-aggregate-metadata prop-ctor arg-cells\)) s
5 586 M
(  ;; This check is here to keep recursive compounds from computing) s
5 573 M
(  ;; their internal metadata forever.  The reason this is ok is that) s
5 560 M
(  ;; to learn the metadata of an unexpanded box, I only need to) s
5 547 M
(  ;; observe what propagators want to attach to its interior boundary,) s
5 534 M
(  ;; not to the entire interior.) s
5 521 M
(  \(if \(or \(not *interesting-cells*\)) s
5 508 M
(          \(not \(null? \(lset-intersection eq?) s
5 495 M
(                        *interesting-cells* arg-cells\)\)\)\)) s
5 482 M
(      \(do-compute-aggregate-metadata prop-ctor arg-cells\)) s
5 469 M
(      '\(\)\)\)) s
5 443 M
(\(define \(do-compute-aggregate-metadata prop-ctor arg-cells\)) s
5 430 M
(  ;; Assumes the prop-ctor is stateless!) s
5 417 M
(  \(with-independent-scheduler) s
5 404 M
(   \(lambda \(\)) s
5 391 M
(     \(let \(\(test-cell-map \(map \(lambda \(arg\)) s
5 378 M
(                                 \(cons arg \(make-cell\)\)\)) s
5 365 M
(                               arg-cells\)\)\)) s
5 352 M
(       \(fluid-let \(\(*interesting-cells* \(map cdr test-cell-map\)\)\)) s
5 339 M
(         \(apply prop-ctor \(map cdr test-cell-map\)\)\)) s
5 326 M
(       \(let* \(\(the-props \(all-propagators\)\)) s
5 313 M
(              \(inputs \(apply append \(map \(lambda \(prop\)) s
5 300 M
(                                           \(or \(eq-get prop 'inputs\)) s
5 287 M
(                                               '\(\)\)\)) s
5 274 M
(                                         the-props\)\)\)) s
5 261 M
(              \(outputs \(apply append \(map \(lambda \(prop\)) s
5 248 M
(                                            \(or \(eq-get prop 'outputs\)) s
5 235 M
(                                                '\(\)\)\)) s
5 222 M
(                                          the-props\)\)\)) s
5 209 M
(              \(my-inputs \(map car) s
5 196 M
(                              \(filter \(lambda \(arg-test\)) s
5 183 M
(                                        \(memq \(cdr arg-test\) inputs\)\)) s
5 170 M
(                                      test-cell-map\)\)\)) s
5 157 M
(              \(my-outputs \(map car) s
5 144 M
(                               \(filter \(lambda \(arg-test\)) s
5 131 M
(                                         \(memq \(cdr arg-test\) outputs\)\)) s
5 118 M
(                                       test-cell-map\)\)\)) s
5 105 M
(              \(constructed-objects ;; Should only be one) s
5 92 M
(               \(filter \(lambda \(x\) \(not \(cell? x\)\)\)) s
5 79 M
(                       \(network-group-elements *current-network-group*\)\)\)\)) s
5 66 M
(         `\(name ,\(name \(car constructed-objects\)\)) s
5 53 M
(           inputs ,my-inputs outputs ,my-outputs\)\)\)\)\)\)) s
_R
S
%%Page: (-) 14
S
%%Page: (1) 15
%%BeginPageSetup
_S
18 36 translate
/pagenum 1 def
/fname (core/merge-effects.scm) def
/fdir (core/) def
/ftail (merge-effects.scm) def
% User defined strings:
/fmodstr (Mon Aug 16 15:16:33 2010) def
/pagenumstr (1) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 690 M
(;;; ----------------------------------------------------------------------) s
5 677 M
(;;; Copyright 2010 Massachusetts Institute of Technology.) s
5 664 M
(;;; ----------------------------------------------------------------------) s
5 651 M
(;;; This file is part of Propagator Network Prototype.) s
5 638 M
(;;; ) s
5 625 M
(;;; Propagator Network Prototype is free software; you can) s
5 612 M
(;;; redistribute it and/or modify it under the terms of the GNU) s
5 599 M
(;;; General Public License as published by the Free Software) s
5 586 M
(;;; Foundation, either version 3 of the License, or \(at your option\)) s
5 573 M
(;;; any later version.) s
5 560 M
(;;; ) s
5 547 M
(;;; Propagator Network Prototype is distributed in the hope that it) s
5 534 M
(;;; will be useful, but WITHOUT ANY WARRANTY; without even the implied) s
5 521 M
(;;; warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.) s
5 508 M
(;;; See the GNU General Public License for more details.) s
5 495 M
(;;; ) s
5 482 M
(;;; You should have received a copy of the GNU General Public License) s
5 469 M
(;;; along with Propagator Network Prototype.  If not, see) s
5 456 M
(;;; <http://www.gnu.org/licenses/>.) s
5 443 M
(;;; ----------------------------------------------------------------------) s
5 417 M
(\(declare \(usual-integrations make-cell cell?\)\)) s
5 391 M
(;;; Data structure to represent a merge result that may have effects.) s
5 365 M
(\(define-structure effectful) s
5 352 M
(  info) s
5 339 M
(  effects\)) s
5 313 M
(\(define \(effectful-return info\)) s
5 300 M
(  \(make-effectful info '\(\)\)\)) s
5 274 M
(\(define \(->effectful thing\)) s
5 261 M
(  \(if \(effectful? thing\)) s
5 248 M
(      thing) s
5 235 M
(      \(effectful-return thing\)\)\)) s
5 209 M
(\(define \(effectful-> effectful\)) s
5 196 M
(  \(let \(\(effectful \(remove-redundant-effects effectful\)\)\)) s
5 183 M
(    \(if \(null? \(effectful-effects effectful\)\)) s
5 170 M
(        \(effectful-info effectful\)) s
5 157 M
(        effectful\)\)\)) s
5 131 M
(\(define \(remove-redundant-effects effectful\)) s
5 118 M
(  \(make-effectful) s
5 105 M
(   \(effectful-info effectful\)) s
5 92 M
(   \(filter \(lambda \(effect\)) s
5 79 M
(             \(not \(redundant-effect? effect\)\)\)) s
5 66 M
(           \(effectful-effects effectful\)\)\)\)) s
5 40 M
(\(define redundant-effect?) s
5 27 M
(  \(make-generic-operator 1 'redundant-effect? \(lambda \(thing\) #f\)\)\)) s
_R
S
%%Page: (2) 16
%%BeginPageSetup
_S
18 36 translate
/pagenum 2 def
/fname (core/merge-effects.scm) def
/fdir (core/) def
/ftail (merge-effects.scm) def
% User defined strings:
/fmodstr (Mon Aug 16 15:16:33 2010) def
/pagenumstr (2) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 677 M
(\(define \(effectful-flatten effectful\)) s
5 664 M
(  \(let \(\(subeffectful \(->effectful \(effectful-info effectful\)\)\)\)) s
5 651 M
(    \(let \(\(subinfo \(effectful-info subeffectful\)\)) s
5 638 M
(          \(subeffects \(effectful-effects subeffectful\)\)) s
5 625 M
(          \(effects \(effectful-effects effectful\)\)\)) s
5 612 M
(      \(make-effectful subinfo \(append effects subeffects\)\)\)\)\)) s
5 586 M
(\(define \(effectful-merge e1 e2\)) s
5 573 M
(  \(let \(\(e1 \(->effectful e1\)\)) s
5 560 M
(        \(e2 \(->effectful e2\)\)\)) s
5 547 M
(    \(let \(\(info-merge \(->effectful \(merge \(effectful-info e1\)) s
5 534 M
(                                          \(effectful-info e2\)\)\)\)\)) s
5 521 M
(      \(effectful->) s
5 508 M
(       \(make-effectful) s
5 495 M
(        \(effectful-info info-merge\)) s
5 482 M
(        \(append \(effectful-effects e1\)) s
5 469 M
(                \(effectful-effects info-merge\)) s
5 456 M
(                \(effectful-effects e2\)\)\)\)\)\)\)) s
5 430 M
(\(define \(effectful-bind effectful func\)) s
5 417 M
(  \(let \(\(effectful \(->effectful effectful\)\)\)) s
5 404 M
(    \(effectful->) s
5 391 M
(     \(effectful-flatten) s
5 378 M
(      \(make-effectful) s
5 365 M
(       \(->effectful \(func \(effectful-info effectful\)\)\)) s
5 352 M
(       \(effectful-effects effectful\)\)\)\)\)\)) s
5 326 M
(\(define \(effectful-list-bind effectfuls func\)) s
5 313 M
(  \(let \(\(effectfuls \(map ->effectful effectfuls\)\)\)) s
5 300 M
(    \(effectful->) s
5 287 M
(     \(effectful-flatten) s
5 274 M
(      \(make-effectful) s
5 261 M
(       \(->effectful \(func \(map effectful-info effectfuls\)\)\)) s
5 248 M
(       \(apply append \(map effectful-effects effectfuls\)\)\)\)\)\)\)) s
_R
S
%%Page: (1) 17
%%BeginPageSetup
_S
18 36 translate
/pagenum 1 def
/fname (core/cells.scm) def
/fdir (core/) def
/ftail (cells.scm) def
% User defined strings:
/fmodstr (Wed Nov 02 17:05:24 2011) def
/pagenumstr (1) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 690 M
(;;; ----------------------------------------------------------------------) s
5 677 M
(;;; Copyright 2009 Massachusetts Institute of Technology.) s
5 664 M
(;;; ----------------------------------------------------------------------) s
5 651 M
(;;; This file is part of Propagator Network Prototype.) s
5 638 M
(;;; ) s
5 625 M
(;;; Propagator Network Prototype is free software; you can) s
5 612 M
(;;; redistribute it and/or modify it under the terms of the GNU) s
5 599 M
(;;; General Public License as published by the Free Software) s
5 586 M
(;;; Foundation, either version 3 of the License, or \(at your option\)) s
5 573 M
(;;; any later version.) s
5 560 M
(;;; ) s
5 547 M
(;;; Propagator Network Prototype is distributed in the hope that it) s
5 534 M
(;;; will be useful, but WITHOUT ANY WARRANTY; without even the implied) s
5 521 M
(;;; warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.) s
5 508 M
(;;; See the GNU General Public License for more details.) s
5 495 M
(;;; ) s
5 482 M
(;;; You should have received a copy of the GNU General Public License) s
5 469 M
(;;; along with Propagator Network Prototype.  If not, see) s
5 456 M
(;;; <http://www.gnu.org/licenses/>.) s
5 443 M
(;;; ----------------------------------------------------------------------) s
5 417 M
(\(declare \(usual-integrations make-cell cell?\)\)) s
5 391 M
(;;;; Merging) s
5 365 M
(;;; My original thought was that merge answers the question:) s
5 352 M
(;;; ) s
5 339 M
(;;; "What is the least-commitment information structure that captures) s
5 326 M
(;;; all the knowledge in these two information structures?") s
5 313 M
(;;; ) s
5 300 M
(;;; That was a pretty good place to start, but it turns out not to be) s
5 287 M
(;;; quite adequate.  What's the problem with it, you might ask?  The) s
5 274 M
(;;; problem is that this question cannot have any side-effects.  But) s
5 261 M
(;;; side-effects appear necessary: when merging two TMSes, one must) s
5 248 M
(;;; check the result for consistency, and maybe signal a nogood set if) s
5 235 M
(;;; one discovers a supported contradiction.  Worse, the) s
5 222 M
(;;; carrying-cells strategy for compound data means that you might) s
5 209 M
(;;; have to merge cells, and the only way to do that is to attach) s
5 196 M
(;;; identity propagators between them, which is most definitely an) s
5 183 M
(;;; effect.) s
5 170 M
(;;; ) s
5 157 M
(;;; After long thought, I understand that the real question that a) s
5 144 M
(;;; cell asks \(whether or not "merge" is a good name for the function) s
5 131 M
(;;; that computes the answer\) is:) s
5 118 M
(;;; ) s
5 105 M
(;;; "What do I need to do to the network in order to make it reflect) s
5 92 M
(;;; the discovery that these two information structures are about the) s
5 79 M
(;;; same object?") s
5 66 M
(;;; ) s
5 53 M
(;;; In the common case, the answer to this question is going to amount) s
5 40 M
(;;; to just an answer to the previous question, namely "You must) s
5 27 M
(;;; record that that object is best described by this information) s
5 14 M
(;;; structure, which is the least-commitment information structure) s
_R
S
%%Page: (2) 18
%%BeginPageSetup
_S
18 36 translate
/pagenum 2 def
/fname (core/cells.scm) def
/fdir (core/) def
/ftail (cells.scm) def
% User defined strings:
/fmodstr (Wed Nov 02 17:05:24 2011) def
/pagenumstr (2) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 690 M
(;;; that captures all the knowledge in the given information) s
5 677 M
(;;; structures."  \(That "you must record" is the set! in add-content\).) s
5 664 M
(;;; Also consistent with the simpler idea is the answer "These two) s
5 651 M
(;;; information structures cannot describe the same object."  \(This is) s
5 638 M
(;;; the contradictory? test in add-content.\)  However, this refined) s
5 625 M
(;;; question provides the opening for more nuanced answers.  For) s
5 612 M
(;;; example, with TMSes, it becomes possible to answer "The object is) s
5 599 M
(;;; described by the following information structure, and you should) s
5 586 M
(;;; record the following nogood set."  Or, with carrying cells, the) s
5 573 M
(;;; answer can be "The object is described by the following) s
5 560 M
(;;; information structure, and you should identify these two cells.") s
5 547 M
(;;; ) s
5 534 M
(;;; The advantage of thinking about it this way is that merge can be a) s
5 521 M
(;;; pure function, which is allowed to return requests for these) s
5 508 M
(;;; effects in addition to refined information structures.  Then places) s
5 495 M
(;;; where merge is called recursively have a chance to intercept and) s
5 482 M
(;;; modify these requests for effects \(for example noting that they) s
5 469 M
(;;; must be considered conditional on certain premises\), and only ) s
5 456 M
(;;; add-content actually executes the effects that come to it.) s
_R
S
%%Page: (3) 19
%%BeginPageSetup
_S
18 36 translate
/pagenum 3 def
/fname (core/cells.scm) def
/fdir (core/) def
/ftail (cells.scm) def
% User defined strings:
/fmodstr (Wed Nov 02 17:05:24 2011) def
/pagenumstr (3) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 677 M
(;;;; Propagator cells) s
5 651 M
(\(define \(%make-cell merge\)              ; message-accepter style) s
5 638 M
(  \(let \(\(neighbors '\(\)\) \(content nothing\)) s
5 625 M
(        \(whoiam #f\) \(history '\(\)\)) s
5 612 M
(        \(probe #f\)\)) s
5 599 M
(    \(define \(add-content increment informant\)) s
5 586 M
(      \(let \(\(info+effects \(->effectful \(merge content increment\)\)\)\)) s
5 573 M
(        \(let \(\(effects \(effectful-effects info+effects\)\)) s
5 560 M
(              \(new-content \(effectful-info info+effects\)\)\)) s
5 547 M
(          \(if probe \(probe\)\)) s
5 534 M
(          \(cond \(\(eq? new-content content\) 'ok\)) s
5 521 M
(                \(\(contradictory? new-content\)) s
5 508 M
(                 \(error "Ack! Inconsistency!") s
5 495 M
(                        \(name-stack whoiam\) increment\)) s
5 482 M
(                 'this-is-not-a-tail-call\)) s
5 469 M
(                \(else ) s
5 456 M
(                 \(set! content new-content\)) s
5 443 M
(                 ;; Two debugging aids.) s
5 430 M
(                 \(eq-adjoin! content 'visited-cells me\)) s
5 417 M
(                 \(augment-history! whoiam informant new-content) s
5 404 M
(                                   history) s
5 391 M
(                                   \(lambda \(new\)) s
5 378 M
(                                     \(set! history new\)\)\)) s
5 365 M
(                 \(alert-propagators neighbors\)\)\)) s
5 352 M
(          \(for-each execute-effect effects\)\)\)\)) s
5 339 M
(    \(define \(new-neighbor! new-neighbor\)) s
5 326 M
(      \(if \(not \(memq new-neighbor neighbors\)\)) s
5 313 M
(          \(begin) s
5 300 M
(            \(set! neighbors \(cons new-neighbor neighbors\)\)) s
5 287 M
(            \(alert-propagators new-neighbor\)\)\)\)) s
5 274 M
(    \(define \(me message\)) s
5 261 M
(      \(cond \(\(eq? message 'content\) content\)) s
5 248 M
(            \(\(eq? message 'add-content\) add-content\)) s
5 235 M
(            \(\(eq? message 'neighbors\) neighbors\)) s
5 222 M
(            \(\(eq? message 'new-neighbor!\) new-neighbor!\)) s
5 209 M
(            \(\(eq? message 'iam!\)) s
5 196 M
(             \(lambda \(who\)) s
5 183 M
(               \(if whoiam \(error "Psychotic cell!" who whoiam\)\)) s
5 170 M
(               \(set! whoiam who\)\)\)) s
5 157 M
(            \(\(eq? message 'who?\) whoiam\)) s
5 144 M
(            \(\(eq? message 'history\) history\)) s
5 131 M
(            ;; See ui.scm for probes.) s
5 118 M
(            \(\(eq? message 'probe!\) \(lambda \(p\) \(set! probe p\)\)\)) s
5 105 M
(            \(\(eq? message 'unprobe!\) \(set! probe #f\)\)) s
5 92 M
(            \(else \(error "Unknown message" message\)\)\)\)) s
5 79 M
(    me\)\)) s
5 53 M
(\(define \(make-cell #!optional merger\)) s
5 40 M
(  \(define me) s
5 27 M
(    \(make-entity) s
5 14 M
(     \(lambda \(self . args\)) s
_R
S
%%Page: (4) 20
%%BeginPageSetup
_S
18 36 translate
/pagenum 4 def
/fname (core/cells.scm) def
/fdir (core/) def
/ftail (cells.scm) def
% User defined strings:
/fmodstr (Wed Nov 02 17:05:24 2011) def
/pagenumstr (4) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 690 M
(       \(apply application self args\)\)) s
5 677 M
(     \(%make-cell) s
5 664 M
(      \(if \(default-object? merger\)      ;Sussman's crock escape hatch. ) s
5 651 M
(          merge) s
5 638 M
(          merger\)\)\)\)) s
5 625 M
(  \(eq-put! me 'cell #t\)) s
5 612 M
(  \(\(\(entity-extra me\) 'iam!\) me\)) s
5 599 M
(  \(register-diagram me\)) s
5 586 M
(  me\)) s
_R
S
%%Page: (5) 21
%%BeginPageSetup
_S
18 36 translate
/pagenum 5 def
/fname (core/cells.scm) def
/fdir (core/) def
/ftail (cells.scm) def
% User defined strings:
/fmodstr (Wed Nov 02 17:05:24 2011) def
/pagenumstr (5) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 677 M
(\(define \(content cell\)) s
5 664 M
(  \(\(entity-extra cell\) 'content\)\)) s
5 651 M
(\(define \(add-content cell increment #!optional informant\)) s
5 638 M
(  \(\(\(entity-extra cell\) 'add-content\) increment informant\)\)) s
5 625 M
(\(define \(neighbors cell\)) s
5 612 M
(  \(\(entity-extra cell\) 'neighbors\)\)) s
5 599 M
(\(define \(new-neighbor! cell neighbor\)) s
5 586 M
(  \(\(\(entity-extra cell\) 'new-neighbor!\) neighbor\)\)) s
5 573 M
(\(define \(who? cell\)) s
5 560 M
(  \(\(entity-extra cell\) 'who?\)\)) s
5 547 M
(\(define \(history cell\)) s
5 534 M
(  \(\(entity-extra cell\) 'history\)\)) s
5 521 M
(\(define \(cell? thing\)) s
5 508 M
(  \(eq-get thing 'cell\)\)) s
5 482 M
(;;; Default history collector collects the most recent informant only) s
5 469 M
(\(define \(augment-history! cell informant new-content old-history permission-to) s
5 456 M
(-set\)) s
5 443 M
(  \(permission-to-set `\(,informant ,new-content\)\)\)) s
5 404 M
(\(define \(make-named-cell name\)) s
5 391 M
(  \(name! \(make-cell\) name\)\)) s
5 365 M
(\(define *ensure-cell-generates-constant-propagators* #f\)) s
5 339 M
(\(define \(ensure-cell thing\)) s
5 326 M
(  \(if \(cell? thing\)) s
5 313 M
(      thing) s
5 300 M
(      \(if *ensure-cell-generates-constant-propagators*) s
5 287 M
(          ;; TODO Retain forward reference to e:constant?  Copy the code?) s
5 274 M
(          \(let \(\(answer \(e:constant thing\)\)\)) s
5 261 M
(            \(add-content answer thing\)  ; Enables early access) s
5 248 M
(            answer\)) s
5 235 M
(          \(let \(\(answer \(make-named-cell \(name thing\)\)\)\)) s
5 222 M
(            \(add-content answer thing\)) s
5 209 M
(            answer\)\)\)\)) s
_R
S
%%Page: (6) 22
%%BeginPageSetup
_S
18 36 translate
/pagenum 6 def
/fname (core/cells.scm) def
/fdir (core/) def
/ftail (cells.scm) def
% User defined strings:
/fmodstr (Wed Nov 02 17:05:24 2011) def
/pagenumstr (6) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 677 M
(;;;; Cellular Generics) s
5 651 M
(\(define \(merge info1 info2\)) s
5 638 M
(  \(if \(equivalent? info1 info2\)) s
5 625 M
(      info1) s
5 612 M
(      \(let \(\(answer \(generic-merge info1 info2\)\)\)) s
5 599 M
(        \(cond \(\(effectful? answer\) answer\)) s
5 586 M
(              \(\(equivalent? answer info1\) info1\)) s
5 573 M
(              \(\(equivalent? answer info2\) info2\)) s
5 560 M
(              \(else answer\)\)\)\)\)) s
5 534 M
(\(define generic-merge) s
5 521 M
(  \(make-generic-operator 2 'merge) s
5 508 M
(   \(lambda \(content increment\)) s
5 495 M
(     \(if \(default-equal? content increment\)) s
5 482 M
(         content) s
5 469 M
(         the-contradiction\)\)\)\)) s
5 443 M
(\(set-operator-record! merge \(get-operator-record generic-merge\)\)) s
5 417 M
(\(define \(equivalent? info1 info2\)) s
5 404 M
(  \(or \(eqv? info1 info2\)) s
5 391 M
(      \(generic-equivalent? info1 info2\)\)\)) s
5 365 M
(\(define generic-equivalent?) s
5 352 M
(  \(make-generic-operator 2 'equivalent? default-equal?\)\)) s
5 326 M
(\(set-operator-record! equivalent? \(get-operator-record generic-equivalent?\)\)) s
5 300 M
(\(define the-contradiction #\(*the-contradiction*\)\)) s
5 274 M
(\(define contradictory?) s
5 261 M
(  \(make-generic-operator 1 'contradictory?) s
5 248 M
(   \(lambda \(thing\) \(eq? thing the-contradiction\)\)\)\)) s
5 222 M
(\(define execute-effect ) s
5 209 M
(  \(make-generic-operator 1 'execute-effect \(lambda \(effect\) \(effect\)\)\)\)) s
_R
S
%%Page: (7) 23
%%BeginPageSetup
_S
18 36 translate
/pagenum 7 def
/fname (core/cells.scm) def
/fdir (core/) def
/ftail (cells.scm) def
% User defined strings:
/fmodstr (Wed Nov 02 17:05:24 2011) def
/pagenumstr (7) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 677 M
(;;; Merging utilities) s
5 651 M
(\(define \(implies? v1 v2\)) s
5 638 M
(  ;; This is right on the assumption that trivial effects are squeezed) s
5 625 M
(  ;; out \(for example by using effectful->\).) s
5 612 M
(  \(eq? v1 \(merge v1 v2\)\)\)) s
5 586 M
(;;; This is the n-ary merge) s
5 573 M
(\(define \(merge* infos-list\)) s
5 560 M
(  \(fold-left effectful-merge nothing infos-list\)\)) s
5 534 M
(;;; The nothing partial information structure) s
5 508 M
(\(define nothing #\(*the-nothing*\)\)) s
5 482 M
(\(define \(nothing? thing\)) s
5 469 M
(  \(eq? thing nothing\)\)) s
5 443 M
(\(defhandler merge) s
5 430 M
( \(lambda \(content increment\) content\)) s
5 417 M
( any? nothing?\)) s
5 391 M
(\(defhandler merge) s
5 378 M
( \(lambda \(content increment\) increment\)) s
5 365 M
( nothing? any?\)) s
5 339 M
(;;;; Cells as partial information) s
5 313 M
(\(define \(equivalent-cells? cell1 cell2\)) s
5 300 M
(  \(or \(eq? cell1 cell2\)) s
5 287 M
(      \(let \(\(candidate-bridge-control \(eq-get cell1 cell2\)\)\)) s
5 274 M
(        \(and candidate-bridge-control) s
5 261 M
(             \(equivalent? #t \(content candidate-bridge-control\)\)\)\)\)\)) s
5 235 M
(\(defhandler equivalent? equivalent-cells? cell? cell?\)) s
5 209 M
(\(define \(cell-merge cell1 cell2\)) s
5 196 M
(  \(effectful->) s
5 183 M
(   \(make-effectful) s
5 170 M
(    cell1) s
5 157 M
(    \(list \(make-cell-join-effect cell1 cell2 #t\)\)\)\)\)) s
5 131 M
(\(defhandler merge cell-merge cell? cell?\)) s
_R
S
%%Page: (8) 24
%%BeginPageSetup
_S
18 36 translate
/pagenum 8 def
/fname (core/cells.scm) def
/fdir (core/) def
/ftail (cells.scm) def
% User defined strings:
/fmodstr (Wed Nov 02 17:05:24 2011) def
/pagenumstr (8) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 677 M
(;;; Cell joining effects) s
5 651 M
(\(define-structure cell-join-effect) s
5 638 M
(  cell1) s
5 625 M
(  cell2) s
5 612 M
(  control\)) s
5 586 M
(\(define \(execute-cell-join effect\)) s
5 573 M
(  \(let \(\(cell1 \(cell-join-effect-cell1 effect\)\)) s
5 560 M
(        \(cell2 \(cell-join-effect-cell2 effect\)\)) s
5 547 M
(        \(control-info \(cell-join-effect-control effect\)\)\)) s
5 534 M
(    \(let \(\(control \(the-bridge-control cell1 cell2\)\)\)) s
5 521 M
(      \(add-content control control-info\)\)\)\)) s
5 495 M
(\(defhandler execute-effect) s
5 482 M
(  execute-cell-join) s
5 469 M
(  cell-join-effect?\)) s
5 443 M
(\(define \(the-bridge-control cell1 cell2\)) s
5 430 M
(  \(let \(\(candidate \(eq-get cell1 cell2\)\)\)) s
5 417 M
(    \(or candidate) s
5 404 M
(        \(let \(\(control \(make-named-cell 'bridge-control\)\)\)) s
5 391 M
(          ;; TODO Think about whether this really needs to be) s
5 378 M
(          ;; symmetric) s
5 365 M
(          \(switch control cell1 cell2\)) s
5 352 M
(          \(switch control cell2 cell1\)) s
5 339 M
(          \(eq-put! cell1 cell2 control\)) s
5 326 M
(          \(eq-put! cell2 cell1 control\)) s
5 313 M
(          control\)\)\)\)) s
5 287 M
(\(define \(boring-cell-join? effect\)) s
5 274 M
(  \(let \(\(cell1 \(cell-join-effect-cell1 effect\)\)) s
5 261 M
(        \(cell2 \(cell-join-effect-cell2 effect\)\)) s
5 248 M
(        \(control-info \(cell-join-effect-control effect\)\)\)) s
5 235 M
(    \(or \(eq? cell1 cell2\)) s
5 222 M
(        \(let \(\(candidate \(eq-get cell1 cell2\)\)\)) s
5 209 M
(          \(and candidate) s
5 196 M
(               \(implies? \(content candidate\)) s
5 183 M
(                         control-info\)\)\)\)\)\)) s
5 157 M
(\(defhandler redundant-effect? boring-cell-join? cell-join-effect?\)) s
5 131 M
(;;; Diagram merging) s
5 105 M
(\(defhandler merge merge-diagram %diagram? %diagram?\)) s
5 92 M
(\(defhandler equivalent? diagram-equivalent? %diagram? %diagram?\)) s
5 66 M
(;;; *metadiagram* is the toplevel-diagram for diagram cells.  It is) s
5 53 M
(;;; the only diagram that is not in a cell, and its only purpose is to) s
5 40 M
(;;; hold cells in which diagrams are contained to keep them out of) s
5 27 M
(;;; visualizations of the toplevel-diagram.) s
5 14 M
(\(define *metadiagram* \(empty-diagram 'metadiagram\)\)) s
_R
S
%%Page: (9) 25
%%BeginPageSetup
_S
18 36 translate
/pagenum 9 def
/fname (core/cells.scm) def
/fdir (core/) def
/ftail (cells.scm) def
% User defined strings:
/fmodstr (Wed Nov 02 17:05:24 2011) def
/pagenumstr (9) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 677 M
(;;; *toplevel-diagram-cell* is the cell containing the) s
5 664 M
(;;; toplevel-diagram.  It belongs to the *metadiagram*) s
5 651 M
(\(define *toplevel-diagram-cell*) s
5 638 M
(  \(fluid-let \(\(register-diagram \(diagram-inserter *metadiagram*\)\)\)) s
5 625 M
(    \(make-cell\)\)\)) s
5 612 M
(\(add-content *toplevel-diagram-cell* *toplevel-diagram*\)) s
5 586 M
(;;; Redefine diagram insertion in terms of operations on the) s
5 573 M
(;;; *toplevel-diagram-cell*) s
5 560 M
(\(define \(diagram-cell-inserter target-diagram-cell\)) s
5 547 M
(  \(lambda \(subdiagram #!optional name\)) s
5 534 M
(    ;;; Wrap the subdiagram in a diagram in a cell.) s
5 521 M
(    \(let \(\(subdiagram-wrapper \(empty-diagram 'wrapper\)\)\)) s
5 508 M
(      \(if \(default-object? name\)) s
5 495 M
(          \(note-diagram-part! subdiagram-wrapper subdiagram\)) s
5 482 M
(          \(add-diagram-named-part! subdiagram-wrapper name subdiagram\)\)) s
5 469 M
(      \(add-content target-diagram-cell subdiagram-wrapper\)\)) s
5 456 M
(    subdiagram\)\)) s
5 430 M
(\(define \(register-diagram subdiagram #!optional name\)) s
5 417 M
(  \(\(diagram-cell-inserter *toplevel-diagram-cell*\) subdiagram name\)\)) s
5 391 M
(\(define \(reset-diagrams!\)) s
5 378 M
(  ;; Clean out the metadiagram.) s
5 365 M
(  \(destroy-diagram! *metadiagram*\)) s
5 352 M
(  \(set! *metadiagram* \(empty-diagram 'metadiagram\)\)) s
5 339 M
(  \(fluid-let \(\(register-diagram \(diagram-inserter *metadiagram*\)\)\)) s
5 326 M
(    ;; And then, reset the toplevel diagram.) s
5 313 M
(    \(set! *toplevel-diagram-cell* \(make-cell\)\)\)) s
5 300 M
(  ;; Hmmm...  This doesn't look monotonic.) s
5 287 M
(  \(destroy-diagram! *toplevel-diagram*\)) s
5 274 M
(  \(set! *toplevel-diagram* \(empty-diagram 'toplevel\)\)) s
5 261 M
(  \(set! register-diagram \(diagram-cell-inserter *toplevel-diagram-cell*\)\)) s
5 248 M
(  \(add-content *toplevel-diagram-cell* *toplevel-diagram*\)\)) s
5 222 M
(\(define \(empty-diagram-cell identity\)) s
5 209 M
(  \(let \(\(diagram-cell) s
5 196 M
(         \(fluid-let \(\(register-diagram \(diagram-inserter *metadiagram*\)\)\)) s
5 183 M
(           \(make-cell\)\)\)\)) s
5 170 M
(    \(add-content diagram-cell \(make-%diagram identity '\(\) '\(\)\)\)) s
5 157 M
(    diagram-cell\)\)) s
5 131 M
(\(define \(do-make-diagram-for-compound-constructor identity prop-ctor args\)) s
5 118 M
(  \(with-independent-scheduler) s
5 105 M
(   \(lambda \(\)) s
5 92 M
(     \(let \(\(test-cell-map \(map \(lambda \(arg\)) s
5 79 M
(                                 \(cons \(make-cell\) arg\)\)) s
5 66 M
(                               args\)\)\)) s
5 53 M
(       \(fluid-let \(\(*interesting-cells* \(map car test-cell-map\)\)\)) s
5 40 M
(         \(apply prop-ctor \(map car test-cell-map\)\)\)) s
5 27 M
(       ;; The following code shouldn't execute until the diagram) s
5 14 M
(       ;; registrations from prop-ctor are reflected in the) s
_R
S
%%Page: (10) 26
%%BeginPageSetup
_S
18 36 translate
/pagenum 10 def
/fname (core/cells.scm) def
/fdir (core/) def
/ftail (cells.scm) def
% User defined strings:
/fmodstr (Wed Nov 02 17:05:24 2011) def
/pagenumstr (10) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 690 M
(       ;; *toplevel-diagram-cell*) s
5 677 M
(       \(propagator *toplevel-diagram-cell*) s
5 664 M
(         \(lambda \(\)) s
5 651 M
(           ;; Specifically, we assume that there are parts to the) s
5 638 M
(           ;; *toplevel-diagram*, so we need to wait until this is) s
5 625 M
(           ;; true.) s
5 612 M
(           \(if \(null? \(diagram-parts \(contents *toplevel-diagram-cell*\)\)\)) s
5 599 M
(               'ok) s
5 586 M
(               \(let \(\(prop-ctor-diagram) s
5 573 M
(                      \(car) s
5 560 M
(                       ;; There should only be one of these) s
5 547 M
(                       \(filter \(lambda \(x\) \(not \(cell? x\)\)\)) s
5 534 M
(                               \(map cdr \(diagram-parts) s
5 521 M
(                                         \(contents *toplevel-diagram-cell*\)\)\)\)) s
5 508 M
(\)\)\)) s
5 495 M
(                 \(make-%diagram) s
5 482 M
(                  identity) s
5 469 M
(                  \(map \(lambda \(name.part\)) s
5 456 M
(                         \(cons \(car name.part\)) s
5 443 M
(                               \(cdr \(assq \(cdr name.part\) test-cell-map\)\)\)\)) s
5 430 M
(                       \(filter \(lambda \(name.part\)) s
5 417 M
(                                 \(assq \(cdr name.part\) test-cell-map\)\)) s
5 404 M
(                               \(diagram-parts prop-ctor-diagram\)\)\)) s
5 391 M
(                  \(map \(lambda \(promise\)) s
5 378 M
(                         \(retarget-promise) s
5 365 M
(                          promise) s
5 352 M
(                          \(cdr \(assq \(diagram-promise-target promise\)) s
5 339 M
(                                     test-cell-map\)\)\)\)) s
5 326 M
(                       \(filter \(lambda \(promise\)) s
5 313 M
(                                 \(assq \(diagram-promise-target promise\)) s
5 300 M
(                                       test-cell-map\)\)) s
5 287 M
(                               \(diagram-promises prop-ctor-diagram\)\)\)\)\)\)\)\)\)\)\)\)) s
_R
S
%%Page: (1) 27
%%BeginPageSetup
_S
18 36 translate
/pagenum 1 def
/fname (core/cell-sugar.scm) def
/fdir (core/) def
/ftail (cell-sugar.scm) def
% User defined strings:
/fmodstr (Tue Apr 26 17:31:01 2011) def
/pagenumstr (1) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 690 M
(;;; ----------------------------------------------------------------------) s
5 677 M
(;;; Copyright 2009 Massachusetts Institute of Technology.) s
5 664 M
(;;; ----------------------------------------------------------------------) s
5 651 M
(;;; This file is part of Propagator Network Prototype.) s
5 638 M
(;;; ) s
5 625 M
(;;; Propagator Network Prototype is free software; you can) s
5 612 M
(;;; redistribute it and/or modify it under the terms of the GNU) s
5 599 M
(;;; General Public License as published by the Free Software) s
5 586 M
(;;; Foundation, either version 3 of the License, or \(at your option\)) s
5 573 M
(;;; any later version.) s
5 560 M
(;;; ) s
5 547 M
(;;; Propagator Network Prototype is distributed in the hope that it) s
5 534 M
(;;; will be useful, but WITHOUT ANY WARRANTY; without even the implied) s
5 521 M
(;;; warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.) s
5 508 M
(;;; See the GNU General Public License for more details.) s
5 495 M
(;;; ) s
5 482 M
(;;; You should have received a copy of the GNU General Public License) s
5 469 M
(;;; along with Propagator Network Prototype.  If not, see) s
5 456 M
(;;; <http://www.gnu.org/licenses/>.) s
5 443 M
(;;; ----------------------------------------------------------------------) s
5 417 M
(\(declare \(usual-integrations make-cell cell?\)\)) s
5 391 M
(;;;; Carcinogens for the semicolon part 1: Defining cells) s
5 365 M
(;;; Here be macros that provide syntactic sugar for playing with the) s
5 352 M
(;;; propagator language as embedded in Scheme.  Syntactic regularities) s
5 339 M
(;;; in patterns of definition of cells are captured.) s
5 313 M
(;; \(define-cell foo form\)) s
5 300 M
(;; is the same as) s
5 287 M
(;; \(define foo \(ensure-cell form\)\)) s
5 274 M
(;; except it grabs the name foo and associates it with the) s
5 261 M
(;; cell that form constructs.) s
5 248 M
(;;) s
5 235 M
(;; For the frequent case when you want a fresh cell) s
5 222 M
(;; \(define-cell foo\)) s
5 209 M
(;; expands into) s
5 196 M
(;; \(define-cell foo \(make-named-cell 'foo\)\)) s
5 183 M
(;; The metadata is then available two ways.) s
5 157 M
(\(define-syntax define-cell) s
5 144 M
(  \(syntax-rules \(\)) s
5 131 M
(    \(\(define-cell symbol form\)) s
5 118 M
(     \(define symbol \(register-diagram \(ensure-cell form\) 'symbol\)\)\)) s
5 105 M
(    \(\(define-cell symbol\)) s
5 92 M
(     \(define-cell symbol \(make-named-cell 'symbol\)\)\)\)\)) s
_R
S
%%Page: (2) 28
%%BeginPageSetup
_S
18 36 translate
/pagenum 2 def
/fname (core/cell-sugar.scm) def
/fdir (core/) def
/ftail (cell-sugar.scm) def
% User defined strings:
/fmodstr (Tue Apr 26 17:31:01 2011) def
/pagenumstr (2) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 677 M
(;; \(let-cells \(\(foo foo-form\)) s
5 664 M
(;;             \(bar bar-form\)) s
5 651 M
(;;             \(baz baz-form\)\)) s
5 638 M
(;;   stuff\)) s
5 625 M
(;; is the same as ) s
5 612 M
(;; \(let \(\(foo \(ensure-cell foo-form\)\)) s
5 599 M
(;;       \(bar \(ensure-cell bar-form\)\)) s
5 586 M
(;;       \(baz \(ensure-cell baz-form\)\)\)) s
5 573 M
(;;   stuff\)) s
5 560 M
(;; except that it captures the names foo bar and baz and associates) s
5 547 M
(;; them with the cells that the corresponding forms return.) s
5 534 M
(;;) s
5 521 M
(;; For the frequent case when you want fresh cells) s
5 508 M
(;; \(let-cells \(foo bar baz\)) s
5 495 M
(;;   stuff\)) s
5 482 M
(;; expands into) s
5 469 M
(;; \(let-cells \(\(foo \(make-named-cell 'foo\)\)) s
5 456 M
(;;             \(bar \(make-named-cell 'bar\)\)) s
5 443 M
(;;             \(baz \(make-named-cell 'baz\)\)\)) s
5 430 M
(;;   stuff\)) s
5 417 M
(;; The metadata is then available two ways.) s
5 391 M
(;; The following would suffice for the above:) s
5 378 M
(#;) s
5 365 M
( \(define-syntax let-cells) s
5 352 M
(   \(syntax-rules \(\)) s
5 339 M
(     \(\(let-cells \(\(name form\) ...\)) s
5 326 M
(        form ...\)) s
5 313 M
(      \(let \(\(name \(register-diagram \(ensure-cell form\) 'name\)\) ...\)) s
5 300 M
(        form ...\)\)) s
5 287 M
(     \(\(let-cells \(name ...\)) s
5 274 M
(        form ...\)) s
5 261 M
(      \(let-cells \(\(name \(make-named-cell 'name\)\)...\)) s
5 248 M
(        form ...\)\)\)\)) s
5 222 M
(;; The much more horrible LET-CELLS macro below allows the two use) s
5 209 M
(;; patterns above to mix, as follows,) s
5 196 M
(;; \(let-cells \(\(foo foo-form\)) s
5 183 M
(;;             bar) s
5 170 M
(;;             \(baz baz-form\)\)) s
5 157 M
(;;   stuff\)) s
5 144 M
(;; and have the right thing happen.  It also interprets the) s
5 131 M
(;; slightly more traditional) s
5 118 M
(;; \(let-cells \(\(foo foo-form\)) s
5 105 M
(;;             \(bar\)) s
5 92 M
(;;             \(baz baz-form\)\)) s
5 79 M
(;;   stuff\)) s
5 66 M
(;; in agreement with Scheme's let.) s
_R
S
%%Page: (3) 29
%%BeginPageSetup
_S
18 36 translate
/pagenum 3 def
/fname (core/cell-sugar.scm) def
/fdir (core/) def
/ftail (cell-sugar.scm) def
% User defined strings:
/fmodstr (Tue Apr 26 17:31:01 2011) def
/pagenumstr (3) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 677 M
(\(define-syntax let-cells) s
5 664 M
(  \(syntax-rules \(\)) s
5 651 M
(    \(\(let-cells \(cell-binding ...\)) s
5 638 M
(       form ...\)) s
5 625 M
(     \(normalize-let-clauses let-cells) s
5 612 M
(       \(cell-binding ...\)) s
5 599 M
(       \(\)) s
5 586 M
(       form ...\)\)) s
5 573 M
(    \(\(let-cells "done") s
5 560 M
(       \(\(cell-name cell-form\) ...\)) s
5 547 M
(       form ...\)) s
5 534 M
(     \(let \(\(cell-name \(register-diagram \(ensure-cell cell-form\) 'cell-name\)\) .) s
5 521 M
(..\)) s
5 508 M
(       form ...\)\)\)\)) s
5 482 M
(\(define-syntax normalize-let-clauses) s
5 469 M
(  \(syntax-rules \(\)) s
5 456 M
(    \(\(normalize-let-clauses let-form) s
5 443 M
(       \(\(cell-name cell-form\) clause ...\)) s
5 430 M
(       \(done-clause ...\)) s
5 417 M
(       form ...\)) s
5 404 M
(     \(normalize-let-clauses let-form) s
5 391 M
(       \(clause ...\)) s
5 378 M
(       \(\(cell-name cell-form\) done-clause ...\)) s
5 365 M
(       form ...\)\)) s
5 352 M
(    \(\(normalize-let-clauses let-form) s
5 339 M
(       \(\(cell-name\) clause ...\)) s
5 326 M
(       \(done-clause ...\)) s
5 313 M
(       form ...\)) s
5 300 M
(     \(normalize-let-clauses let-form) s
5 287 M
(       \(cell-name clause ...\)) s
5 274 M
(       \(done-clause ...\)) s
5 261 M
(       form ...\)\)) s
5 248 M
(    \(\(normalize-let-clauses let-form) s
5 235 M
(       \(cell-name clause ...\)) s
5 222 M
(       \(done-clause ...\)) s
5 209 M
(       form ...\)) s
5 196 M
(     \(normalize-let-clauses let-form) s
5 183 M
(       \(clause ...\)) s
5 170 M
(       \(\(cell-name \(make-named-cell 'cell-name\)\) done-clause ...\)) s
5 157 M
(       form ...\)\)) s
5 144 M
(    \(\(normalize-let-clauses let-form) s
5 131 M
(       \(\)) s
5 118 M
(       done-clauses) s
5 105 M
(       form ...\)) s
5 92 M
(     \(let-form "done" done-clauses) s
5 79 M
(       form ...\)\)\)\)) s
_R
S
%%Page: (4) 30
%%BeginPageSetup
_S
18 36 translate
/pagenum 4 def
/fname (core/cell-sugar.scm) def
/fdir (core/) def
/ftail (cell-sugar.scm) def
% User defined strings:
/fmodstr (Tue Apr 26 17:31:01 2011) def
/pagenumstr (4) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 690 M
(;; let-cell is a grammatical convenience if there is only one cell.) s
5 677 M
(;; \(let-cell \(foo foo-form\) stuff\) and \(let-cell foo stuff\) are both) s
5 664 M
(;; ok and equivalent to \(let-cells \(\(foo foo-form\)\) stuff\) and) s
5 651 M
(;; \(let-cells \(foo\) stuff\), respectively, but less awkward to read.) s
5 638 M
(\(define-syntax let-cell) s
5 625 M
(  \(syntax-rules \(\)) s
5 612 M
(    \(\(let-cell cell-binding) s
5 599 M
(       form ...\)) s
5 586 M
(     \(let-cells \(cell-binding\)) s
5 573 M
(       form ...\)\)\)\)) s
5 547 M
(;; And here is the moral equivalent of let*) s
5 534 M
(\(define-syntax let-cells*) s
5 521 M
(  \(syntax-rules \(\)) s
5 508 M
(    \(\(let-cells* \(binding bindings ...\)) s
5 495 M
(       form ...\)) s
5 482 M
(     \(let-cell binding) s
5 469 M
(       \(let-cells* \(bindings ...\)) s
5 456 M
(         form ...\)\)\)) s
5 443 M
(    \(\(let-cells* \(\)) s
5 430 M
(       form ...\)) s
5 417 M
(     \(let-cells \(\)) s
5 404 M
(       form ...\)\)\)\)) s
5 378 M
(;; Here is the moral equivalent of letrec, with the same hairy clause) s
5 365 M
(;; processing as let.  This is actually nicer than Scheme letrec,) s
5 352 M
(;; because "uninitialized" cells have a perfectly good initial state:) s
5 339 M
(;; they contain nothing.  So names introduced by let-cells-rec can be) s
5 326 M
(;; used in defining forms for those same names directly, without) s
5 313 M
(;; having to insist on an intervening delaying form the way Scheme's) s
5 300 M
(;; letrec does.  In a sense, the cells themselves are the needed) s
5 287 M
(;; delaying form.) s
5 274 M
(\(define-syntax let-cells-rec) s
5 261 M
(  \(syntax-rules \(\)) s
5 248 M
(    \(\(let-cells-rec \(cell-binding ...\)) s
5 235 M
(       form ...\)) s
5 222 M
(     \(normalize-let-clauses let-cells-rec) s
5 209 M
(       \(cell-binding ...\)) s
5 196 M
(       \(\)) s
5 183 M
(       form ...\)\)) s
5 170 M
(    \(\(let-cells-rec "done") s
5 157 M
(       \(\(cell-name cell-form\) ...\)) s
5 144 M
(       form ...\)) s
5 131 M
(     \(let-cells \(cell-name ...\)) s
5 118 M
(       \(c:id cell-name cell-form\) ...) s
5 105 M
(       form ...\)\)\)\)) s
5 79 M
(\(define-syntax let-cell-rec) s
5 66 M
(  \(syntax-rules \(\)) s
5 53 M
(    \(\(let-cell-rec cell-binding) s
5 40 M
(       form ...\)) s
5 27 M
(     \(let-cells-rec \(cell-binding\)) s
5 14 M
(       form ...\)\)\)\)) s
_R
S
%%Page: (1) 31
%%BeginPageSetup
_S
18 36 translate
/pagenum 1 def
/fname (core/propagators.scm) def
/fdir (core/) def
/ftail (propagators.scm) def
% User defined strings:
/fmodstr (Wed Apr 27 20:17:01 2011) def
/pagenumstr (1) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 690 M
(;;; ----------------------------------------------------------------------) s
5 677 M
(;;; Copyright 2009 Massachusetts Institute of Technology.) s
5 664 M
(;;; ----------------------------------------------------------------------) s
5 651 M
(;;; This file is part of Propagator Network Prototype.) s
5 638 M
(;;; ) s
5 625 M
(;;; Propagator Network Prototype is free software; you can) s
5 612 M
(;;; redistribute it and/or modify it under the terms of the GNU) s
5 599 M
(;;; General Public License as published by the Free Software) s
5 586 M
(;;; Foundation, either version 3 of the License, or \(at your option\)) s
5 573 M
(;;; any later version.) s
5 560 M
(;;; ) s
5 547 M
(;;; Propagator Network Prototype is distributed in the hope that it) s
5 534 M
(;;; will be useful, but WITHOUT ANY WARRANTY; without even the implied) s
5 521 M
(;;; warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.) s
5 508 M
(;;; See the GNU General Public License for more details.) s
5 495 M
(;;; ) s
5 482 M
(;;; You should have received a copy of the GNU General Public License) s
5 469 M
(;;; along with Propagator Network Prototype.  If not, see) s
5 456 M
(;;; <http://www.gnu.org/licenses/>.) s
5 443 M
(;;; ----------------------------------------------------------------------) s
5 417 M
(\(declare \(usual-integrations make-cell cell?\)\)) s
5 391 M
(;;;; Propagators) s
5 365 M
(;;; A propagator is represented as a Scheme thunk that does that) s
5 352 M
(;;; propagator's job every time the scheduler invokes it.  The thunk) s
5 339 M
(;;; presumably reads the contents of some cells when doing its job;) s
5 326 M
(;;; the system needs to know what those cells are, so that it can wake) s
5 313 M
(;;; the propagator up if the contents of those cells change.  The) s
5 300 M
(;;; thunk also presumably writes to cells \(though it can also create) s
5 287 M
(;;; more network structure if needed\), but the system doesn't need to) s
5 274 M
(;;; know anything about that.) s
5 248 M
(\(define \(propagator neighbors to-do\)  ) s
5 235 M
(  \(for-each \(lambda \(cell\)) s
5 222 M
(              \(new-neighbor! cell to-do\)\)) s
5 209 M
(            \(listify neighbors\)\)) s
5 196 M
(  \(eq-put! to-do 'propagator #t\)) s
5 183 M
(  \(alert-propagator to-do\)) s
5 170 M
(  to-do\)) s
5 144 M
(\(define \(propagator? thing\)) s
5 131 M
(  \(eq-get thing 'propagator\)\)) s
_R
S
%%Page: (2) 32
%%BeginPageSetup
_S
18 36 translate
/pagenum 2 def
/fname (core/propagators.scm) def
/fdir (core/) def
/ftail (propagators.scm) def
% User defined strings:
/fmodstr (Wed Apr 27 20:17:01 2011) def
/pagenumstr (2) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 677 M
(;;;; Propagator constructors) s
5 651 M
(;;; A propagator constructor is a Scheme procedure that can attach) s
5 638 M
(;;; some network structure to supplied cells.  These are used during) s
5 625 M
(;;; the build portion of the read-build-run propagator execution) s
5 612 M
(;;; model.  To allow for infinite \(to wit, dynamically expandable\)) s
5 599 M
(;;; networks, run and build can be interleaved.) s
5 573 M
(\(define \(propagator-constructor? thing\)) s
5 560 M
(  \(or \(eq-get thing 'propagator-constructor\)) s
5 547 M
(      ;; TODO This is such a hack!  I probably should not represent) s
5 534 M
(      ;; propagator constructors quite this directly as Scheme) s
5 521 M
(      ;; procedures...) s
5 508 M
(      \(and \(not \(eq-get thing 'not-propagator-constructor\)\)) s
5 495 M
(           \(procedure? thing\)) s
5 482 M
(           \(not \(cell? thing\)\)) s
5 469 M
(           \(not \(propagator? thing\)\)) s
5 456 M
(           \(not \(closure? thing\)\) ; TODO Forward reference :\() s
5 443 M
(           \(warn "Imputing propagator-constructor-hood" thing\)) s
5 430 M
(           #t\)\)\)) s
5 404 M
(\(define \(propagator-constructor! thing\)) s
5 391 M
(  \(eq-put! thing 'propagator-constructor #t\)) s
5 378 M
(  thing\)) s
5 352 M
(;;; Returns a propagator constructor that builds single propagators) s
5 339 M
(;;; that execute the supplied Scheme function.) s
5 326 M
(#;) s
5 313 M
( \(define \(function->propagator-constructor f\)) s
5 300 M
(   \(lambda cells) s
5 287 M
(     \(let \(\(output \(ensure-cell \(car \(last-pair cells\)\)\)\)) s
5 274 M
(           \(inputs \(map ensure-cell \(except-last-pair cells\)\)\)\)) s
5 261 M
(       \(propagator inputs                ; The output isn't a neighbor!) s
5 248 M
(         \(lambda \(\)) s
5 235 M
(           \(add-content output) s
5 222 M
(             \(apply f \(map content inputs\)\)\)\)\)\)\)\)) s
5 196 M
(;;; This version has additional metadata to allow the propagator) s
5 183 M
(;;; network to be effectively traversed \(see extensions/draw.scm\)) s
5 157 M
(\(define \(function->propagator-constructor f\)) s
5 144 M
(  \(let \(\(n \(name f\)\)\)) s
5 131 M
(    \(define \(the-constructor . cells\)) s
5 118 M
(      \(let \(\(output \(ensure-cell \(last cells\)\)\)) s
5 105 M
(            \(inputs \(map ensure-cell \(except-last-pair cells\)\)\)) s
5 92 M
(            \(the-diagram #f\)\)) s
5 79 M
(        \(define \(the-propagator\)) s
5 66 M
(          \(fluid-let \(\(*active-diagram* the-diagram\)\)) s
5 53 M
(            \(add-content output) s
5 40 M
(                         \(apply f \(map content inputs\)\)) s
5 27 M
(                         the-propagator\)\)\)) s
5 14 M
(        \(name! the-propagator \(if \(symbol? n\)) s
_R
S
%%Page: (3) 33
%%BeginPageSetup
_S
18 36 translate
/pagenum 3 def
/fname (core/propagators.scm) def
/fdir (core/) def
/ftail (propagators.scm) def
% User defined strings:
/fmodstr (Wed Apr 27 20:17:01 2011) def
/pagenumstr (3) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 690 M
(                                  \(symbol n ':p\)) s
5 677 M
(                                  f\)\)) s
5 664 M
(        \(propagator inputs the-propagator\)) s
5 651 M
(        \(set! the-diagram \(make-anonymous-i/o-diagram) s
5 638 M
(                           the-propagator inputs \(list output\)\)\)) s
5 625 M
(        \(register-diagram the-diagram\)\)\)) s
5 612 M
(    \(if \(symbol? n\) \(name! the-constructor \(symbol 'p: n\)\)\)) s
5 599 M
(    \(propagator-constructor! the-constructor\)\)\)) s
_R
S
%%Page: (4) 34
%%BeginPageSetup
_S
18 36 translate
/pagenum 4 def
/fname (core/propagators.scm) def
/fdir (core/) def
/ftail (propagators.scm) def
% User defined strings:
/fmodstr (Wed Apr 27 20:17:01 2011) def
/pagenumstr (4) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 677 M
(;;; Returns a version of the supplied propagator constructor that) s
5 664 M
(;;; creates a propagator that will wait until at least one of the) s
5 651 M
(;;; boundary cells has a non-nothing content and then perform the) s
5 638 M
(;;; indicated construction once.) s
5 625 M
(\(define \(delayed-propagator-constructor prop-ctor\)) s
5 612 M
(  \(eq-clone! prop-ctor) s
5 599 M
(   \(lambda args) s
5 586 M
(     ;; TODO Can I autodetect "inputs" that should not trigger) s
5 573 M
(     ;; construction?) s
5 560 M
(     \(let \(\(args \(map ensure-cell args\)\)) s
5 547 M
(           \(answer-diagram #f\)\)) s
5 534 M
(       \(define the-propagator) s
5 521 M
(         \(one-shot-propagator) s
5 508 M
(          args) s
5 495 M
(          \(lambda \(\)) s
5 482 M
(            \(fluid-let \(\(register-diagram) s
5 469 M
(                         \(lambda \(diagram #!optional name\)) s
5 456 M
(                           \(replace-diagram! answer-diagram diagram\)) s
5 443 M
(                           diagram\)\)\)) s
5 430 M
(              \(apply prop-ctor args\)\)\)\)\)) s
5 417 M
(       ;; This is the analogue of \(compute-aggregate-metadata) s
5 404 M
(       ;; prop-ctor args\) TODO much work can be saved by use of the) s
5 391 M
(       ;; diagram made by MAKE-COMPOUND-DIAGRAM.) s
5 378 M
(       \(set! answer-diagram) s
5 365 M
(             \(make-diagram-for-compound-constructor) s
5 352 M
(              the-propagator prop-ctor args\)\)) s
5 339 M
(       \(register-diagram answer-diagram\)\)\)\)\)) s
5 313 M
(;; This is a peer of PROPAGATOR) s
5 300 M
(\(define \(one-shot-propagator neighbors action\)) s
5 287 M
(  \(let \(\(done? #f\) \(neighbors \(map ensure-cell \(listify neighbors\)\)\)\)) s
5 274 M
(    \(define \(test\)) s
5 261 M
(      \(if done?) s
5 248 M
(          'ok) s
5 235 M
(          \(if \(every nothing? \(map content neighbors\)\)) s
5 222 M
(              'ok) s
5 209 M
(              \(begin \(set! done? #t\)) s
5 196 M
(                     \(action\)\)\)\)\)) s
5 183 M
(    \(propagator neighbors test\)\)\)) s
_R
S
%%Page: (1) 35
%%BeginPageSetup
_S
18 36 translate
/pagenum 1 def
/fname (core/application.scm) def
/fdir (core/) def
/ftail (application.scm) def
% User defined strings:
/fmodstr (Wed Nov 02 17:05:24 2011) def
/pagenumstr (1) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 690 M
(;;; ----------------------------------------------------------------------) s
5 677 M
(;;; Copyright 2010 Alexey Radul.) s
5 664 M
(;;; ----------------------------------------------------------------------) s
5 651 M
(;;; This file is part of Propagator Network Prototype.) s
5 638 M
(;;; ) s
5 625 M
(;;; Propagator Network Prototype is free software; you can) s
5 612 M
(;;; redistribute it and/or modify it under the terms of the GNU) s
5 599 M
(;;; General Public License as published by the Free Software) s
5 586 M
(;;; Foundation, either version 3 of the License, or \(at your option\)) s
5 573 M
(;;; any later version.) s
5 560 M
(;;; ) s
5 547 M
(;;; Propagator Network Prototype is distributed in the hope that it) s
5 534 M
(;;; will be useful, but WITHOUT ANY WARRANTY; without even the implied) s
5 521 M
(;;; warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.) s
5 508 M
(;;; See the GNU General Public License for more details.) s
5 495 M
(;;; ) s
5 482 M
(;;; You should have received a copy of the GNU General Public License) s
5 469 M
(;;; along with Propagator Network Prototype.  If not, see) s
5 456 M
(;;; <http://www.gnu.org/licenses/>.) s
5 443 M
(;;; ----------------------------------------------------------------------) s
5 417 M
(\(declare \(usual-integrations make-cell cell?\)\)) s
5 391 M
(;;;; Applying the contents of cells) s
5 365 M
(;;; APPLICATION is to the propagator world what APPLY is to Scheme.) s
5 339 M
(;;; Just as putting a Scheme variable into operator position produces) s
5 326 M
(;;; a call to APPLY, putting a cell into operator position produces a) s
5 313 M
(;;; call to APPLICATION.  APPLICATION is a distinguished propagator) s
5 300 M
(;;; constructor that collects a propagator constructor from a cell) s
5 287 M
(;;; and invokes it on argument cells.) s
5 261 M
(;;; The propagator constructors found in cells may either be) s
5 248 M
(;;; primitive, as defined for example by) s
5 235 M
(;;; FUNCTION->PROPAGATOR-CONSTRUCTOR, or may be closures, per the) s
5 222 M
(;;; closure data structure in physical-closures.scm.  That distinction) s
5 209 M
(;;; is the same as the distinction between primitive and compound) s
5 196 M
(;;; Scheme procedures.) s
5 170 M
(;;; The important thing for APPLICATION to deal with, which is new to) s
5 157 M
(;;; the propagator world and is not found in Scheme, is the fact that) s
5 144 M
(;;; the available information about the propagator constructor being) s
5 131 M
(;;; applied may be partial; and that the propagator created by) s
5 118 M
(;;; APPLICATION needs to be properly idempotent, because it may be) s
5 105 M
(;;; called multiple times as that partial information is refined.) s
5 92 M
(;;; This is done by making the transfer of information across the call) s
5 79 M
(;;; boundary conditional on the propagator constructor being applied,) s
5 66 M
(;;; with the effect that both the arguments and the return values) s
5 53 M
(;;; inherit any partialness of that particular propagator constructor.) s
_R
S
%%Page: (2) 36
%%BeginPageSetup
_S
18 36 translate
/pagenum 2 def
/fname (core/application.scm) def
/fdir (core/) def
/ftail (application.scm) def
% User defined strings:
/fmodstr (Wed Nov 02 17:05:24 2011) def
/pagenumstr (2) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 677 M
(;;; APPLICATION is the locus of a nontrivial optimization: if the cell) s
5 664 M
(;;; containing the object to be applied is fully determined at network) s
5 651 M
(;;; construction time, the appropriate propagator can be extracted) s
5 638 M
(;;; therefrom and attached immediately, without creating an additional) s
5 625 M
(;;; propagator whose only job would be to pull it out and apply it.) s
5 599 M
(;;; There is also a linguistic matter that APPLICATION needs to deal) s
5 586 M
(;;; with, that doesn't happen in Scheme.  This matter is the) s
5 573 M
(;;; distinction between diagram-style and expression-style propagator) s
5 560 M
(;;; constructors:) s
5 534 M
(;;; The most general propagator notation supplies all the input and) s
5 521 M
(;;; output cells to the desired propagator constructor explicitly:) s
5 508 M
(;;;   \(p:+ x y subtotal\)) s
5 495 M
(;;;   \(p:+ subtotal z total\)) s
5 482 M
(;;; This "diagram style" notation is very flexible, because it) s
5 469 M
(;;; allows easy handling of multiple propagators writing to the same) s
5 456 M
(;;; cells, propagators having multiple output cells, having cells that) s
5 443 M
(;;; are ambiguous as to input vs output, etc.) s
5 417 M
(;;; A nested expression notation can be very convenient for simple) s
5 404 M
(;;; cases, however, because it allows the outputs of one propagator to) s
5 391 M
(;;; be piped directly into the inputs to another, without even naming) s
5 378 M
(;;; the intermediate value:) s
5 365 M
(;;;   \(e:+ \(e:+ x y\) z\)) s
5 339 M
(;;; APPLICATION comes in the user-callable flavors d@ and e@, which) s
5 326 M
(;;; force diagram-style or expression-style application, respectively.) s
5 313 M
(;;; The native APPLICATION will respect the preferred style of the) s
5 300 M
(;;; propagator being applied if that propagator is completely) s
5 287 M
(;;; determined at network-construction time; otherwise it defaults to) s
5 274 M
(;;; diagram-style.) s
5 248 M
(\(define \(application object . arg-cells\)) s
5 235 M
(  \(try-eager-application object) s
5 222 M
(   \(lambda \(object\)) s
5 209 M
(     \(if \(prefers-diagram-style? object\)) s
5 196 M
(         \(eager-diagram-apply object arg-cells\)) s
5 183 M
(         \(eager-expression-apply object arg-cells\)\)\)) s
5 170 M
(   \(lambda \(cell\)) s
5 157 M
(     \(general-propagator-apply cell arg-cells\)\)\)\)) s
_R
S
%%Page: (3) 37
%%BeginPageSetup
_S
18 36 translate
/pagenum 3 def
/fname (core/application.scm) def
/fdir (core/) def
/ftail (application.scm) def
% User defined strings:
/fmodstr (Wed Nov 02 17:05:24 2011) def
/pagenumstr (3) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 677 M
(;;; General application) s
5 651 M
(\(define \(general-propagator-apply prop-cell arg-cells\)) s
5 638 M
(  \(define done-props '\(\)\)) s
5 625 M
(  \(define \(done? prop\)) s
5 612 M
(    \(member prop done-props equivalent-closures?\)\)) s
5 599 M
(  \(define \(arg-copier pass?\)) s
5 586 M
(    \(lambda \(arg\)) s
5 573 M
(      \(let-cell arg-copy) s
5 560 M
(        \(conditional-wire pass? \(ensure-cell arg\) arg-copy\)) s
5 547 M
(        arg-copy\)\)\)) s
5 534 M
(  ;; This assumes that closures are "carrying cells" compound) s
5 521 M
(  ;; structures rather than "copying data".) s
5 508 M
(  \(define \(apply-diagram-style prop pass? arg-cells\)) s
5 495 M
(    \(do-apply-prop prop \(map \(arg-copier pass?\) arg-cells\)\)\)) s
5 482 M
(  \(define \(apply-expression-style prop pass? arg-cells\)) s
5 469 M
(    \(let \(\(input-cells \(except-last-pair arg-cells\)\)) s
5 456 M
(          \(output-cell \(car \(last-pair arg-cells\)\)\)\)) s
5 443 M
(      \(conditional-wire pass? output-cell) s
5 430 M
(        \(ensure-cell) s
5 417 M
(         \(do-apply-prop) s
5 404 M
(          prop \(map \(arg-copier pass?\) input-cells\)\)\)\)\)\)) s
5 391 M
(  \(define \(attach prop\)) s
5 378 M
(    \(set! done-props \(cons prop done-props\)\)) s
5 365 M
(    \(let-cells \(pass? key\)) s
5 352 M
(      \(add-content key prop\)) s
5 339 M
(      \(p:equivalent-closures? prop-cell key pass?\)) s
5 326 M
(      \(if \(diagram-style? prop\)) s
5 313 M
(          \(apply-diagram-style prop pass? arg-cells\)) s
5 300 M
(          \(apply-expression-style prop pass? arg-cells\)\)) s
5 287 M
(      unspecific\)\)) s
5 274 M
(  \(let \(\(the-propagator) s
5 261 M
(         \(lambda \(\)) s
5 248 M
(           \(\(unary-mapping) s
5 235 M
(             \(lambda \(prop\)) s
5 222 M
(               \(if \(done? prop\)) s
5 209 M
(                   unspecific) s
5 196 M
(                   \(attach prop\)\)\)\)) s
5 183 M
(            \(content prop-cell\)\)\)\)\)) s
5 170 M
(    \(name! the-propagator 'application\)) s
5 157 M
(    \(propagator prop-cell the-propagator\)) s
5 144 M
(    \(register-diagram) s
5 131 M
(     \(make-anonymous-i/o-diagram) s
5 118 M
(      the-propagator \(list prop-cell\) arg-cells\)\)\)\)) s
_R
S
%%Page: (4) 38
%%BeginPageSetup
_S
18 36 translate
/pagenum 4 def
/fname (core/application.scm) def
/fdir (core/) def
/ftail (application.scm) def
% User defined strings:
/fmodstr (Wed Nov 02 17:05:24 2011) def
/pagenumstr (4) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 677 M
(;;; Eager application of objects that are fully known at network) s
5 664 M
(;;; construction time.) s
5 638 M
(\(define \(eager-diagram-apply prop arg-cells\)) s
5 625 M
(  \(if \(diagram-style? prop\)) s
5 612 M
(      \(do-apply-prop prop arg-cells\)) s
5 599 M
(      \(handle-explicit-output arg-cells) s
5 586 M
(        \(lambda \(inputs\)) s
5 573 M
(          \(do-apply-prop prop inputs\)\)\)\)\)) s
5 547 M
(\(define \(eager-expression-apply prop arg-cells\)) s
5 534 M
(  \(if \(diagram-style? prop\)) s
5 521 M
(      \(handle-implicit-cells arg-cells) s
5 508 M
(        \(lambda \(boundary\)) s
5 495 M
(          \(do-apply-prop prop boundary\)\)\)) s
5 482 M
(      \(if \(any implicit-cell? arg-cells\)) s
5 469 M
(          \(handle-implicit-cells arg-cells) s
5 456 M
(            \(lambda \(boundary\)) s
5 443 M
(              \(handle-explicit-output boundary) s
5 430 M
(                \(lambda \(inputs\)) s
5 417 M
(                  \(do-apply-prop prop inputs\)\)\)\)\)) s
5 404 M
(          \(do-apply-prop prop arg-cells\)\)\)\)) s
5 378 M
(\(define \(directly-applicable? thing\)) s
5 365 M
(  \(or \(closure? thing\)) s
5 352 M
(      \(propagator-constructor? thing\)\)\)) s
5 326 M
(\(define \(try-eager-application object direct-apply general-apply\)) s
5 313 M
(  \(if \(cell? object\)) s
5 300 M
(      \(if \(directly-applicable? \(content object\)\)) s
5 287 M
(          \(direct-apply \(content object\)\)) s
5 274 M
(          \(general-apply object\)\)) s
5 261 M
(      \(if \(directly-applicable? object\)) s
5 248 M
(          \(direct-apply object\)) s
5 235 M
(          \(general-apply \(ensure-cell object\)\)\)\)\)) s
_R
S
%%Page: (5) 39
%%BeginPageSetup
_S
18 36 translate
/pagenum 5 def
/fname (core/application.scm) def
/fdir (core/) def
/ftail (application.scm) def
% User defined strings:
/fmodstr (Wed Nov 02 17:05:24 2011) def
/pagenumstr (5) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 677 M
(;;; Massaging boundary shapes) s
5 651 M
(;;; Propagators can be defined either in diagram style \(with explicit) s
5 638 M
(;;; cells for their entire boundary\) or in expression style \(where the) s
5 625 M
(;;; body of the propagator is expected to return one additional cell,) s
5 612 M
(;;; which is in the boundary implicitly\).  Propagators can also be) s
5 599 M
(;;; applied in diagram style or in expression style.  So a mismatch) s
5 586 M
(;;; can occur if a propagator is defined one way and applied the other) s
5 573 M
(;;; way.  The procedure HANDLE-EXPLICIT-OUTPUT applies a diagram-style) s
5 560 M
(;;; application to a procedure that expects to be applied in) s
5 547 M
(;;; expression style, and the procedure HANDLE-IMPLICIT-CELLS applies) s
5 534 M
(;;; an expression-style application to a procedure that expects to be) s
5 521 M
(;;; applied in diagram style.  HANDLE-IMPLICIT-CELLS is hairy because) s
5 508 M
(;;; expression-style applications support the %% syntax for selecting) s
5 495 M
(;;; the position of the implicit cell in the supplied argument list,) s
5 482 M
(;;; and because I felt like having it support expression-style) s
5 469 M
(;;; applications that want to return multiple implicit cells.) s
5 443 M
(\(define \(handle-explicit-output boundary proc\)) s
5 430 M
(  \(c:== \(car \(last-pair boundary\)\)) s
5 417 M
(        \(proc \(except-last-pair boundary\)\)\)\)) s
5 378 M
(\(define generate-cell-name) s
5 365 M
(  \(let \(\(cell-counter 0\)\)) s
5 352 M
(    \(lambda \(\)) s
5 339 M
(      \(set! cell-counter \(+ cell-counter 1\)\)) s
5 326 M
(      \(symbol 'cell cell-counter\)\)\)\)) s
5 313 M
(  ) s
5 287 M
(\(define \(handle-implicit-cells inputs proc #!optional num-outputs\)) s
5 274 M
(  \(if \(default-object? num-outputs\)) s
5 261 M
(      \(set! num-outputs 1\)\)) s
5 248 M
(  \(define \(manufacture-cell\)) s
5 235 M
(    \(eq-put! \(make-named-cell \(generate-cell-name\)\) 'subexprs inputs\)\)) s
5 222 M
(  \(define outputs \(map \(lambda \(k\) \(manufacture-cell\)\)) s
5 209 M
(                       \(iota num-outputs\)\)\)) s
5 196 M
(  \(define true-inputs) s
5 183 M
(    \(let loop \(\(inputs inputs\)) s
5 170 M
(               \(outputs outputs\)\)) s
5 157 M
(      \(cond \(\(null? inputs\)) s
5 144 M
(             outputs\)) s
5 131 M
(            \(\(implicit-cell? \(car inputs\)\)) s
5 118 M
(             \(if \(null? outputs\)) s
5 105 M
(                 \(error "Too many implicit cells" inputs\)) s
5 92 M
(                 \(cons \(car outputs\)) s
5 79 M
(                       \(loop \(cdr inputs\) \(cdr outputs\)\)\)\)\)) s
5 66 M
(            \(else) s
5 53 M
(             \(cons \(car inputs\) \(loop \(cdr inputs\) outputs\)\)\)\)\)\)) s
5 40 M
(  \(proc \(map ensure-cell true-inputs\)\)) s
5 27 M
(  \(if \(= 1 \(length outputs\)\)) s
5 14 M
(      \(car outputs\)) s
_R
S
%%Page: (6) 40
%%BeginPageSetup
_S
18 36 translate
/pagenum 6 def
/fname (core/application.scm) def
/fdir (core/) def
/ftail (application.scm) def
% User defined strings:
/fmodstr (Wed Nov 02 17:05:24 2011) def
/pagenumstr (6) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 690 M
(      \(apply values outputs\)\)\)) s
5 664 M
(\(define %% \(list 'the-implicit-cell\)\)) s
5 651 M
(\(define \(implicit-cell? thing\)) s
5 638 M
(  \(eq? thing %%\)\)) s
5 625 M
(\(name! %% '%%\)) s
_R
S
%%Page: (7) 41
%%BeginPageSetup
_S
18 36 translate
/pagenum 7 def
/fname (core/application.scm) def
/fdir (core/) def
/ftail (application.scm) def
% User defined strings:
/fmodstr (Wed Nov 02 17:05:24 2011) def
/pagenumstr (7) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 677 M
(;;; User-facing frontend for forcing application style) s
5 651 M
(\(define \(p:application object . arg-cells\)) s
5 638 M
(  \(try-eager-application object) s
5 625 M
(   \(lambda \(object\)) s
5 612 M
(     \(eager-diagram-apply object arg-cells\)\)) s
5 599 M
(   \(lambda \(cell\)) s
5 586 M
(     \(general-propagator-apply cell arg-cells\)\)\)\)) s
5 560 M
(\(define \(functionalize propagator #!optional num-outputs\)) s
5 547 M
(  \(propagator-constructor!) s
5 534 M
(   \(eq-label!) s
5 521 M
(    \(lambda inputs) s
5 508 M
(      \(handle-implicit-cells inputs) s
5 495 M
(        \(lambda \(boundary\)) s
5 482 M
(          \(apply propagator boundary\)\)) s
5 469 M
(        num-outputs\)\)) s
5 456 M
(    'expression-style #t) s
5 443 M
(    'preferred-style 'expression\)\)\)) s
5 417 M
(\(define e:application \(functionalize p:application\)\)) s
5 404 M
(\(define d@ p:application\)) s
5 391 M
(\(define @d d@\)) s
5 378 M
(\(define e@ e:application\)) s
5 365 M
(\(define @e e@\)) s
5 339 M
(;;; Guts of applying things) s
5 313 M
(\(define \(do-apply-prop prop real-args\)) s
5 300 M
(  \(let \(\(real-args \(map ensure-cell real-args\)\)\)) s
5 287 M
(    \(cond \(\(closure? prop\)) s
5 274 M
(           \(\(if \(diagram-style? prop\)) s
5 261 M
(                diagram-style-with-diagram) s
5 248 M
(                expression-style-with-diagram\)) s
5 235 M
(            \(empty-diagram-cell prop\)) s
5 222 M
(            \(lambda \(\)) s
5 209 M
(              \(apply \(closure-code prop\) real-args\)\)\)\)) s
5 196 M
(          \(\(propagator-constructor? prop\)) s
5 183 M
(           \(apply prop real-args\)\)) s
5 170 M
(          \(else \(error "Not an applicable propagator" thing\)\)\)\)\)) s
5 144 M
(\(define \(diagram-style-with-diagram target-diagram-cell thunk\)) s
5 131 M
(  \(let \(\(explicit-diagram #f\)) s
5 118 M
(        \(target-diagram-cell) s
5 105 M
(         \(fluid-let \(\(register-diagram \(diagram-inserter *metadiagram*\)\)\)) s
5 92 M
(           \(ensure-cell target-diagram-cell\)\)\)\)) s
5 79 M
(    \(register-diagram) s
5 66 M
(     \(fluid-let) s
5 53 M
(         \(\(register-diagram \(diagram-cell-inserter target-diagram-cell\)\)) s
5 40 M
(          \(diagram) s
5 27 M
(           \(lambda args) s
5 14 M
(             \(let \(\(answer \(apply make-compound-diagram args\)\)\)) s
_R
S
%%Page: (8) 42
%%BeginPageSetup
_S
18 36 translate
/pagenum 8 def
/fname (core/application.scm) def
/fdir (core/) def
/ftail (application.scm) def
% User defined strings:
/fmodstr (Wed Nov 02 17:05:24 2011) def
/pagenumstr (8) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 690 M
(               \(set! explicit-diagram answer\)) s
5 677 M
(               answer\)\)\)\)) s
5 664 M
(       \(thunk\)) s
5 651 M
(       \(or explicit-diagram) s
5 638 M
(           ;; But the content hasn't updated yet!) s
5 625 M
(           \(compute-derived-promises! \(content target-diagram-cell\)\)\)\)\)\)\)) s
5 599 M
(#|) s
5 586 M
(\(define \(expression-style-with-diagram target-diagram-cell thunk\)) s
5 573 M
(  \(let \(\(target-diagram-cell) s
5 560 M
(         \(let \(\(register-diagram \(diagram-inserter *metadiagram*\)\)\)) s
5 547 M
(           \(ensure-cell target-diagram-cell\)\)\)\)) s
5 534 M
(    \(fluid-let) s
5 521 M
(        \(\(register-diagram \(diagram-cell-inserter target-diagram-cell\)\)\)) s
5 508 M
(      \(let \(\(answer \(thunk\)\)\)) s
5 495 M
(        \(register-diagram) s
5 482 M
(         \(compute-derived-promises! \(content target-diagram-cell\)\)\)) s
5 469 M
(        answer\)\)\)\)) s
5 456 M
(|#) s
5 430 M
(;;; Previous version led to circular structure.) s
5 404 M
(\(define \(expression-style-with-diagram target-diagram-cell thunk\)) s
5 391 M
(  \(let \(\(target-diagram-cell) s
5 378 M
(         \(fluid-let \(\(register-diagram \(diagram-inserter *metadiagram*\)\)\)) s
5 365 M
(           \(ensure-cell target-diagram-cell\)\)\)\)) s
5 352 M
(    \(let \(\(answer ) s
5 339 M
(           \(fluid-let) s
5 326 M
(               \(\(register-diagram \(diagram-cell-inserter target-diagram-cell\)\)) s
5 313 M
(\)) s
5 300 M
(             \(let \(\(answer \(thunk\)\)\)) s
5 287 M
(               ;; But the content hasn't updated yet!) s
5 274 M
(               \(compute-derived-promises! \(content target-diagram-cell\)\)) s
5 261 M
(               answer\)\)\)\)) s
5 248 M
(      \(register-diagram \(content target-diagram-cell\)\)) s
5 235 M
(      answer\)\)\)) s
5 196 M
(\(define \(diagram-style? thing\)) s
5 183 M
(  \(cond \(\(closure? thing\)) s
5 170 M
(         \(closure-diagram-style? thing\)\)) s
5 157 M
(        \(\(propagator-constructor? thing\)) s
5 144 M
(         \(not \(eq-get thing 'expression-style\)\)\)) s
5 131 M
(        \(else \(error "Propagator style question not applicable" thing\)\)\)\)) s
_R
S
%%Page: (9) 43
%%BeginPageSetup
_S
18 36 translate
/pagenum 9 def
/fname (core/application.scm) def
/fdir (core/) def
/ftail (application.scm) def
% User defined strings:
/fmodstr (Wed Nov 02 17:05:24 2011) def
/pagenumstr (9) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 677 M
(;;; Preferred application styles) s
5 651 M
(\(define \(prefers-diagram-style? thing\)) s
5 638 M
(  \(let \(\(preference-tag \(eq-get thing 'preferred-style\)\)\)) s
5 625 M
(    \(cond \(preference-tag) s
5 612 M
(           \(not \(eq? preference-tag 'expression\)\)\)) s
5 599 M
(          \(\(closure? thing\)) s
5 586 M
(           \(closure-diagram-style? thing\)\)) s
5 573 M
(          \(else #t\)\)\)\)) s
5 547 M
(\(define \(\(tag-preferred-style style\) thing\)) s
5 534 M
(  \(cond \(\(cell? thing\)) s
5 521 M
(         \(let \(\(answer \(make-cell\)\)\)) s
5 508 M
(           \(eq-clone! thing answer\)) s
5 495 M
(           \(add-content answer \(\(tag-preferred-style style\) \(content thing\)\)\)) s
5 482 M
(           answer\)\)) s
5 469 M
(        \(\(propagator-constructor? thing\)) s
5 456 M
(         \(let \(\(answer \(lambda args \(apply thing args\)\)\)\)) s
5 443 M
(           \(eq-clone! thing answer\)) s
5 430 M
(           \(eq-put! answer 'preferred-style style\)) s
5 417 M
(           answer\)\)) s
5 404 M
(        \(\(closure? thing\)) s
5 391 M
(         \(eq-put! \(closure-copy thing\) 'preferred-style style\)\)) s
5 378 M
(        \(else ) s
5 365 M
(         \(warn "Ignoring" thing\)) s
5 352 M
(         thing\)\)\)) s
5 326 M
(\(define \(diagram-style-variant thing\)) s
5 313 M
(  \(ensure-cell \(\(tag-preferred-style 'diagram\) thing\)\)\)) s
5 287 M
(\(define \(expression-style-variant thing\)) s
5 274 M
(  \(ensure-cell \(\(tag-preferred-style 'expression\) thing\)\)\)) s
_R
S
%%Page: (-) 44
S
%%Page: (1) 45
%%BeginPageSetup
_S
18 36 translate
/pagenum 1 def
/fname (core/sugar.scm) def
/fdir (core/) def
/ftail (sugar.scm) def
% User defined strings:
/fmodstr (Mon Oct 31 16:19:45 2011) def
/pagenumstr (1) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 690 M
(;;; ----------------------------------------------------------------------) s
5 677 M
(;;; Copyright 2009 Massachusetts Institute of Technology.) s
5 664 M
(;;; ----------------------------------------------------------------------) s
5 651 M
(;;; This file is part of Propagator Network Prototype.) s
5 638 M
(;;; ) s
5 625 M
(;;; Propagator Network Prototype is free software; you can) s
5 612 M
(;;; redistribute it and/or modify it under the terms of the GNU) s
5 599 M
(;;; General Public License as published by the Free Software) s
5 586 M
(;;; Foundation, either version 3 of the License, or \(at your option\)) s
5 573 M
(;;; any later version.) s
5 560 M
(;;; ) s
5 547 M
(;;; Propagator Network Prototype is distributed in the hope that it) s
5 534 M
(;;; will be useful, but WITHOUT ANY WARRANTY; without even the implied) s
5 521 M
(;;; warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.) s
5 508 M
(;;; See the GNU General Public License for more details.) s
5 495 M
(;;; ) s
5 482 M
(;;; You should have received a copy of the GNU General Public License) s
5 469 M
(;;; along with Propagator Network Prototype.  If not, see) s
5 456 M
(;;; <http://www.gnu.org/licenses/>.) s
5 443 M
(;;; ----------------------------------------------------------------------) s
5 417 M
(\(declare \(usual-integrations make-cell cell?\)\)) s
5 391 M
(;;;; Carcinogens for the semicolon part 2: Defining propagators) s
5 365 M
(;;; Here be macros that provide syntactic sugar for playing with the) s
5 352 M
(;;; propagator language as embedded in Scheme.  Syntactic regularities) s
5 339 M
(;;; in patterns of definition of propagator constructors are captured.) s
5 313 M
(;;;; Paired propagator definitions) s
5 287 M
(;;; Propagator objects are usually defined in pairs, one preferring to) s
5 274 M
(;;; be applied diagram-style, and one preferring to be applied) s
5 261 M
(;;; expression-style.  These two macros define such pairs of) s
5 248 M
(;;; propagator objects, with the given names.  Said names are) s
5 235 M
(;;; presumably computed by PROPAGATOR-NAMING-CONVENTION, below) s
5 209 M
(\(define-syntax define-by-diagram-variant) s
5 196 M
(  \(syntax-rules \(\)) s
5 183 M
(    \(\(define-by-diagram-variant \(diagram-name expression-name\) form\)) s
5 170 M
(     \(begin) s
5 157 M
(       \(define-cell diagram-name form\)) s
5 144 M
(       \(define-cell expression-name) s
5 131 M
(         \(expression-style-variant diagram-name\)\)\)\)\)\)) s
5 105 M
(\(define-syntax define-by-expression-variant) s
5 92 M
(  \(syntax-rules \(\)) s
5 79 M
(    \(\(define-by-diagram-variant \(diagram-name expression-name\) form\)) s
5 66 M
(     \(begin) s
5 53 M
(       \(define-cell expression-name form\)) s
5 40 M
(       \(define-cell diagram-name) s
5 27 M
(         \(diagram-style-variant expression-name\)\)\)\)\)\)) s
_R
S
%%Page: (2) 46
%%BeginPageSetup
_S
18 36 translate
/pagenum 2 def
/fname (core/sugar.scm) def
/fdir (core/) def
/ftail (sugar.scm) def
% User defined strings:
/fmodstr (Mon Oct 31 16:19:45 2011) def
/pagenumstr (2) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 677 M
(;;;; Propagator naming convention) s
5 651 M
(;;; The naming convention is:) s
5 638 M
(;;;   p:foo   the propagator version of foo) s
5 625 M
(;;;   e:foo   the expression-style variant of p:foo) s
5 612 M
(;;;   c:foo   the constraint-propagator version of foo) s
5 599 M
(;;;   ce:foo  the expression-style variant of c:foo) s
5 573 M
(;;; For convenience, this convention includes constraint-propagator) s
5 560 M
(;;; versions of the various propagators.  The procedure) s
5 547 M
(;;; PROPAGATOR-NAMING-CONVENTION is a macro-helper; it constructs a) s
5 534 M
(;;; pair of names derived from the given name, one to name the) s
5 521 M
(;;; diagram-style variant and one to name the expression-style) s
5 508 M
(;;; variant.  This is calibrated for use with) s
5 495 M
(;;; DEFINE-BY-DIAGRAM-VARIANT and DEFINE-BY-EXPRESSION-VARIANT, above.) s
5 469 M
(\(define \(propagator-naming-convention name\)) s
5 456 M
(  \(let* \(\(name-string \(symbol->string name\)\)) s
5 443 M
(         \(long-named? \(and \(>= \(string-length name-string\) 3\)) s
5 430 M
(                           \(equal? "ce:" \(substring name-string 0 3\)\)\)\)) s
5 417 M
(         \(propagator-named?) s
5 404 M
(          \(and \(>= \(string-length name-string\) 2\)) s
5 391 M
(               \(or \(equal? "p:" \(substring name-string 0 2\)\)) s
5 378 M
(                   \(equal? "e:" \(substring name-string 0 2\)\)\)\)\)) s
5 365 M
(         \(constraint-named?) s
5 352 M
(          \(and \(>= \(string-length name-string\) 2\)) s
5 339 M
(               \(or \(equal? "c:" \(substring name-string 0 2\)\)) s
5 326 M
(                   long-named?\)\)\)) s
5 313 M
(         \(prefix-length) s
5 300 M
(          \(cond \(long-named? 3\)) s
5 287 M
(                \(\(or constraint-named? propagator-named?\) 2\)) s
5 274 M
(                \(else 0\)\)\)) s
5 261 M
(         \(base-name \(string-tail name-string prefix-length\)\)\)) s
5 248 M
(    \(if constraint-named?) s
5 235 M
(        \(list \(symbol 'c: base-name\)) s
5 222 M
(              \(symbol 'ce: base-name\)\)) s
5 209 M
(        \(list \(symbol 'p: base-name\)) s
5 196 M
(              \(symbol 'e: base-name\)\)\)\)\)) s
_R
S
%%Page: (3) 47
%%BeginPageSetup
_S
18 36 translate
/pagenum 3 def
/fname (core/sugar.scm) def
/fdir (core/) def
/ftail (sugar.scm) def
% User defined strings:
/fmodstr (Mon Oct 31 16:19:45 2011) def
/pagenumstr (3) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 677 M
(;;;; Defining primitive propagators) s
5 651 M
(;;; The PROPAGATIFY macro automates the process of defining extensible) s
5 638 M
(;;; propagators whose basic operations are Scheme procedures.) s
5 612 M
(;;; FUNCTION->PROPAGATOR-CONSTRUCTOR turns Scheme procedures into) s
5 599 M
(;;; propagator constructors \(that make primitive propagators\).  In) s
5 586 M
(;;; principle, that's good enough; but two things can be done to make) s
5 573 M
(;;; the resulting propagator easier to extend to different partial) s
5 560 M
(;;; information structures.  First, a generic operation can be defined) s
5 547 M
(;;; and second, the nary-mapping wrapper from generic-definitions.scm) s
5 534 M
(;;; can be applied.  Finally, to complete the definition, an) s
5 521 M
(;;; expression version of the propagator constructor is usually) s
5 508 M
(;;; defined.  PROPAGATIFY does these things:) s
5 495 M
(;;;   \(propagatify +\)) s
5 482 M
(;;; is equivalent to) s
5 469 M
(;;;   \(define generic-+ \(make-generic-operator 2 '+ +\)\)) s
5 456 M
(;;;   \(define-cell p:+) s
5 443 M
(;;;     \(function->propagator-constructor \(nary-mapping generic-+\)\)\)) s
5 430 M
(;;;   \(define-cell e:+ \(expression-style-variant p:+\)\)) s
5 404 M
(;;; Note that the generic machinery needs to know the arity of the) s
5 391 M
(;;; generic operation to define.  PROPAGATIFY will make an educated) s
5 378 M
(;;; guess for what that arity should be, but an explicit second) s
5 365 M
(;;; argument can be supplied to fix the arity.  In addition, if the) s
5 352 M
(;;; second argument is present but is not an arity, PROPAGATIFY will) s
5 339 M
(;;; interpret that as a request not to define the generic procedure at) s
5 326 M
(;;; all.  So) s
5 313 M
(;;;   \(propagatify + 'no-generic\)) s
5 300 M
(;;; would be equivalent to) s
5 287 M
(;;;   \(define-cell p:+ \(function->propagator-constructor \(nary-mapping +\)\)\)) s
5 274 M
(;;;   \(define-cell e:+ \(expression-style-variant p:+\)\)) s
5 248 M
(;;; Finally, sometimes it is appropriate to propagatify a Scheme) s
5 235 M
(;;; procedure directly, without any provision for extensibility.  The) s
5 222 M
(;;; PROPAGATIFY-RAW macro is helpful for this.) s
5 209 M
(;;;   \(propagatify-raw +\)) s
5 196 M
(;;; would be equivalent to) s
5 183 M
(;;;   \(define-cell p:+ \(function->propagator-constructor +\)\)) s
5 170 M
(;;;   \(define-cell e:+ \(expression-style-variant p:+\)) s
5 157 M
(;;; Compare \(propagatify + 'no-generic\).) s
_R
S
%%Page: (4) 48
%%BeginPageSetup
_S
18 36 translate
/pagenum 4 def
/fname (core/sugar.scm) def
/fdir (core/) def
/ftail (sugar.scm) def
% User defined strings:
/fmodstr (Mon Oct 31 16:19:45 2011) def
/pagenumstr (4) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 677 M
(\(define-syntax propagatify-raw) s
5 664 M
(  \(rsc-macro-transformer) s
5 651 M
(   \(lambda \(form defn-env\)) s
5 638 M
(     \(let* \(\(propagatee-name \(cadr form\)\)\)) s
5 625 M
(       `\(define-by-diagram-variant) s
5 612 M
(          ,\(propagator-naming-convention propagatee-name\)) s
5 599 M
(          \(function->propagator-constructor) s
5 586 M
(           \(name! ,propagatee-name ',propagatee-name\)\)\)\)\)\)\)) s
5 560 M
(\(define-syntax propagatify) s
5 547 M
(  \(rsc-macro-transformer) s
5 534 M
(   \(lambda \(form defn-env\)) s
5 521 M
(     \(let* \(\(propagatee-name \(cadr form\)\)) s
5 508 M
(            \(generic-name \(symbol 'generic- propagatee-name\)\)\)) s
5 495 M
(       `\(begin) s
5 482 M
(          \(define ,generic-name) s
5 469 M
(            \(make-arity-detecting-operator) s
5 456 M
(             ',propagatee-name ,propagatee-name ,@\(cddr form\)\)\)) s
5 443 M
(          \(define-by-diagram-variant) s
5 430 M
(            ,\(propagator-naming-convention propagatee-name\)) s
5 417 M
(            \(function->propagator-constructor) s
5 404 M
(             \(nary-mapping ,generic-name\)\)\)\)\)\)\)\)) s
5 378 M
(\(define \(make-arity-detecting-operator) s
5 365 M
(         name default-operation #!optional arity\)) s
5 352 M
(  \(if \(default-object? arity\)) s
5 339 M
(      \(set! arity \(procedure-arity default-operation\)\)\)) s
5 326 M
(  ;; The generic machinery only likes fixed arity operations; assume) s
5 313 M
(  ;; that a fully variadic input operation is really the associative) s
5 300 M
(  ;; version of a binary one, and the binary one will do for) s
5 287 M
(  ;; extensibility.) s
5 274 M
(  \(cond \(\(not \(procedure-arity? arity\)\)) s
5 261 M
(         ;; This allows the user to explictly prevent the construction) s
5 248 M
(         ;; of the generic operation by specifying a bogus arity for) s
5 235 M
(         ;; it.) s
5 222 M
(         default-operation\)) s
5 209 M
(        \(\(eqv? \(procedure-arity-min arity\)) s
5 196 M
(               \(procedure-arity-max arity\)\)) s
5 183 M
(         \(make-generic-operator arity name default-operation\)\)) s
5 170 M
(        \(\(and \(or \(eqv? 0 \(procedure-arity-min arity\)\)) s
5 157 M
(                  \(eqv? 1 \(procedure-arity-min arity\)\)\)) s
5 144 M
(              \(eqv? #f \(procedure-arity-max arity\)\)\)) s
5 131 M
(         \(make-generic-operator 2 name default-operation\)\)) s
5 118 M
(        \(else default-operation\)\)\)) s
_R
S
%%Page: (5) 49
%%BeginPageSetup
_S
18 36 translate
/pagenum 5 def
/fname (core/sugar.scm) def
/fdir (core/) def
/ftail (sugar.scm) def
% User defined strings:
/fmodstr (Mon Oct 31 16:19:45 2011) def
/pagenumstr (5) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 677 M
(;;; This is throwback to days of yore, when I still thought that) s
5 664 M
(;;; monads were a good idea.  This is just like PROPAGATIFY, except) s
5 651 M
(;;; that it wraps the propagatee in NARY-UNPACKING instead of) s
5 638 M
(;;; NARY-MAPPING.) s
5 625 M
(\(define-syntax propagatify-monadic) s
5 612 M
(  \(sc-macro-transformer) s
5 599 M
(   \(lambda \(form use-env\)) s
5 586 M
(     \(let* \(\(propagatee-name \(cadr form\)\)) s
5 573 M
(            \(generic-name \(symbol 'generic- propagatee-name\)\)) s
5 560 M
(            \(propagatee \(close-syntax propagatee-name use-env\)\)\)) s
5 547 M
(       `\(begin) s
5 534 M
(          \(define ,generic-name) s
5 521 M
(            \(make-arity-detecting-operator) s
5 508 M
(             ',propagatee-name ,propagatee ,@\(cddr form\)\)\)) s
5 495 M
(          \(define-by-diagram-variant) s
5 482 M
(            ,\(propagator-naming-convention propagatee-name\)) s
5 469 M
(            \(function->propagator-constructor) s
5 456 M
(             \(nary-unpacking ,generic-name\)\)\)\)\)\)\)\)) s
_R
S
%%Page: (6) 50
%%BeginPageSetup
_S
18 36 translate
/pagenum 6 def
/fname (core/sugar.scm) def
/fdir (core/) def
/ftail (sugar.scm) def
% User defined strings:
/fmodstr (Mon Oct 31 16:19:45 2011) def
/pagenumstr (6) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 677 M
(;;;; Defining "propagator macros") s
5 651 M
(;;; Scheme is the macro language of this embedded propagator system.) s
5 638 M
(;;; Therefore defining "propagator macros" is just a matter of) s
5 625 M
(;;; defining Scheme procedures.  Some patterns are common, however, so) s
5 612 M
(;;; merit a little macro support.) s
5 586 M
(;;; DEFINE-PROPAGATOR-SYNTAX is \(meant to be\) just like define, except) s
5 573 M
(;;; that it wraps the body being defined in a DIAGRAM-STYLE-WITH-DIAGRAM) s
5 560 M
(;;; which is a hook for tagging all cells and propagators created) s
5 547 M
(;;; inside the call with a common identity, which can then be passed) s
5 534 M
(;;; on to the graph drawing tools used to inspect the network.) s
5 521 M
(;;; DEFINE-PROPAGATOR-SYNTAX also assigns the formal parameter names) s
5 508 M
(;;; as names to the incoming arguments.  The latter is most useful in) s
5 495 M
(;;; the regime where all the passed arguments are actually cells \(as) s
5 482 M
(;;; opposed to, say, Scheme-lists of cells\).) s
5 456 M
(\(define-syntax define-propagator-syntax) s
5 443 M
(  \(syntax-rules \(\)) s
5 430 M
(    \(\(define-propagator-syntax \(name arg-form ...\) body-form ...\)) s
5 417 M
(     \(define name) s
5 404 M
(       \(named-propagator-syntax \(name arg-form ...\)) s
5 391 M
(         body-form ...\)\)\)) s
5 378 M
(    ;; N.B. This is the clause that will match dot-notation argument lists) s
5 365 M
(    \(\(define-propagator-syntax name body-form ...\)) s
5 352 M
(     \(define name) s
5 339 M
(       \(expression-style-with-diagram \(empty-diagram-cell 'name\)) s
5 326 M
(         \(lambda \(\)) s
5 313 M
(           body-form ...\)\)\)\)\)\)) s
5 287 M
(;;; This is the "lambda" to define-propagator-syntax's "define".) s
5 274 M
(\(define-syntax named-propagator-syntax) s
5 261 M
(  \(syntax-rules \(\)) s
5 248 M
(    \(\(named-propagator-syntax \(name arg-form ...\) body-form ...\)) s
5 235 M
(     \(propagator-constructor!) s
5 222 M
(      \(named-lambda \(name arg-form ...\)) s
5 209 M
(        \(expression-style-with-diagram \(empty-diagram-cell 'name\)) s
5 196 M
(         \(lambda \(\)) s
5 183 M
(           \(register-diagram arg-form 'arg-form\) ...) s
5 170 M
(           body-form ...\)\)\)\)\)\)\)) s
_R
S
%%Page: (7) 51
%%BeginPageSetup
_S
18 36 translate
/pagenum 7 def
/fname (core/sugar.scm) def
/fdir (core/) def
/ftail (sugar.scm) def
% User defined strings:
/fmodstr (Mon Oct 31 16:19:45 2011) def
/pagenumstr (7) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 677 M
(;;;; Defining compound propagators) s
5 651 M
(;;; DEFINE-PROPAGATOR is to the propagator language what DEFINE is to) s
5 638 M
(;;; Scheme.  These macros make closures --- see physical-closures.scm.) s
5 625 M
(;;; This one defines propagators in diagram style --- that is, all) s
5 612 M
(;;; boundary cells are explicitly named.) s
5 586 M
(\(define-syntax define-propagator) s
5 573 M
(  \(rsc-macro-transformer) s
5 560 M
(   \(lambda \(form defn-env\)) s
5 547 M
(     \(let \(\(name \(caadr form\)\)) s
5 534 M
(           \(formals \(cdadr form\)\)) s
5 521 M
(           \(body \(cddr form\)\)\)) s
5 508 M
(       `\(define-%propagator ,\(propagator-naming-convention name\)) s
5 495 M
(          ,formals ,@body\)\)\)\)\)) s
5 469 M
(\(define-syntax define-d:propagator define-propagator\)) s
5 443 M
(\(define-syntax define-%propagator) s
5 430 M
(  \(syntax-rules \(\)) s
5 417 M
(    \(\(define-%propagator names \(arg ...\)) s
5 404 M
(       body ...\)) s
5 391 M
(     \(define-by-diagram-variant names) s
5 378 M
(       \(name!) s
5 365 M
(        \(lambda-d:propagator \(arg ...\)) s
5 352 M
(          body ...\)) s
5 339 M
(        \(car 'names\)\)\)\)\)\)) s
5 313 M
(\(define-syntax lambda-d:propagator) s
5 300 M
(  \(syntax-rules \(import\)) s
5 287 M
(    \(\(lambda-d:propagator \(arg ...\)) s
5 274 M
(       \(import cell ...\)) s
5 261 M
(       body ...\)) s
5 248 M
(     \(make-closure) s
5 235 M
(      \(naming-lambda \(arg ...\)) s
5 222 M
(        body ...\)) s
5 209 M
(      \(list cell ...\)\)\)) s
5 196 M
(    \(\(lambda-d:propagator \(arg ...\)) s
5 183 M
(       body ...\)) s
5 170 M
(     \(lambda-d:propagator \(arg ...\)) s
5 157 M
(       \(import\)) s
5 144 M
(       body ...\)\)\)\)) s
5 118 M
(;;; This is a convenience for defining closures \(with make-closure\)) s
5 105 M
(;;; that track the Scheme names given to the incoming cells.) s
5 92 M
(\(define-syntax naming-lambda) s
5 79 M
(  \(syntax-rules \(\)) s
5 66 M
(    \(\(naming-lambda \(arg-form ...\) body-form ...\)) s
5 53 M
(     \(lambda \(arg-form ...\)) s
5 40 M
(       \(register-diagram arg-form 'arg-form\) ...) s
5 27 M
(       body-form ...\)\)\)\)) s
_R
S
%%Page: (8) 52
%%BeginPageSetup
_S
18 36 translate
/pagenum 8 def
/fname (core/sugar.scm) def
/fdir (core/) def
/ftail (sugar.scm) def
% User defined strings:
/fmodstr (Mon Oct 31 16:19:45 2011) def
/pagenumstr (8) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 677 M
(;;; DEFINE-E:PROPAGATOR is just like DEFINE-PROPAGATOR, except that) s
5 664 M
(;;; there is one more implicit boundary cell, which is expected to be) s
5 651 M
(;;; returned by the last form in the body being defined.) s
5 625 M
(\(define-syntax define-e:propagator) s
5 612 M
(  \(rsc-macro-transformer) s
5 599 M
(   \(lambda \(form defn-env\)) s
5 586 M
(     \(let \(\(name \(caadr form\)\)) s
5 573 M
(           \(formals \(cdadr form\)\)) s
5 560 M
(           \(body \(cddr form\)\)\)) s
5 547 M
(       `\(define-%e:propagator ,\(propagator-naming-convention name\)) s
5 534 M
(          ,formals ,@body\)\)\)\)\)) s
5 508 M
(\(define-syntax define-%e:propagator) s
5 495 M
(  \(syntax-rules \(\)) s
5 482 M
(    \(\(define-%e:propagator names \(arg ...\)) s
5 469 M
(       body ...\)) s
5 456 M
(     \(define-by-expression-variant names) s
5 443 M
(       \(name!) s
5 430 M
(        \(lambda-e:propagator \(arg ...\)) s
5 417 M
(          body ...\)) s
5 404 M
(        \(cadr 'names\)\)\)\)\)\)) s
5 378 M
(\(define-syntax lambda-e:propagator) s
5 365 M
(  \(syntax-rules \(import\)) s
5 352 M
(    \(\(lambda-e:propagator \(arg ...\)) s
5 339 M
(       \(import cell ...\)) s
5 326 M
(       body ...\)) s
5 313 M
(     \(make-e:closure) s
5 300 M
(      \(naming-lambda \(arg ...\)) s
5 287 M
(        body ...\)) s
5 274 M
(      \(list cell ...\)\)\)) s
5 261 M
(    \(\(lambda-e:propagator \(arg ...\)) s
5 248 M
(       body ...\)) s
5 235 M
(     \(lambda-e:propagator \(arg ...\)) s
5 222 M
(       \(import\)) s
5 209 M
(       body ...\)\)\)\)) s
5 183 M
(;;;     TODO I need variable arity propagator constructors; this can) s
5 170 M
(;;; be taken from the story for compound data.) s
5 157 M
(;;;     TODO Here's an idea: maybe the arguments to the Scheme) s
5 144 M
(;;; procedures produced by define-propagator and company should) s
5 131 M
(;;; be optional.  If any are not supplied, that procedure can just) s
5 118 M
(;;; generate them.  It may also be fun to standardize on a mechanism) s
5 105 M
(;;; like E:INSPECTABLE-OBJECT and THE from the circuits exploration) s
5 92 M
(;;; for reaching in and grabbing such cells from the outside.) s
_R
S
%%Page: (9) 53
%%BeginPageSetup
_S
18 36 translate
/pagenum 9 def
/fname (core/sugar.scm) def
/fdir (core/) def
/ftail (sugar.scm) def
% User defined strings:
/fmodstr (Mon Oct 31 16:19:45 2011) def
/pagenumstr (9) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 677 M
(;;; TODO Consider rewriting p:when and company in terms of) s
5 664 M
(;;; constructing and applying closures that correspond to the bodies) s
5 651 M
(;;; of the branches.  Then the introduction of switches becomes) s
5 638 M
(;;; automatic, and the possible zero-inputs bug is avoided.) s
5 625 M
(#;) s
5 612 M
(\(define-syntax p:when) s
5 599 M
(  \(syntax-rules \(\)) s
5 586 M
(    \(\(p:when \(shieldee ...\) conditional body ...\)) s
5 573 M
(     \(let-cells \(\(shieldee \(e:conditional-wire conditional shieldee\)\) ...\)) s
5 560 M
(       \(\(delayed-propagator-constructor) s
5 547 M
(         \(lambda \(shieldee ...\)) s
5 534 M
(           body ...\)\)) s
5 521 M
(        shieldee ...\)\)\)\)\)) s
5 495 M
(\(define-syntax p:when) s
5 482 M
(  \(syntax-rules \(\)) s
5 469 M
(    \(\(p:when \(shieldee ...\) conditional body ...\)) s
5 456 M
(     \(application) s
5 443 M
(      \(e:conditional-wire conditional) s
5 430 M
(       \(make-closure) s
5 417 M
(        \(delayed-propagator-constructor) s
5 404 M
(         \(lambda \(shieldee ...\)) s
5 391 M
(           body ...\)\)) s
5 378 M
(        \(list\)\)\)) s
5 365 M
(      shieldee ...\)\)\)\)) s
5 339 M
(\(define-syntax p:unless) s
5 326 M
(  \(syntax-rules \(\)) s
5 313 M
(    \(\(p:unless shieldees conditional stuff ...\)) s
5 300 M
(     \(p:when shieldees \(e:not conditional\) stuff ...\)\)\)\)) s
5 274 M
(\(define-syntax p:if) s
5 261 M
(  \(syntax-rules \(\)) s
5 248 M
(    \(\(p:if shieldees conditional consequent alternate\)) s
5 235 M
(     \(let-cell \(conditional-value conditional\)) s
5 222 M
(       \(p:when shieldees conditional-value consequent\)) s
5 209 M
(       \(p:unless shieldees conditional-value alternate\)\)\)\)\)) s
5 196 M
(#;) s
5 183 M
(\(define-syntax e:when) s
5 170 M
(  \(syntax-rules \(\)) s
5 157 M
(    \(\(e:when \(shieldee ...\) conditional body ...\)) s
5 144 M
(     \(let-cells \(\(shieldee \(e:conditional-wire conditional shieldee\)\) ...\)) s
5 131 M
(       \(let-cell output) s
5 118 M
(         \(\(delayed-propagator-constructor) s
5 105 M
(           \(lambda boundary) s
5 92 M
(             \(handle-explicit-output boundary) s
5 79 M
(              \(lambda \(args\)) s
5 66 M
(                \(apply ) s
5 53 M
(                 \(lambda \(shieldee ...\)) s
5 40 M
(                   body ...\)) s
5 27 M
(                 args\)\)\)\)\)) s
5 14 M
(          shieldee ... output\)) s
_R
S
%%Page: (10) 54
%%BeginPageSetup
_S
18 36 translate
/pagenum 10 def
/fname (core/sugar.scm) def
/fdir (core/) def
/ftail (sugar.scm) def
% User defined strings:
/fmodstr (Mon Oct 31 16:19:45 2011) def
/pagenumstr (10) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 690 M
(         \(e:conditional-wire conditional output\)\)\)\)\)\)) s
5 664 M
(\(define-syntax e:when) s
5 651 M
(  \(syntax-rules \(\)) s
5 638 M
(    \(\(e:when \(shieldee ...\) conditional body ...\)) s
5 625 M
(     \(e:application) s
5 612 M
(      \(e:conditional-wire conditional) s
5 599 M
(       \(make-closure) s
5 586 M
(        \(delayed-propagator-constructor) s
5 573 M
(         \(lambda boundary) s
5 560 M
(           \(handle-explicit-output boundary) s
5 547 M
(            \(lambda \(args\)) s
5 534 M
(              \(apply) s
5 521 M
(               \(lambda \(shieldee ...\)) s
5 508 M
(                 body ...\)) s
5 495 M
(               args\)\)\)\)\)) s
5 482 M
(        \(list\)\)\)) s
5 469 M
(      shieldee ...\)\)\)\)) s
5 443 M
(\(define-syntax e:unless) s
5 430 M
(  \(syntax-rules \(\)) s
5 417 M
(    \(\(e:unless shieldees conditional stuff ...\)) s
5 404 M
(     \(e:when shieldees \(e:not conditional\) stuff ...\)\)\)\)) s
5 378 M
(\(define-syntax e:if) s
5 365 M
(  \(syntax-rules \(\)) s
5 352 M
(    \(\(e:if shieldees conditional consequent alternate\)) s
5 339 M
(     \(let-cell \(conditional-value conditional\)) s
5 326 M
(       \(ce:== \(e:when shieldees conditional-value consequent\)) s
5 313 M
(              \(e:unless shieldees conditional-value alternate\)\)\)\)\)\)) s
_R
S
%%Page: (1) 55
%%BeginPageSetup
_S
18 36 translate
/pagenum 1 def
/fname (core/generic-definitions.scm) def
/fdir (core/) def
/ftail (generic-definitions.scm) def
% User defined strings:
/fmodstr (Sat Oct 22 17:00:41 2011) def
/pagenumstr (1) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 690 M
(;;; ----------------------------------------------------------------------) s
5 677 M
(;;; Copyright 2009 Massachusetts Institute of Technology.) s
5 664 M
(;;; ----------------------------------------------------------------------) s
5 651 M
(;;; This file is part of Propagator Network Prototype.) s
5 638 M
(;;; ) s
5 625 M
(;;; Propagator Network Prototype is free software; you can) s
5 612 M
(;;; redistribute it and/or modify it under the terms of the GNU) s
5 599 M
(;;; General Public License as published by the Free Software) s
5 586 M
(;;; Foundation, either version 3 of the License, or \(at your option\)) s
5 573 M
(;;; any later version.) s
5 560 M
(;;; ) s
5 547 M
(;;; Propagator Network Prototype is distributed in the hope that it) s
5 534 M
(;;; will be useful, but WITHOUT ANY WARRANTY; without even the implied) s
5 521 M
(;;; warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.) s
5 508 M
(;;; See the GNU General Public License for more details.) s
5 495 M
(;;; ) s
5 482 M
(;;; You should have received a copy of the GNU General Public License) s
5 469 M
(;;; along with Propagator Network Prototype.  If not, see) s
5 456 M
(;;; <http://www.gnu.org/licenses/>.) s
5 443 M
(;;; ----------------------------------------------------------------------) s
5 417 M
(\(declare \(usual-integrations make-cell cell?\)\)) s
5 391 M
(;;;; General generic applicative functor machinery) s
5 365 M
(;;; If a group of partial information structures fit into the) s
5 352 M
(;;; applicative functor \(TODO: Reference Paterson and McBride\)) s
5 339 M
(;;; paradigm, the network can be mechanically extended to handle them) s
5 326 M
(;;; and their compositions.) s
5 300 M
(\(define \(binary-mapping f\)) s
5 287 M
(  \(define \(loop x y\)) s
5 274 M
(    \(let \(\(mapper \(binary-map x y\)\)\)) s
5 261 M
(      \(if \(procedure? mapper\)) s
5 248 M
(          \(mapper loop\)) s
5 235 M
(          \(f x y\)\)\)\)) s
5 222 M
(  \(name! loop f\)) s
5 209 M
(  loop\)) s
5 183 M
(\(define binary-map) s
5 170 M
(  \(make-generic-operator 2 'binary-map) s
5 157 M
(    \(lambda \(x y\) 'done!\)\)\)) s
5 131 M
(\(defhandler binary-map) s
5 118 M
(  \(lambda \(x y\) \(lambda \(f\) nothing\)\)) s
5 105 M
(  nothing? any?\)) s
5 79 M
(\(defhandler binary-map) s
5 66 M
(  \(lambda \(x y\) \(lambda \(f\) nothing\)\)) s
5 53 M
(  any? nothing?\)) s
5 14 M
(\(defhandler binary-map) s
_R
S
%%Page: (2) 56
%%BeginPageSetup
_S
18 36 translate
/pagenum 2 def
/fname (core/generic-definitions.scm) def
/fdir (core/) def
/ftail (generic-definitions.scm) def
% User defined strings:
/fmodstr (Sat Oct 22 17:00:41 2011) def
/pagenumstr (2) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 690 M
(  \(lambda \(x y\) \(lambda \(f\) nothing\)\)) s
5 677 M
(  contradictory? any?\)) s
5 651 M
(\(defhandler binary-map) s
5 638 M
(  \(lambda \(x y\) \(lambda \(f\) nothing\)\)) s
5 625 M
(  any? contradictory?\)) s
_R
S
%%Page: (3) 57
%%BeginPageSetup
_S
18 36 translate
/pagenum 3 def
/fname (core/generic-definitions.scm) def
/fdir (core/) def
/ftail (generic-definitions.scm) def
% User defined strings:
/fmodstr (Sat Oct 22 17:00:41 2011) def
/pagenumstr (3) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 677 M
(\(define \(unary-mapping f\)) s
5 664 M
(  \(name!) s
5 651 M
(   \(lambda \(x\)) s
5 638 M
(     \(\(binary-mapping \(lambda \(x y\) \(f x\)\)\)) s
5 625 M
(      ;; TODO Make this 1 a real "object that can be coerced into anything") s
5 612 M
(      x 1\)\)) s
5 599 M
(   f\)\)) s
5 573 M
(\(define \(nary-mapping f\)) s
5 560 M
(  \(name!) s
5 547 M
(   \(lambda args) s
5 534 M
(     \(case \(length args\)) s
5 521 M
(       \(\(0\) \(f\)\)) s
5 508 M
(       \(\(1\) \(\(unary-mapping f\) \(car args\)\)\)) s
5 495 M
(       \(\(2\) \(\(binary-mapping f\) \(car args\) \(cadr args\)\)\)) s
5 482 M
(       \(else) s
5 469 M
(        \(let loop \(\(args '\(\)\) \(rest args\)\)) s
5 456 M
(          \(if \(null? \(cdr rest\)\)) s
5 443 M
(              \(\(binary-mapping \(lambda \(lst item\)) s
5 430 M
(                                 \(apply f \(reverse \(cons item lst\)\)\)\)\)) s
5 417 M
(               args \(car rest\)\)) s
5 404 M
(              \(loop \(\(binary-mapping cons\) \(car rest\) args\) \(cdr rest\)\)\)\)\)\)\)) s
5 391 M
(   f\)\)) s
_R
S
%%Page: (4) 58
%%BeginPageSetup
_S
18 36 translate
/pagenum 4 def
/fname (core/generic-definitions.scm) def
/fdir (core/) def
/ftail (generic-definitions.scm) def
% User defined strings:
/fmodstr (Sat Oct 22 17:00:41 2011) def
/pagenumstr (4) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 677 M
(;;;; General generic-monadic machinery) s
5 651 M
(;;; If a partial information structure fits into the monad paradigm,) s
5 638 M
(;;; the portions of the network that are necessarily monadic rather) s
5 625 M
(;;; than applicative-functorial can be automatically extended to that) s
5 612 M
(;;; structure.  Of course, since monads do not compose naturally, it) s
5 599 M
(;;; is up to the user to effectively treat a group of partial) s
5 586 M
(;;; information structures as forming a single monad where) s
5 573 M
(;;; appropriate, and define corresponding cross-structure methods for) s
5 560 M
(;;; these operations.) s
5 547 M
(;;; TODO Does anything other than IF really need monads?) s
5 521 M
(\(define \(generic-bind thing function\)) s
5 508 M
(  \(generic-flatten \(generic-unpack thing function\)\)\)) s
5 482 M
(\(define generic-unpack ) s
5 469 M
(  \(make-generic-operator 2 'unpack) s
5 456 M
(    \(lambda \(object function\)) s
5 443 M
(      \(function object\)\)\)\)) s
5 417 M
(\(define generic-flatten) s
5 404 M
(  \(make-generic-operator 1 'flatten \(lambda \(object\) object\)\)\)) s
5 378 M
(\(define \(%nary-unpacking function\)) s
5 365 M
(  \(lambda args) s
5 352 M
(    \(let loop \(\(args args\)) s
5 339 M
(               \(function function\)\)) s
5 326 M
(      \(if \(null? args\)) s
5 313 M
(          \(function\)) s
5 300 M
(          \(generic-bind) s
5 287 M
(           \(car args\)) s
5 274 M
(           \(lambda \(arg\)) s
5 261 M
(             \(loop \(cdr args\)) s
5 248 M
(                   \(lambda remaining-args) s
5 235 M
(                     \(apply function \(cons arg remaining-args\)\)\)\)\)\)\)\)\)\)) s
5 209 M
(;; This version also attaches the name information, for debugging and) s
5 196 M
(;; drawing networks.) s
5 183 M
(\(define \(nary-unpacking function\)) s
5 170 M
(  \(eq-label! \(%nary-unpacking function\) 'name function\)\)) s
5 144 M
(\(defhandler generic-unpack) s
5 131 M
(  \(lambda \(object function\) nothing\)) s
5 118 M
(  nothing? any?\)) s
5 92 M
(\(defhandler generic-unpack) s
5 79 M
(  \(lambda \(object function\) nothing\)) s
5 66 M
(  contradictory? any?\)) s
5 27 M
(;;; This handler is redundant but harmless) s
5 14 M
(\(defhandler generic-flatten) s
_R
S
%%Page: (5) 59
%%BeginPageSetup
_S
18 36 translate
/pagenum 5 def
/fname (core/generic-definitions.scm) def
/fdir (core/) def
/ftail (generic-definitions.scm) def
% User defined strings:
/fmodstr (Sat Oct 22 17:00:41 2011) def
/pagenumstr (5) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 690 M
(  \(lambda \(thing\) nothing\)) s
5 677 M
(  nothing?\)) s
_R
S
%%Page: (-) 60
S
%%Page: (1) 61
%%BeginPageSetup
_S
18 36 translate
/pagenum 1 def
/fname (core/compound-data.scm) def
/fdir (core/) def
/ftail (compound-data.scm) def
% User defined strings:
/fmodstr (Sun Aug 29 18:19:15 2010) def
/pagenumstr (1) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 690 M
(;;; ----------------------------------------------------------------------) s
5 677 M
(;;; Copyright 2009 Massachusetts Institute of Technology.) s
5 664 M
(;;; ----------------------------------------------------------------------) s
5 651 M
(;;; This file is part of Propagator Network Prototype.) s
5 638 M
(;;; ) s
5 625 M
(;;; Propagator Network Prototype is free software; you can) s
5 612 M
(;;; redistribute it and/or modify it under the terms of the GNU) s
5 599 M
(;;; General Public License as published by the Free Software) s
5 586 M
(;;; Foundation, either version 3 of the License, or \(at your option\)) s
5 573 M
(;;; any later version.) s
5 560 M
(;;; ) s
5 547 M
(;;; Propagator Network Prototype is distributed in the hope that it) s
5 534 M
(;;; will be useful, but WITHOUT ANY WARRANTY; without even the implied) s
5 521 M
(;;; warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.) s
5 508 M
(;;; See the GNU General Public License for more details.) s
5 495 M
(;;; ) s
5 482 M
(;;; You should have received a copy of the GNU General Public License) s
5 469 M
(;;; along with Propagator Network Prototype.  If not, see) s
5 456 M
(;;; <http://www.gnu.org/licenses/>.) s
5 443 M
(;;; ----------------------------------------------------------------------) s
5 417 M
(\(declare \(usual-integrations make-cell cell?\)\)) s
5 391 M
(;;;; Compound data) s
5 365 M
(;;; The code for merging compound data turns out not to depend on the) s
5 352 M
(;;; choice between the "copying data" or "carrying cells" strategies) s
5 339 M
(;;; --- those are dependent entirely on what the constructor) s
5 326 M
(;;; and accessor propagators do.) s
5 300 M
(;;; Cons looks like this:) s
5 287 M
(#|) s
5 274 M
( \(define \(pair-equivalent? pair1 pair2\)) s
5 261 M
(   \(and \(equivalent? \(car pair1\) \(car pair2\)\)) s
5 248 M
(        \(equivalent? \(cdr pair1\) \(cdr pair2\)\)\)\)) s
5 222 M
( \(define \(pair-merge pair1 pair2\)) s
5 209 M
(   \(effectful-bind \(merge \(car pair1\) \(car pair2\)\)) s
5 196 M
(     \(lambda \(car-answer\)) s
5 183 M
(       \(effectful-bind \(merge \(cdr pair1\) \(cdr pair2\)\)) s
5 170 M
(         \(lambda \(cdr-answer\)) s
5 157 M
(           \(cons car-answer cdr-answer\)\)\)\)\)\)) s
5 131 M
( \(defhandler merge pair-merge pair? pair?\)) s
5 118 M
( \(defhandler equivalent? pair-equivalent? pair? pair?\)) s
5 105 M
(|#) s
_R
S
%%Page: (2) 62
%%BeginPageSetup
_S
18 36 translate
/pagenum 2 def
/fname (core/compound-data.scm) def
/fdir (core/) def
/ftail (compound-data.scm) def
% User defined strings:
/fmodstr (Sun Aug 29 18:19:15 2010) def
/pagenumstr (2) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 677 M
(;;; The generalization to arbitrary product types:) s
5 651 M
(\(define \(slotful-information-type predicate? constructor . accessors\)) s
5 638 M
(  \(define \(slotful-equivalent? thing1 thing2\)) s
5 625 M
(    \(apply boolean/and) s
5 612 M
(     \(map \(lambda \(accessor\)) s
5 599 M
(            \(equivalent? \(accessor thing1\) \(accessor thing2\)\)\)) s
5 586 M
(          accessors\)\)\)) s
5 573 M
(  \(define \(slotful-merge thing1 thing2\)) s
5 560 M
(    \(let* \(\(slots1 \(map \(lambda \(accessor\) \(accessor thing1\)\)) s
5 547 M
(                        accessors\)\)) s
5 534 M
(           \(slots2 \(map \(lambda \(accessor\) \(accessor thing2\)\)) s
5 521 M
(                        accessors\)\)\)) s
5 508 M
(      \(effectful-list-bind \(map merge slots1 slots2\)) s
5 495 M
(        \(lambda \(submerges\)) s
5 482 M
(          \(apply constructor submerges\)\)\)\)\)) s
5 469 M
(  \(define \(slotful-contradiction? thing\)) s
5 456 M
(    \(any contradictory? \(map \(lambda \(accessor\) \(accessor thing\)\) accessors\)\)\)) s
5 443 M
(  \(defhandler merge slotful-merge predicate? predicate?\)) s
5 430 M
(  \(defhandler equivalent? slotful-equivalent? predicate? predicate?\)) s
5 417 M
(  \(defhandler contradictory? slotful-contradiction? predicate?\)\)) s
5 391 M
(\(slotful-information-type pair? cons car cdr\)) s
_R
S
%%Page: (1) 63
%%BeginPageSetup
_S
18 36 translate
/pagenum 1 def
/fname (core/physical-closures.scm) def
/fdir (core/) def
/ftail (physical-closures.scm) def
% User defined strings:
/fmodstr (Wed Aug 18 19:28:52 2010) def
/pagenumstr (1) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 690 M
(;;; ----------------------------------------------------------------------) s
5 677 M
(;;; Copyright 2010 Alexey Radul.) s
5 664 M
(;;; ----------------------------------------------------------------------) s
5 651 M
(;;; This file is part of Propagator Network Prototype.) s
5 638 M
(;;; ) s
5 625 M
(;;; Propagator Network Prototype is free software; you can) s
5 612 M
(;;; redistribute it and/or modify it under the terms of the GNU) s
5 599 M
(;;; General Public License as published by the Free Software) s
5 586 M
(;;; Foundation, either version 3 of the License, or \(at your option\)) s
5 573 M
(;;; any later version.) s
5 560 M
(;;; ) s
5 547 M
(;;; Propagator Network Prototype is distributed in the hope that it) s
5 534 M
(;;; will be useful, but WITHOUT ANY WARRANTY; without even the implied) s
5 521 M
(;;; warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.) s
5 508 M
(;;; See the GNU General Public License for more details.) s
5 495 M
(;;; ) s
5 482 M
(;;; You should have received a copy of the GNU General Public License) s
5 469 M
(;;; along with Propagator Network Prototype.  If not, see) s
5 456 M
(;;; <http://www.gnu.org/licenses/>.) s
5 443 M
(;;; ----------------------------------------------------------------------) s
5 417 M
(\(declare \(usual-integrations make-cell cell?\)\)) s
5 391 M
(;;;; Closures, physical-copies style) s
5 365 M
(;;; A normal propagator constructor in the physical copies style is a) s
5 352 M
(;;; Scheme procedure that, when given some cells, will build some) s
5 339 M
(;;; quantity of network structure onto those cells.  As stated, these) s
5 326 M
(;;; are expected not to be closed \(in Scheme\) over anything) s
5 313 M
(;;; interesting.) s
5 287 M
(;;; A closure in the physical copies style is a propagator constructor) s
5 274 M
(;;; that may be closed over some cells, together with an explicit list) s
5 261 M
(;;; of those cells.  The list needs to be explicit because in order to) s
5 248 M
(;;; merge closures, I have to merge the cells they are closed over.) s
5 235 M
(;;; \(Cell merging is such that the underlying Scheme closures that) s
5 222 M
(;;; implement the propagator construction do not need to be modified) s
5 209 M
(;;; when this happens\).) s
5 183 M
(;;; Requiring physical-copies closures to close only over cells) s
5 170 M
(;;; amounts to specifying the "carrying cells" strategy for compound) s
5 157 M
(;;; data, at least with regard to closures.  This feels like the right) s
5 144 M
(;;; thing; but in principle there is no reason to insist on it.  To do) s
5 131 M
(;;; "copying data", MAKE-CLOSURE would need to construct a propagator) s
5 118 M
(;;; that would rebuild the closure every time any of the cells the) s
5 105 M
(;;; environment grabs experienced any changes, and APPLICATION, below,) s
5 92 M
(;;; would need to be adjusted accordingly \(how, exactly?\)  All this) s
5 79 M
(;;; would be perfectly plausible, with the same pros and cons as the) s
5 66 M
(;;; regular "carrying" vs "copying" debate.  Note that the actual) s
5 53 M
(;;; closure data structure, except for MAKE-CLOSURE, is completely) s
5 40 M
(;;; independent of the carrying vs copying choice, just like the) s
5 27 M
(;;; actual partial information type definition for CONS.) s
_R
S
%%Page: (2) 64
%%BeginPageSetup
_S
18 36 translate
/pagenum 2 def
/fname (core/physical-closures.scm) def
/fdir (core/) def
/ftail (physical-closures.scm) def
% User defined strings:
/fmodstr (Wed Aug 18 19:28:52 2010) def
/pagenumstr (2) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 677 M
(;;; The code-tag field is a hack to let me detect "equality" between) s
5 664 M
(;;; two Scheme closures that have the same code but are closed over) s
5 651 M
(;;; different cells.  Such are the moral equivalent of identical data) s
5 638 M
(;;; structures with different contents, and so are mergeable; whereas) s
5 625 M
(;;; Scheme closures with different code are like data structures of) s
5 612 M
(;;; different types and so are not mergeable.) s
5 586 M
(\(define-structure) s
5 573 M
(  \(closure \(constructor %make-closure\) \(safe-accessors #t\)\)) s
5 560 M
(  code) s
5 547 M
(  environment) s
5 534 M
(  diagram-style?\)) s
5 508 M
(\(define \(closure-code-tag thing\)) s
5 495 M
(  \(procedure-lambda \(closure-code thing\)\)\)) s
5 469 M
(\(define \(closure-copy closure\)) s
5 456 M
(  \(eq-clone! closure) s
5 443 M
(   \(%make-closure \(closure-code closure\)) s
5 430 M
(                  \(closure-environment closure\)) s
5 417 M
(                  \(closure-diagram-style? closure\)\)\)\)) s
_R
S
%%Page: (3) 65
%%BeginPageSetup
_S
18 36 translate
/pagenum 3 def
/fname (core/physical-closures.scm) def
/fdir (core/) def
/ftail (physical-closures.scm) def
% User defined strings:
/fmodstr (Wed Aug 18 19:28:52 2010) def
/pagenumstr (3) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 677 M
(;; The ensure-cell here makes these be "carrying cells" structures.) s
5 664 M
(\(define \(make-closure code environment\)) s
5 651 M
(  \(name-closure!) s
5 638 M
(   \(%make-closure code \(map ensure-cell environment\) #t\)\)\)) s
5 612 M
(\(define \(make-e:closure code environment\)) s
5 599 M
(  \(name-closure!) s
5 586 M
(   \(%make-closure code \(map ensure-cell environment\) #f\)\)\)) s
5 560 M
(\(define \(name-closure! closure\)) s
5 547 M
(  \(cond \(\(eq-get closure 'name\) closure\) ; ok) s
5 534 M
(        \(\(eq-get \(closure-code closure\) 'name\)) s
5 521 M
(         \(name! closure \(closure-code closure\)\)\)) s
5 508 M
(        \(\(symbol? \(closure-code-tag closure\)\)) s
5 495 M
(         \(name! closure \(closure-code-tag closure\)\)\)) s
5 482 M
(        \(else ; nothing works) s
5 469 M
(         closure\)\)\)) s
5 443 M
(\(define \(same-code? closure1 closure2\)) s
5 430 M
(  \(and \(eq? \(closure-code-tag closure1\) \(closure-code-tag closure2\)\)) s
5 417 M
(       \(eqv? \(closure-diagram-style? closure1\)) s
5 404 M
(             \(closure-diagram-style? closure2\)\)\)\)) s
5 378 M
(\(define \(closure-merge closure1 closure2\)) s
5 365 M
(  \(if \(not \(same-code? closure1 closure2\)\)) s
5 352 M
(      the-contradiction) s
5 339 M
(      \(effectful-bind \(merge \(closure-environment closure1\)) s
5 326 M
(                             \(closure-environment closure2\)\)) s
5 313 M
(        \(lambda \(new-env\)) s
5 300 M
(          \(%make-closure) s
5 287 M
(           \(closure-code closure1\)) s
5 274 M
(           new-env) s
5 261 M
(           \(closure-diagram-style? closure1\)\)\)\)\)\)) s
5 235 M
(\(define \(equivalent-closures? closure1 closure2\)) s
5 222 M
(  \(or \(eqv? closure1 closure2\)) s
5 209 M
(      \(and \(closure? closure1\)) s
5 196 M
(           \(closure? closure2\)) s
5 183 M
(           \(eq? \(closure-code-tag closure1\) \(closure-code-tag closure2\)\)) s
5 170 M
(           \(equivalent? \(closure-environment closure1\)) s
5 157 M
(                        \(closure-environment closure2\)\)\)\)\)) s
5 131 M
(\(define \(contradictory-closure? closure\)) s
5 118 M
(  \(contradictory? \(closure-environment closure\)\)\)) s
5 92 M
(\(defhandler merge closure-merge closure? closure?\)) s
5 79 M
(\(defhandler equivalent? equivalent-closures? closure? closure?\)) s
5 66 M
(\(defhandler contradictory? contradictory-closure? closure?\)) s
5 40 M
(\(initialize-scheduler\)                  ; propagatify makes cells!) s
5 14 M
(\(propagatify equivalent-closures?\)) s
_R
S
%%Page: (-) 66
S
%%Page: (1) 67
%%BeginPageSetup
_S
18 36 translate
/pagenum 1 def
/fname (core/standard-propagators.scm) def
/fdir (core/) def
/ftail (standard-propagators.scm) def
% User defined strings:
/fmodstr (Mon Apr 18 17:47:47 2011) def
/pagenumstr (1) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 690 M
(;;; ----------------------------------------------------------------------) s
5 677 M
(;;; Copyright 2009 Massachusetts Institute of Technology.) s
5 664 M
(;;; ----------------------------------------------------------------------) s
5 651 M
(;;; This file is part of Propagator Network Prototype.) s
5 638 M
(;;; ) s
5 625 M
(;;; Propagator Network Prototype is free software; you can) s
5 612 M
(;;; redistribute it and/or modify it under the terms of the GNU) s
5 599 M
(;;; General Public License as published by the Free Software) s
5 586 M
(;;; Foundation, either version 3 of the License, or \(at your option\)) s
5 573 M
(;;; any later version.) s
5 560 M
(;;; ) s
5 547 M
(;;; Propagator Network Prototype is distributed in the hope that it) s
5 534 M
(;;; will be useful, but WITHOUT ANY WARRANTY; without even the implied) s
5 521 M
(;;; warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.) s
5 508 M
(;;; See the GNU General Public License for more details.) s
5 495 M
(;;; ) s
5 482 M
(;;; You should have received a copy of the GNU General Public License) s
5 469 M
(;;; along with Propagator Network Prototype.  If not, see) s
5 456 M
(;;; <http://www.gnu.org/licenses/>.) s
5 443 M
(;;; ----------------------------------------------------------------------) s
5 417 M
(\(declare \(usual-integrations make-cell cell?\)\)) s
5 391 M
(;;;; Standard primitive propagators) s
5 365 M
(\(define \(p:constant value\)) s
5 352 M
(  \(function->propagator-constructor #; \(lambda \(\) value\)) s
5 339 M
(   \(eq-label! \(lambda \(\) value\) 'name `\(constant ,\(name value\)\)\)\)\)) s
5 326 M
(\(define \(e:constant value\)) s
5 313 M
(  \(let \(\(answer \(make-named-cell 'cell\)\)\)) s
5 300 M
(    \(\(constant value\) answer\)) s
5 287 M
(    \(eq-put! answer 'subexprs '\(\)\)) s
5 274 M
(    answer\)\)) s
5 248 M
(\(propagatify abs\)) s
5 235 M
(\(propagatify square\)) s
5 222 M
(\(propagatify sqrt\)) s
5 209 M
(\(propagatify not\)) s
5 196 M
(\(propagatify negate\)) s
5 183 M
(\(propagatify invert\)) s
5 170 M
(\(propagatify sin\)) s
5 157 M
(\(propagatify cos\)) s
5 144 M
(\(propagatify tan\)) s
5 131 M
(\(propagatify asin\)) s
5 118 M
(\(propagatify acos\)) s
5 105 M
(\(propagatify exp\)) s
5 92 M
(\(propagatify log\)) s
5 66 M
(\(propagatify +\)) s
5 53 M
(\(propagatify -\)) s
5 40 M
(;;;\(propagatify *\)  ;See below, to make more sophisticated version) s
5 27 M
(;;;\(propagatify /\)  ;See below, to make more sophisticated version) s
5 14 M
(;;;\(propagatify =\)  ;See below, to support floating comparisons...) s
_R
S
%%Page: (2) 68
%%BeginPageSetup
_S
18 36 translate
/pagenum 2 def
/fname (core/standard-propagators.scm) def
/fdir (core/) def
/ftail (standard-propagators.scm) def
% User defined strings:
/fmodstr (Mon Apr 18 17:47:47 2011) def
/pagenumstr (2) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 690 M
(\(propagatify <\)) s
5 677 M
(\(propagatify >\)) s
5 664 M
(\(propagatify <=\)) s
5 651 M
(\(propagatify >=\)) s
5 638 M
(\(propagatify atan2\)) s
_R
S
%%Page: (3) 69
%%BeginPageSetup
_S
18 36 translate
/pagenum 3 def
/fname (core/standard-propagators.scm) def
/fdir (core/) def
/ftail (standard-propagators.scm) def
% User defined strings:
/fmodstr (Mon Apr 18 17:47:47 2011) def
/pagenumstr (3) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 677 M
(; see ../support/utils for num=?) s
5 664 M
(\(define generic-= \(make-generic-operator 2 '= default-equal?\)\) ) s
5 651 M
(\(define-cell p:=) s
5 638 M
(  \(function->propagator-constructor \(binary-mapping generic-=\)\)\)) s
5 625 M
(\(define-cell e:= \(expression-style-variant p:=\)\)  ) s
5 599 M
(;; Not using propagatify because the name AND names syntax, and I want) s
5 586 M
(;; the procedure BOOLEAN/AND.  Also, see more sophisticated version) s
5 573 M
(;; below.) s
5 560 M
(\(define generic-and \(make-generic-operator 2 'and boolean/and\)\)) s
5 547 M
(\(define-cell p:and-dumb) s
5 534 M
(  \(function->propagator-constructor \(binary-mapping generic-and\)\)\)) s
5 521 M
(\(define-cell e:and-dumb \(expression-style-variant p:and-dumb\)\)) s
5 508 M
(\(define generic-or  \(make-generic-operator 2 'or  boolean/or\)\)) s
5 495 M
(\(define-cell p:or-dumb) s
5 482 M
(  \(function->propagator-constructor \(binary-mapping generic-or\)\)\)) s
5 469 M
(\(define-cell e:or-dumb \(expression-style-variant p:or-dumb\)\)) s
5 443 M
(;;; DNA is to AND as division is to multiplication) s
5 430 M
(\(define \(boolean/dna c x\)) s
5 417 M
(  \(if \(and \(not c\) x\) #f nothing\)\)) s
5 404 M
(\(define generic-dna \(make-generic-operator 2 'dna boolean/dna\)\)) s
5 391 M
(\(define-cell p:dna) s
5 378 M
(  \(function->propagator-constructor \(binary-mapping generic-dna\)\)\)) s
5 365 M
(\(define-cell e:dna) s
5 352 M
(  \(expression-style-variant p:dna\)\)) s
5 326 M
(\(define \(boolean/imp a\) \(if a #t nothing\)\)) s
5 313 M
(\(define generic-imp \(make-generic-operator 1 'imp boolean/imp\)\)) s
5 300 M
(\(define-cell p:imp) s
5 287 M
(  \(function->propagator-constructor \(unary-mapping generic-imp\)\)\)) s
5 274 M
(\(define-cell e:imp) s
5 261 M
(  \(expression-style-variant p:imp\)\)) s
5 235 M
(;;; RO is to OR as division is to multiplication) s
5 222 M
(\(define \(boolean/ro c x\)) s
5 209 M
(  \(if \(and c \(not x\)\) #t nothing\)\)) s
5 196 M
(\(define generic-ro \(make-generic-operator 2 'ro boolean/ro\)\)) s
5 183 M
(\(define-cell p:ro) s
5 170 M
(  \(function->propagator-constructor \(binary-mapping generic-ro\)\)\)) s
5 157 M
(\(define-cell e:ro) s
5 144 M
(  \(expression-style-variant p:ro\)\)) s
5 118 M
(\(define \(boolean/pmi a\) \(if \(not a\) #f nothing\)\)) s
5 105 M
(\(define generic-pmi \(make-generic-operator 1 'pmi boolean/pmi\)\)) s
5 92 M
(\(define-cell p:pmi) s
5 79 M
(  \(function->propagator-constructor \(unary-mapping generic-pmi\)\)\)) s
5 66 M
(\(define-cell e:pmi) s
5 53 M
(  \(expression-style-variant p:pmi\)\)) s
_R
S
%%Page: (4) 70
%%BeginPageSetup
_S
18 36 translate
/pagenum 4 def
/fname (core/standard-propagators.scm) def
/fdir (core/) def
/ftail (standard-propagators.scm) def
% User defined strings:
/fmodstr (Mon Apr 18 17:47:47 2011) def
/pagenumstr (4) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 677 M
(\(propagatify eq?\)) s
5 664 M
(\(propagatify eqv?\)) s
5 651 M
(\(propagatify expt\)) s
5 625 M
(;; I want a name for the function that does the switch job) s
5 612 M
(\(define \(switch control input\)) s
5 599 M
(  \(if control input nothing\)\)) s
5 586 M
(\(define switch-function switch\)) s
5 573 M
(\(propagatify switch\)) s
5 547 M
(\(name! identity 'identity\)) s
5 534 M
(; These two are almost the same, but the difference doesn't matter) s
5 521 M
(\(define-cell p:id \(function->propagator-constructor identity\)\)) s
5 508 M
(; \(define-cell p:id \(function->propagator-constructor \(nary-mapping identity\)\)) s
5 495 M
(\)) s
5 482 M
(\(define-cell e:id \(expression-style-variant p:id\)\)) s
5 456 M
(\(define same identity\)) s
5 443 M
(\(propagatify same\)) s
5 417 M
(;; TODO Do I still want to provide these old names for these things?) s
5 404 M
(\(define constant p:constant\) \(define switch p:switch\)) s
5 378 M
(;;;; Standard compound propagators) s
5 352 M
(\(define-propagator \(conditional control if-true if-false output\)) s
5 339 M
(  \(switch control if-true output\)) s
5 326 M
(  \(switch \(e:not control\) if-false output\)\)) s
5 300 M
(\(define-propagator \(conditional-router control input if-true if-false\)) s
5 287 M
(  \(switch control input if-true\)) s
5 274 M
(  \(switch \(e:not control\) input if-false\)\)) s
5 248 M
(\(define-propagator \(conditional-wire control end1 end2\)) s
5 235 M
(  \(switch control end1 end2\)) s
5 222 M
(  \(switch control end2 end1\)\)) s
5 196 M
(\(define conditional p:conditional\)) s
5 183 M
(\(define conditional-router p:conditional-router\)) s
5 170 M
(\(define conditional-wire p:conditional-wire\)) s
_R
S
%%Page: (5) 71
%%BeginPageSetup
_S
18 36 translate
/pagenum 5 def
/fname (core/standard-propagators.scm) def
/fdir (core/) def
/ftail (standard-propagators.scm) def
% User defined strings:
/fmodstr (Mon Apr 18 17:47:47 2011) def
/pagenumstr (5) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 677 M
(;;; Clever Propagators that know about short cuts.) s
5 651 M
(\(define-propagator \(p:or p1 p2 p\)) s
5 638 M
(  \(p:or-dumb p1 p2 p\)) s
5 625 M
(  ;; Short cuts) s
5 612 M
(  \(p:imp p1 p\)) s
5 599 M
(  \(p:imp p2 p\)\)) s
5 573 M
(\(define-propagator \(p:and p1 p2 p\)) s
5 560 M
(  \(p:and-dumb p1 p2 p\)) s
5 547 M
(  ;; Short cuts) s
5 534 M
(  \(p:pmi p1 p\)) s
5 521 M
(  \(p:pmi p2 p\)\)) s
5 482 M
(\(define generic-* \(make-generic-operator 2 '* *\)\)) s
5 469 M
(\(define-cell p:*-dumb) s
5 456 M
(  \(function->propagator-constructor \(binary-mapping generic-*\)\)\)) s
5 443 M
(\(define-cell e:*-dumb \(expression-style-variant p:*-dumb\)\)) s
5 417 M
(\(define-propagator \(p:* m1 m2 product\)) s
5 404 M
(  \(p:*-dumb m1 m2 product\)) s
5 391 M
(  ;; Short cuts) s
5 378 M
(  \(p:switch \(e:= m1 0\) m1 product\)) s
5 365 M
(  \(p:switch \(e:= m2 0\) m2 product\)\)) s
5 313 M
(\(define generic-/ \(make-generic-operator 2 '/ /\)\)) s
5 287 M
(\(define \(numerical-zero? x\) \(and \(number? x\) \(zero? x\)\)\)) s
5 274 M
(\(declare-explicit-guard numerical-zero? \(guard <number> zero?\)\)) s
5 248 M
(\(define \(binary-nothing a b\) nothing\)) s
5 222 M
(\(defhandler generic-/ binary-nothing numerical-zero? numerical-zero?\)) s
5 196 M
(\(define \(numerical-non-zero? x\) \(and \(number? x\) \(not \(zero? x\)\)\)\)) s
5 183 M
(\(declare-explicit-guard numerical-non-zero? \(guard <number> numerical-non-zero) s
5 170 M
(?\)\)) s
5 144 M
(\(define \(binary-contradiction a b\) the-contradiction\)) s
5 118 M
(\(defhandler generic-/ binary-contradiction) s
5 105 M
(            numerical-non-zero? numerical-zero?\)) s
5 66 M
(\(define-cell p:/-dumb) s
5 53 M
(  \(function->propagator-constructor \(binary-mapping generic-/\)\)\)) s
5 40 M
(\(define-cell e:/-dumb \(expression-style-variant p:/-dumb\)\)) s
5 14 M
(\(define-propagator \(p:/ product m1 m2\)) s
_R
S
%%Page: (6) 72
%%BeginPageSetup
_S
18 36 translate
/pagenum 6 def
/fname (core/standard-propagators.scm) def
/fdir (core/) def
/ftail (standard-propagators.scm) def
% User defined strings:
/fmodstr (Mon Apr 18 17:47:47 2011) def
/pagenumstr (6) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 690 M
(  \(p:/-dumb product m1 m2\)) s
5 677 M
(  ;; Short cut) s
5 664 M
(  \(p:switch \(e:and \(e:= product 0\)) s
5 651 M
(                   \(e:not \(e:= m1 0\)\)\)) s
5 638 M
(            product m2\)\)) s
_R
S
%%Page: (7) 73
%%BeginPageSetup
_S
18 36 translate
/pagenum 7 def
/fname (core/standard-propagators.scm) def
/fdir (core/) def
/ftail (standard-propagators.scm) def
% User defined strings:
/fmodstr (Mon Apr 18 17:47:47 2011) def
/pagenumstr (7) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 677 M
(;;; Constraining propagators) s
5 651 M
(\(define-propagator \(c:+ a1 a2 sum\)) s
5 638 M
(  \(p:+ a1 a2 sum\)      \(p:- sum a1 a2\)      \(p:- sum a2 a1\)\)) s
5 625 M
(;; This generates a useful ce:-) s
5 612 M
(\(define-propagator \(c:- sum a1 a2\)) s
5 599 M
(  \(c:+ a1 a2 sum\)\)) s
5 573 M
(\(define-propagator \(c:* m1 m2 product\)) s
5 560 M
(  \(p:* m1 m2 product\)  \(p:/ product m1 m2\)  \(p:/ product m2 m1\)\)) s
5 547 M
(;; This generates a useful ce:/) s
5 534 M
(\(define-propagator \(c:/ product m1 m2\)) s
5 521 M
(  \(c:* m1 m2 product\)\)) s
5 495 M
(\(define-propagator \(c:square x x^2\)) s
5 482 M
(  \(p:square x x^2\)     \(p:sqrt x^2 x\)\)) s
5 469 M
(;; This generates a useful ce:sqrt) s
5 456 M
(\(define-propagator \(c:sqrt x^2 x\)) s
5 443 M
(  \(p:square x x^2\)     \(p:sqrt x^2 x\)\)) s
5 417 M
(\(define-propagator \(c:not p1 p2\)) s
5 404 M
(  \(p:not p1 p2\)        \(p:not p2 p1\)\)) s
5 378 M
(\(define-propagator \(c:and p1 p2 p\)) s
5 365 M
(  \(p:and p1 p2 p\)) s
5 352 M
(  \(p:dna p p1 p2\)) s
5 339 M
(  \(p:dna p p2 p1\)) s
5 326 M
(  \(p:imp p p1\)) s
5 313 M
(  \(p:imp p p2\)\)) s
5 287 M
(\(define-propagator \(c:or p1 p2 p\)) s
5 274 M
(  \(p:or p1 p2 p\)) s
5 261 M
(  \(p:ro p p1 p2\)) s
5 248 M
(  \(p:ro p p2 p1\)) s
5 235 M
(  \(p:pmi p p1\)) s
5 222 M
(  \(p:pmi p p2\)\)) s
5 196 M
(\(define-propagator \(c:id c1 c2\)) s
5 183 M
(  \(p:id c1 c2\) \(p:id c2 c1\)\)) s
5 157 M
(\(define-propagator \(c:same c1 c2\)) s
5 144 M
(  \(p:same c1 c2\) \(p:same c2 c1\)\)) s
_R
S
%%Page: (8) 74
%%BeginPageSetup
_S
18 36 translate
/pagenum 8 def
/fname (core/standard-propagators.scm) def
/fdir (core/) def
/ftail (standard-propagators.scm) def
% User defined strings:
/fmodstr (Mon Apr 18 17:47:47 2011) def
/pagenumstr (8) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 677 M
(\(define-cell p:==) s
5 664 M
(  \(propagator-constructor!) s
5 651 M
(   \(lambda args) s
5 638 M
(     \(let \(\(target \(car \(last-pair args\)\)\)\)) s
5 625 M
(       \(for-each \(lambda \(arg\)) s
5 612 M
(                   \(p:id arg target\)\)) s
5 599 M
(                 \(except-last-pair args\)\)) s
5 586 M
(       target\)\)\)\)) s
5 573 M
(\(define-cell e:== \(expression-style-variant p:==\)\)) s
5 547 M
(\(define-cell c:==) s
5 534 M
(  \(propagator-constructor!) s
5 521 M
(   \(lambda args) s
5 508 M
(     \(let \(\(lead \(car args\)\)\)) s
5 495 M
(      \(for-each \(lambda \(arg\)) s
5 482 M
(                  \(c:id lead arg\)\)) s
5 469 M
(                \(cdr args\)\)) s
5 456 M
(      lead\)\)\)\)) s
5 443 M
(\(define-cell ce:== \(expression-style-variant c:==\)\)) s
5 417 M
(\(define-propagator \(c:negate x y\)) s
5 404 M
(  \(p:negate x y\)) s
5 391 M
(  \(p:negate y x\)\)) s
5 365 M
(\(define-propagator \(c:invert x y\)) s
5 352 M
(  \(p:invert x y\)) s
5 339 M
(  \(p:invert y x\)\)) s
5 313 M
(\(define-propagator \(c:sin x y\)) s
5 300 M
(  \(p:sin x y\)) s
5 287 M
(  \(p:asin y x\)\)) s
5 261 M
(\(define-propagator \(c:cos x y\)) s
5 248 M
(  \(p:cos x y\)) s
5 235 M
(  \(p:acos y x\)\)) s
5 209 M
(\(define-propagator \(c:tan x y\)) s
5 196 M
(  \(p:tan x y\)) s
5 183 M
(  \(p:atan2 y 1 x\)\)) s
5 157 M
(\(define-propagator \(c:exp x y\)) s
5 144 M
(  \(p:exp x y\)) s
5 131 M
(  \(p:log y x\)\)) s
5 105 M
(\(define-propagator \(c:eq? a b truth\)) s
5 92 M
(  \(p:eq? a b truth\)) s
5 79 M
(  \(conditional-wire truth a b\)\)) s
5 53 M
(\(define-propagator \(c:eqv? a b truth\)) s
5 40 M
(  \(p:eqv? a b truth\)) s
5 27 M
(  \(conditional-wire truth a b\)\)) s
_R
S
%%Page: (1) 75
%%BeginPageSetup
_S
18 36 translate
/pagenum 1 def
/fname (core/carrying-cells.scm) def
/fdir (core/) def
/ftail (carrying-cells.scm) def
% User defined strings:
/fmodstr (Tue Apr 26 17:56:09 2011) def
/pagenumstr (1) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 690 M
(;;; ----------------------------------------------------------------------) s
5 677 M
(;;; Copyright 2010 Alexey Radul and Gerald Jay Sussman) s
5 664 M
(;;; ----------------------------------------------------------------------) s
5 651 M
(;;; This file is part of Propagator Network Prototype.) s
5 638 M
(;;; ) s
5 625 M
(;;; Propagator Network Prototype is free software; you can) s
5 612 M
(;;; redistribute it and/or modify it under the terms of the GNU) s
5 599 M
(;;; General Public License as published by the Free Software) s
5 586 M
(;;; Foundation, either version 3 of the License, or \(at your option\)) s
5 573 M
(;;; any later version.) s
5 560 M
(;;; ) s
5 547 M
(;;; Propagator Network Prototype is distributed in the hope that it) s
5 534 M
(;;; will be useful, but WITHOUT ANY WARRANTY; without even the implied) s
5 521 M
(;;; warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.) s
5 508 M
(;;; See the GNU General Public License for more details.) s
5 495 M
(;;; ) s
5 482 M
(;;; You should have received a copy of the GNU General Public License) s
5 469 M
(;;; along with Propagator Network Prototype.  If not, see) s
5 456 M
(;;; <http://www.gnu.org/licenses/>.) s
5 443 M
(;;; ----------------------------------------------------------------------) s
5 417 M
(\(declare \(usual-integrations make-cell cell?\)\)) s
5 391 M
(;;;; Propagators implementing the carrying cells strategy) s
5 378 M
(;;; for compound data structures.) s
5 352 M
(;;; CONS looks like this:) s
5 339 M
(#;) s
5 326 M
( \(define \(p:cons a-cell d-cell output\)) s
5 313 M
(   \(\(constant \(cons a-cell d-cell\)\) output\)\)) s
5 287 M
(;;; The general version for arbitrary constructors:) s
5 261 M
(\(define \(function->cell-carrier-constructor f\)) s
5 248 M
(  \(propagator-constructor!) s
5 235 M
(   \(lambda cells) s
5 222 M
(     \(let \(\(output \(ensure-cell \(car \(last-pair cells\)\)\)\)) s
5 209 M
(           \(inputs \(map ensure-cell \(except-last-pair cells\)\)\)\)) s
5 196 M
(       \(let \(\(answer-diagram \(\(constant \(apply f inputs\)\) output\)\)\)) s
5 183 M
(         \(execute-propagator   ; To enable the early-access-hack below) s
5 170 M
(          \(diagram-identity) s
5 157 M
(           answer-diagram\)\)) s
5 144 M
(         answer-diagram\)\)\)\)\)) s
5 118 M
(;;; Type testers like pair? are just normal propagators.) s
5 105 M
(;;; Accessors are just constructors in reverse, like this:) s
5 92 M
(#;) s
5 79 M
( \(define-propagator \(p:car pair-cell output\)) s
5 66 M
(   \(p:cons output nothing pair-cell\)\)) s
5 40 M
(;;; Expression-style accessors offer an opportunity for a performance) s
5 27 M
(;;; hack: if the cell holding the accessed item is already present in) s
5 14 M
(;;; the compound when the accessor propagator is constructed \(and no) s
_R
S
%%Page: (2) 76
%%BeginPageSetup
_S
18 36 translate
/pagenum 2 def
/fname (core/carrying-cells.scm) def
/fdir (core/) def
/ftail (carrying-cells.scm) def
% User defined strings:
/fmodstr (Tue Apr 26 17:56:09 2011) def
/pagenumstr (2) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 690 M
(;;; partialness of information intervenes\), then it's ok to just grab) s
5 677 M
(;;; that cell and return it.  The version for CAR looks like this:) s
5 664 M
(#|) s
5 651 M
( \(define \(e:carry-car pair-cell\)) s
5 638 M
(   \(if \(and \(cell? pair-cell\)) s
5 625 M
(            \(pair? \(content pair-cell\)\)) s
5 612 M
(            \(cell? \(car \(content pair-cell\)\)\)\)) s
5 599 M
(       \(car \(content pair-cell\)\)) s
5 586 M
(       \(%e:carry-car pair-cell\)\)\)) s
5 573 M
(|#) s
5 560 M
(;;; The general version looks like this:) s
5 534 M
(\(define \(early-access-hack type? accessor fallback\)) s
5 521 M
(  \(propagator-constructor!) s
5 508 M
(   \(lambda \(structure-cell\)) s
5 495 M
(     \(if \(and \(cell? structure-cell\)) s
5 482 M
(              \(type? \(content structure-cell\)\)) s
5 469 M
(              \(cell? \(accessor \(content structure-cell\)\)\)\)) s
5 456 M
(         \(accessor \(content structure-cell\)\)) s
5 443 M
(         \(fallback structure-cell\)\)\)\)\)) s
5 417 M
(;;; To actually define those propagators, you would write) s
5 404 M
(#|) s
5 391 M
( \(define-cell p:cons \(function->cell-carrier-constructor cons\)\)) s
5 378 M
( \(define-cell e:cons \(expression-style-variant p:cons\)\)) s
5 365 M
( \(propagatify pair?\)) s
5 352 M
( \(define-propagator \(p:car pair-cell output\)) s
5 339 M
(   \(p:cons output nothing pair-cell\)\)) s
5 326 M
( \(define-propagator \(p:cdr pair-cell output\)) s
5 313 M
(   \(p:cons nothing output pair-cell\)\)) s
5 300 M
( \(define-cell e:car \(early-access-hack pair? car e:car\)\)) s
5 287 M
( \(define-cell e:cdr \(early-access-hack pair? cdr e:cdr\)\)) s
5 274 M
(|#) s
5 248 M
(;;; That's what the define-propagator-structure macro is for.) s
5 222 M
(\(define-syntax define-structure-propagators) s
5 209 M
(  \(rsc-macro-transformer) s
5 196 M
(   \(lambda \(form defn-env\)) s
5 183 M
(     \(let* \(\(type-name \(cadr form\)\)) s
5 170 M
(            \(constructor-name \(caddr form\)\)) s
5 157 M
(            \(defined-constructor-names) s
5 144 M
(              \(propagator-naming-convention constructor-name\)\)) s
5 131 M
(            \(accessor-names \(cdddr form\)\)) s
5 118 M
(            \(accessor-count \(length accessor-names\)\)\)) s
5 105 M
(       \(define \(attach-% name\)) s
5 92 M
(         \(symbol '% name\)\)) s
5 79 M
(       \(define \(accessor-definition hidden-name name index\)) s
5 66 M
(         \(define \(output-reference\)) s
5 53 M
(           \(let \(\(answer \(make-vector accessor-count 'nothing\)\)\)) s
5 40 M
(             \(vector-set! answer index 'output\)) s
5 27 M
(             \(vector->list answer\)\)\)) s
5 14 M
(         `\(define-propagator \(,hidden-name structure-cell output\)) s
_R
S
%%Page: (3) 77
%%BeginPageSetup
_S
18 36 translate
/pagenum 3 def
/fname (core/carrying-cells.scm) def
/fdir (core/) def
/ftail (carrying-cells.scm) def
% User defined strings:
/fmodstr (Tue Apr 26 17:56:09 2011) def
/pagenumstr (3) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 690 M
(            \(,\(car defined-constructor-names\)) s
5 677 M
(             ,@\(output-reference\)) s
5 664 M
(             structure-cell\)\)\)) s
5 651 M
(       \(define \(early-access-hack-definition hidden-name name\)) s
5 638 M
(         \(let \(\(expression-variant \(cadr \(propagator-naming-convention name\)\)\)) s
5 625 M
(\)) s
5 612 M
(           `\(define-cell ,expression-variant) s
5 599 M
(              \(early-access-hack) s
5 586 M
(               ,type-name ,name ,\(cadr \(propagator-naming-convention hidden-na) s
5 573 M
(me\)\)\)\)\)\)) s
5 560 M
(       \(define \(name-fix-definition hidden-name name\)) s
5 547 M
(         `\(define-cell ,\(car \(propagator-naming-convention name\)\)) s
5 534 M
(            ,\(car \(propagator-naming-convention hidden-name\)\)\)\)) s
5 521 M
(       `\(begin) s
5 508 M
(          \(propagatify ,type-name\)) s
5 495 M
(          \(define-by-diagram-variant ,defined-constructor-names) s
5 482 M
(            \(function->cell-carrier-constructor ,constructor-name\)\)) s
5 469 M
(          ,@\(map accessor-definition) s
5 456 M
(                 \(map attach-% accessor-names\)) s
5 443 M
(                 accessor-names) s
5 430 M
(                 \(iota accessor-count\)\)) s
5 417 M
(          ,@\(map name-fix-definition) s
5 404 M
(                 \(map attach-% accessor-names\)) s
5 391 M
(                 accessor-names\)) s
5 378 M
(          ,@\(map early-access-hack-definition) s
5 365 M
(                 \(map attach-% accessor-names\)) s
5 352 M
(                 accessor-names\)\)\)\)\)\)) s
5 326 M
(\(define-structure-propagators pair? cons car cdr\)) s
5 300 M
(;;; Here are the old names of these until I sweep them out of the code) s
5 287 M
(\(define p:carry-cons  p:cons\)) s
5 274 M
(\(define e:carry-cons  e:cons\)) s
5 261 M
(\(define p:carry-pair? p:pair?\)) s
5 248 M
(\(define e:carry-pair? e:pair?\)) s
5 235 M
(\(define p:carry-car   p:car\)) s
5 222 M
(\(define e:carry-car   e:car\)) s
5 209 M
(\(define p:carry-cdr   p:cdr\)) s
5 196 M
(\(define e:carry-cdr   e:cdr\)) s
5 170 M
(;;; To make lists out of conses, we need empty lists too.) s
5 157 M
(\(propagatify null?\)) s
5 144 M
(\(define p:carry-null? p:null?\)) s
5 131 M
(\(define e:carry-null? e:null?\)) s
5 105 M
(;;; These guys are really the primitive container devices, from which) s
5 92 M
(;;; everything else can be made.) s
5 79 M
(\(define-cell p:deposit \(function->cell-carrier-constructor identity\)\)) s
5 66 M
(\(define-cell e:deposit \(expression-style-variant p:deposit\)\)) s
5 53 M
(\(define-propagator \(p:examine place cell\)) s
5 40 M
(  \(p:deposit cell place\)\)) s
5 27 M
(\(define-cell e:examine) s
5 14 M
(  \(early-access-hack cell? identity e:examine\)\)) s
_R
S
%%Page: (4) 78
%%BeginPageSetup
_S
18 36 translate
/pagenum 4 def
/fname (core/carrying-cells.scm) def
/fdir (core/) def
/ftail (carrying-cells.scm) def
% User defined strings:
/fmodstr (Tue Apr 26 17:56:09 2011) def
/pagenumstr (4) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 677 M
(\(define-syntax define-propagator-structure) s
5 664 M
(  \(syntax-rules \(\)) s
5 651 M
(    \(\(define-propagator-structure arg ...\)) s
5 638 M
(     \(begin) s
5 625 M
(       \(define-structure-propagators arg ...\)) s
5 612 M
(       \(slotful-information-type arg ...\)\)\)\)\)) s
5 586 M
(\(define-propagator \(c:pair? thing truth\)) s
5 573 M
(  \(p:pair? thing truth\)) s
5 560 M
(  \(p:switch truth \(cons nothing nothing\) thing\)\)) s
5 534 M
(\(define-propagator \(c:null? thing truth\)) s
5 521 M
(  \(p:null? thing truth\)) s
5 508 M
(  \(p:switch truth '\(\) thing\)\)) s
_R
S
%%Page: (1) 79
%%BeginPageSetup
_S
18 36 translate
/pagenum 1 def
/fname (core/intervals.scm) def
/fdir (core/) def
/ftail (intervals.scm) def
% User defined strings:
/fmodstr (Sun Mar 27 19:26:53 2011) def
/pagenumstr (1) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 690 M
(;;; ----------------------------------------------------------------------) s
5 677 M
(;;; Copyright 2009 Massachusetts Institute of Technology.) s
5 664 M
(;;; ----------------------------------------------------------------------) s
5 651 M
(;;; This file is part of Propagator Network Prototype.) s
5 638 M
(;;; ) s
5 625 M
(;;; Propagator Network Prototype is free software; you can) s
5 612 M
(;;; redistribute it and/or modify it under the terms of the GNU) s
5 599 M
(;;; General Public License as published by the Free Software) s
5 586 M
(;;; Foundation, either version 3 of the License, or \(at your option\)) s
5 573 M
(;;; any later version.) s
5 560 M
(;;; ) s
5 547 M
(;;; Propagator Network Prototype is distributed in the hope that it) s
5 534 M
(;;; will be useful, but WITHOUT ANY WARRANTY; without even the implied) s
5 521 M
(;;; warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.) s
5 508 M
(;;; See the GNU General Public License for more details.) s
5 495 M
(;;; ) s
5 482 M
(;;; You should have received a copy of the GNU General Public License) s
5 469 M
(;;; along with Propagator Network Prototype.  If not, see) s
5 456 M
(;;; <http://www.gnu.org/licenses/>.) s
5 443 M
(;;; ----------------------------------------------------------------------) s
5 417 M
(\(declare \(usual-integrations make-cell cell?\)\)) s
5 391 M
(#|) s
5 378 M
(\(define-structure) s
5 365 M
(  \(%interval \(safe-accessors #t\)) s
5 352 M
(             \(print-procedure) s
5 339 M
(              \(simple-unparser-method) s
5 326 M
(               'interval) s
5 313 M
(               \(lambda \(interval\)) s
5 300 M
(                 \(list \(interval-low interval\)) s
5 287 M
(                       \(interval-high interval\)\)\)\)\)\)) s
5 274 M
(  low high\)) s
5 261 M
(|#) s
5 235 M
(\(define \(interval-printer state object\)) s
5 222 M
(  \(if \(empty-interval? object\)) s
5 209 M
(      \(with-current-unparser-state state) s
5 196 M
(        \(lambda \(port\)) s
5 183 M
(          \(display "#[contradictory-interval " port\)) s
5 170 M
(          \(write \(interval-low object\) port\)) s
5 157 M
(          \(display " " port\)) s
5 144 M
(          \(write \(interval-high object\) port\)) s
5 131 M
(          \(display "]" port\)\)\)) s
5 118 M
(      \(with-current-unparser-state state) s
5 105 M
(        \(lambda \(port\)) s
5 92 M
(          \(display "#[interval " port\)) s
5 79 M
(          \(write \(interval-low object\) port\)) s
5 66 M
(          \(display " " port\)) s
5 53 M
(          \(write \(interval-high object\) port\)) s
5 40 M
(          \(display "]" port\)\)\)\)\)) s
5 14 M
(\(define-structure) s
_R
S
%%Page: (2) 80
%%BeginPageSetup
_S
18 36 translate
/pagenum 2 def
/fname (core/intervals.scm) def
/fdir (core/) def
/ftail (intervals.scm) def
% User defined strings:
/fmodstr (Sun Mar 27 19:26:53 2011) def
/pagenumstr (2) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 690 M
(  \(%interval \(safe-accessors #t\)) s
5 677 M
(             \(print-procedure interval-printer\)\)) s
5 664 M
(  low high\)) s
5 638 M
(\(declare-type-tester %interval? rtd:%interval\)) s
5 625 M
(\(declare-coercion-target %interval\)) s
5 612 M
(\(declare-coercion <number> ->%interval \(lambda \(x\) \(make-%interval x x\)\)\)) s
5 586 M
(\(define \(%interval-> int\)) s
5 573 M
(  \(if \(= \(interval-low int\) \(interval-high int\)\)) s
5 560 M
(      \(interval-low int\)) s
5 547 M
(      int\)\)) s
5 521 M
(\(define \(interval? x\)) s
5 508 M
(  \(or \(%interval? x\)) s
5 495 M
(      \(%interval-able? x\)\)\)) s
5 469 M
(\(define \(interval-low thing\)) s
5 456 M
(  \(%interval-low \(->%interval thing\)\)\)) s
5 430 M
(\(define \(interval-high thing\)) s
5 417 M
(  \(%interval-high \(->%interval thing\)\)\)) s
5 391 M
(\(define \(make-interval low high\)) s
5 378 M
(  \(%interval-> \(make-%interval low high\)\)\)) s
5 339 M
(\(define \(interval-equal? int1 int2\)) s
5 326 M
(  \(and \(= \(interval-low int1\) \(interval-low int2\)\)) s
5 313 M
(       \(= \(interval-high int1\) \(interval-high int2\)\)\)\)) s
5 287 M
(\(define \(add-interval x y\)) s
5 274 M
(  \(make-interval \(+ \(interval-low x\) \(interval-low y\)\)) s
5 261 M
(                 \(+ \(interval-high x\) \(interval-high y\)\)\)\)) s
5 235 M
(\(define \(sub-interval x y\)) s
5 222 M
(  \(make-interval \(- \(interval-low x\) \(interval-high y\)\)) s
5 209 M
(                 \(- \(interval-high x\) \(interval-low y\)\)\)\)) s
5 183 M
(\(define \(mul-interval x y\)) s
5 170 M
(  \(let \(\(p1 \(* \(interval-low x\)  \(interval-low y\)\)\)) s
5 157 M
(        \(p2 \(* \(interval-low x\)  \(interval-high y\)\)\)) s
5 144 M
(        \(p3 \(* \(interval-high x\) \(interval-low y\)\)\)) s
5 131 M
(        \(p4 \(* \(interval-high x\) \(interval-high y\)\)\)\)) s
5 118 M
(    \(make-interval \(min p1 p2 p3 p4\)) s
5 105 M
(                   \(max p1 p2 p3 p4\)\)\)\)) s
5 79 M
(\(define *error-on-zero-interval-division* #f\)) s
5 53 M
(\(define \(div-interval x y\)) s
5 40 M
(  \(if \(<= \(interval-low y\) 0 \(interval-high y\)\)) s
5 27 M
(      \(if *error-on-zero-interval-division*) s
5 14 M
(          \(error "Cannot divide by interval spanning 0" x y\)) s
_R
S
%%Page: (3) 81
%%BeginPageSetup
_S
18 36 translate
/pagenum 3 def
/fname (core/intervals.scm) def
/fdir (core/) def
/ftail (intervals.scm) def
% User defined strings:
/fmodstr (Sun Mar 27 19:26:53 2011) def
/pagenumstr (3) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 690 M
(          nothing\)) s
5 677 M
(      \(mul-interval x) s
5 664 M
(                    \(make-interval \(/ 1 \(interval-high y\)\)) s
5 651 M
(                                   \(/ 1 \(interval-low y\)\)\)\)\)\)) s
5 625 M
(\(define \(square-interval x\)) s
5 612 M
(  \(make-interval \(square \(interval-low x\)\)) s
5 599 M
(                 \(square \(interval-high x\)\)\)\)) s
5 573 M
(\(define \(sqrt-interval x\)) s
5 560 M
(  \(make-interval \(sqrt \(interval-low x\)\)) s
5 547 M
(                 \(sqrt \(interval-high x\)\)\)\)) s
5 521 M
(\(define \(log-interval x\)) s
5 508 M
(  \(make-interval \(log \(interval-low x\)\)) s
5 495 M
(                 \(log \(interval-high x\)\)\)\)) s
5 469 M
(\(define \(exp-interval x\)) s
5 456 M
(  \(make-interval \(exp \(interval-low x\)\)) s
5 443 M
(                 \(exp \(interval-high x\)\)\)\)) s
5 417 M
(\(define \(empty-interval? x\)) s
5 404 M
(  \(> \(interval-low x\) \(interval-high x\)\)\)) s
5 378 M
(#| ) s
5 365 M
(;;; This makes a floating-point disaster...  UGH!) s
5 352 M
(;;; MERGE does not consider intervals differing by roundoff to be EQUAL.) s
5 326 M
(\(define \(intersect-intervals x y\)) s
5 313 M
(  \(define \(exactness-max x y\)) s
5 300 M
(    \(if \(>= x y\) x y\)\)) s
5 287 M
(  \(define \(exactness-min x y\)) s
5 274 M
(    \(if \(<= x y\) x y\)\)) s
5 261 M
(  \(make-interval) s
5 248 M
(   \(exactness-max \(interval-low x\) \(interval-low y\)\)) s
5 235 M
(   \(exactness-min \(interval-high x\) \(interval-high y\)\)\)\)) s
5 222 M
(|#) s
5 196 M
(\(define \(intersect-intervals x y\)) s
5 183 M
(  \(define \(exactness-max x y\)) s
5 170 M
(    \(if \(or \(num=? x y\) \(> x y\)\) x y\)\)) s
5 157 M
(  \(define \(exactness-min x y\)) s
5 144 M
(    \(if \(or \(num=? x y\) \(< x y\)\) x y\)\)) s
5 131 M
(  \(make-interval) s
5 118 M
(   \(exactness-max \(interval-low x\) \(interval-low y\)\)) s
5 105 M
(   \(exactness-min \(interval-high x\) \(interval-high y\)\)\)\)) s
5 79 M
(;; This differs from interval-equal? because is has to be monotonic) s
5 66 M
(;; with respect to the intervals shrinking.) s
5 53 M
(\(define \(=-interval x y\)) s
5 40 M
(  \(or \(= \(interval-low x\) \(interval-high x\)) s
5 27 M
(         \(interval-low y\) \(interval-high y\)\)) s
5 14 M
(      \(and \(not \(empty-interval? \(intersect-intervals x y\)\)\)) s
_R
S
%%Page: (4) 82
%%BeginPageSetup
_S
18 36 translate
/pagenum 4 def
/fname (core/intervals.scm) def
/fdir (core/) def
/ftail (intervals.scm) def
% User defined strings:
/fmodstr (Sun Mar 27 19:26:53 2011) def
/pagenumstr (4) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 690 M
(           nothing\)\)\)) s
5 664 M
(\(define \(<-interval x y\)) s
5 651 M
(  \(or \(< \(interval-high x\) \(interval-low y\)\)) s
5 638 M
(      \(and \(< \(interval-low x\) \(interval-high y\)\)) s
5 625 M
(           nothing\)\)\)) s
5 599 M
(\(define \(<=-interval x y\)) s
5 586 M
(  \(or \(<= \(interval-high x\) \(interval-low y\)\)) s
5 573 M
(      \(and \(<= \(interval-low x\) \(interval-high y\)\)) s
5 560 M
(           nothing\)\)\)) s
5 534 M
(\(define \(>-interval x y\)) s
5 521 M
(  \(or \(> \(interval-low x\) \(interval-high y\)\)) s
5 508 M
(      \(and \(> \(interval-high x\) \(interval-low y\)\)) s
5 495 M
(           nothing\)\)\)) s
5 469 M
(\(define \(>=-interval x y\)) s
5 456 M
(  \(or \(>= \(interval-low x\) \(interval-high y\)\)) s
5 443 M
(      \(and \(>= \(interval-high x\) \(interval-low y\)\)) s
5 430 M
(           nothing\)\)\)) s
5 404 M
(\(defhandler-coercing generic-+ add-interval ->%interval\)) s
5 391 M
(\(defhandler-coercing generic-- sub-interval ->%interval\)) s
5 378 M
(\(defhandler-coercing generic-* mul-interval ->%interval\)) s
5 365 M
(\(defhandler-coercing generic-/ div-interval ->%interval\)) s
5 339 M
(\(defhandler-coercing generic-= =-interval ->%interval\)) s
5 326 M
(\(defhandler-coercing generic-< <-interval ->%interval\)) s
5 313 M
(\(defhandler-coercing generic-<= <=-interval ->%interval\)) s
5 300 M
(\(defhandler-coercing generic-> >-interval ->%interval\)) s
5 287 M
(\(defhandler-coercing generic->= >=-interval ->%interval\)) s
5 261 M
(\(defhandler generic-square square-interval %interval?\)) s
5 248 M
(\(defhandler generic-sqrt sqrt-interval %interval?\)) s
5 222 M
(\(defhandler generic-log log-interval %interval?\)) s
5 209 M
(\(defhandler generic-exp exp-interval %interval?\)) s
5 183 M
(\(defhandler-coercing merge intersect-intervals ->%interval\)) s
5 170 M
(\(defhandler-coercing equivalent? interval-equal? ->%interval\)) s
5 144 M
(\(defhandler contradictory? empty-interval? %interval?\)) s
5 105 M
(\(define \(interval-non-zero? x\)) s
5 92 M
(  \(and \(interval? x\)) s
5 79 M
(       \(or \(< 0 \(interval-low x\)\) \(> 0 \(interval-high x\)\)\)\)\)) s
5 66 M
(\(declare-explicit-guard interval-non-zero? \(guard rtd:%interval interval-non-z) s
5 53 M
(ero?\)\)) s
5 27 M
(\(defhandler generic-/ binary-contradiction) s
5 14 M
(            interval-non-zero? numerical-zero?\)) s
_R
S
%%Page: (5) 83
%%BeginPageSetup
_S
18 36 translate
/pagenum 5 def
/fname (core/intervals.scm) def
/fdir (core/) def
/ftail (intervals.scm) def
% User defined strings:
/fmodstr (Sun Mar 27 19:26:53 2011) def
/pagenumstr (5) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 677 M
(\(define \(interval-contains-zero? x\)) s
5 664 M
(  \(and \(interval? x\)) s
5 651 M
(       \(and \(<= \(interval-low x\) 0\) \(>= \(interval-high x\) 0\)\)\)\)) s
5 638 M
(\(declare-explicit-guard interval-contains-zero? \(guard rtd:%interval interval-) s
5 625 M
(contains-zero?\)\)) s
5 612 M
(  ) s
5 599 M
(\(defhandler generic-/ binary-nothing) s
5 586 M
(            interval-contains-zero? numerical-zero?\)) s
_R
S
%%Page: (-) 84
S
%%Page: (1) 85
%%BeginPageSetup
_S
18 36 translate
/pagenum 1 def
/fname (core/premises.scm) def
/fdir (core/) def
/ftail (premises.scm) def
% User defined strings:
/fmodstr (Tue Mar 08 10:43:50 2011) def
/pagenumstr (1) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 690 M
(;;; ----------------------------------------------------------------------) s
5 677 M
(;;; Copyright 2009 Massachusetts Institute of Technology.) s
5 664 M
(;;; ----------------------------------------------------------------------) s
5 651 M
(;;; This file is part of Propagator Network Prototype.) s
5 638 M
(;;; ) s
5 625 M
(;;; Propagator Network Prototype is free software; you can) s
5 612 M
(;;; redistribute it and/or modify it under the terms of the GNU) s
5 599 M
(;;; General Public License as published by the Free Software) s
5 586 M
(;;; Foundation, either version 3 of the License, or \(at your option\)) s
5 573 M
(;;; any later version.) s
5 560 M
(;;; ) s
5 547 M
(;;; Propagator Network Prototype is distributed in the hope that it) s
5 534 M
(;;; will be useful, but WITHOUT ANY WARRANTY; without even the implied) s
5 521 M
(;;; warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.) s
5 508 M
(;;; See the GNU General Public License for more details.) s
5 495 M
(;;; ) s
5 482 M
(;;; You should have received a copy of the GNU General Public License) s
5 469 M
(;;; along with Propagator Network Prototype.  If not, see) s
5 456 M
(;;; <http://www.gnu.org/licenses/>.) s
5 443 M
(;;; ----------------------------------------------------------------------) s
5 417 M
(\(declare \(usual-integrations make-cell cell?\)\)) s
5 391 M
(\(define \(hypothetical-printer state object\)) s
5 378 M
(  \(with-current-unparser-state state) s
5 365 M
(    \(lambda \(port\)) s
5 352 M
(      \(write `\(hypothetical) s
5 339 M
(               ,\(hash object\)) s
5 326 M
(               ,\(hypothetical-sign object\)) s
5 313 M
(               ,\(if \(premise-in? object\) 'in 'out\)) s
5 300 M
(               ,@\(name-stack \(hypothetical-cell object\)\)\)) s
5 287 M
(          port\)\)\)\)) s
5 261 M
(\(define-structure) s
5 248 M
(  \(hypothetical \(type vector\) \(named 'hypothetical\)) s
5 235 M
(                ;;\(print-procedure #f\)) s
5 222 M
(                \(print-procedure hypothetical-printer\)) s
5 209 M
(                \(safe-accessors #t\)\)) s
5 196 M
(  sign) s
5 183 M
(  cell\)) s
5 157 M
(\(define *worldview-number* 0\)) s
5 144 M
(\(define *premise-outness* \(make-eq-hash-table\)\)) s
5 118 M
(\(define \(premise-in? premise\)) s
5 105 M
(  \(not \(hash-table/get *premise-outness* premise #f\)\)\)) s
5 79 M
(\(define \(mark-premise-in! premise\)) s
5 66 M
(  \(hash-table/remove! *premise-outness* premise\)\)) s
5 40 M
(\(define \(mark-premise-out! premise\)) s
5 27 M
(  \(hash-table/put! *premise-outness* premise #t\)\)) s
_R
S
%%Page: (2) 86
%%BeginPageSetup
_S
18 36 translate
/pagenum 2 def
/fname (core/premises.scm) def
/fdir (core/) def
/ftail (premises.scm) def
% User defined strings:
/fmodstr (Tue Mar 08 10:43:50 2011) def
/pagenumstr (2) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 690 M
(\(define *premise-nogoods* \(make-eq-hash-table\)\)) s
5 664 M
(\(define \(premise-nogoods premise\)) s
5 651 M
(  \(hash-table/get *premise-nogoods* premise '\(\)\)\)) s
5 625 M
(\(define \(set-premise-nogoods! premise nogoods\)) s
5 612 M
(  \(hash-table/put! *premise-nogoods* premise nogoods\)\)) s
5 586 M
(\(define \(reset-premise-info!\)) s
5 573 M
(  \(set! *worldview-number* 0\)) s
5 560 M
(  \(set! *premise-outness* \(make-eq-hash-table\)\)) s
5 547 M
(  \(set! *premise-nogoods* \(make-eq-hash-table\)\)\)) s
_R
S
%%Page: (3) 87
%%BeginPageSetup
_S
18 36 translate
/pagenum 3 def
/fname (core/premises.scm) def
/fdir (core/) def
/ftail (premises.scm) def
% User defined strings:
/fmodstr (Tue Mar 08 10:43:50 2011) def
/pagenumstr (3) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 677 M
(;;; We also need to arrange for the premise states to be reset for) s
5 664 M
(;;; every new example.  Better creativity having failed me, I will) s
5 651 M
(;;; hang that action onto the initialize-scheduler procedure.) s
5 638 M
(;;; TODO Can one do better than redefining initialize-scheduler?) s
5 625 M
(\(define initialize-scheduler) s
5 612 M
(  \(let \(\(initialize-scheduler initialize-scheduler\)\)) s
5 599 M
(    \(lambda \(\)) s
5 586 M
(      \(initialize-scheduler\)) s
5 573 M
(      \(reset-premise-info!\)\)\)\)) s
5 547 M
(\(define with-independent-scheduler) s
5 534 M
(  \(let \(\(with-independent-scheduler with-independent-scheduler\)\)) s
5 521 M
(    \(lambda args) s
5 508 M
(      \(fluid-let \(\(*worldview-number* #f\)) s
5 495 M
(                  \(*premise-outness* #f\)) s
5 482 M
(                  \(*premise-nogoods* #f\)\)) s
5 469 M
(        \(apply with-independent-scheduler args\)\)\)\)\)) s
5 443 M
(\(define \(disbelieving-func premise thunk\)) s
5 430 M
(  \(let \(\(old-belief \(premise-in? premise\)\)\)) s
5 417 M
(    \(kick-out! premise\)) s
5 404 M
(    \(let \(\(answer \(thunk\)\)\)) s
5 391 M
(      \(if old-belief) s
5 378 M
(          \(bring-in! premise\)) s
5 365 M
(          \(kick-out! premise\)\)) s
5 352 M
(      answer\)\)\)) s
5 326 M
(;; \(disbelieving premise body\)) s
5 313 M
(;;   Syntax that executes the given body in a dynamic environment) s
5 300 M
(;;   where the given premise is not believed.) s
5 287 M
(\(define-syntax disbelieving) s
5 274 M
(  \(syntax-rules \(\)) s
5 261 M
(    \(\(_ premise body ...\)) s
5 248 M
(     \(disbelieving-func premise \(lambda \(\) body ...\)\)\)\)\)) s
_R
S
%%Page: (-) 88
S
%%Page: (1) 89
%%BeginPageSetup
_S
18 36 translate
/pagenum 1 def
/fname (core/supported-values.scm) def
/fdir (core/) def
/ftail (supported-values.scm) def
% User defined strings:
/fmodstr (Sat Oct 22 14:26:12 2011) def
/pagenumstr (1) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 690 M
(;;; ----------------------------------------------------------------------) s
5 677 M
(;;; Copyright 2009 Massachusetts Institute of Technology.) s
5 664 M
(;;; ----------------------------------------------------------------------) s
5 651 M
(;;; This file is part of Propagator Network Prototype.) s
5 638 M
(;;; ) s
5 625 M
(;;; Propagator Network Prototype is free software; you can) s
5 612 M
(;;; redistribute it and/or modify it under the terms of the GNU) s
5 599 M
(;;; General Public License as published by the Free Software) s
5 586 M
(;;; Foundation, either version 3 of the License, or \(at your option\)) s
5 573 M
(;;; any later version.) s
5 560 M
(;;; ) s
5 547 M
(;;; Propagator Network Prototype is distributed in the hope that it) s
5 534 M
(;;; will be useful, but WITHOUT ANY WARRANTY; without even the implied) s
5 521 M
(;;; warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.) s
5 508 M
(;;; See the GNU General Public License for more details.) s
5 495 M
(;;; ) s
5 482 M
(;;; You should have received a copy of the GNU General Public License) s
5 469 M
(;;; along with Propagator Network Prototype.  If not, see) s
5 456 M
(;;; <http://www.gnu.org/licenses/>.) s
5 443 M
(;;; ----------------------------------------------------------------------) s
_R
S
%%Page: (2) 90
%%BeginPageSetup
_S
18 36 translate
/pagenum 2 def
/fname (core/supported-values.scm) def
/fdir (core/) def
/ftail (supported-values.scm) def
% User defined strings:
/fmodstr (Sat Oct 22 14:26:12 2011) def
/pagenumstr (2) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 677 M
(\(declare \(usual-integrations make-cell cell?\)\)) s
5 651 M
(\(define *depends-wallp* #f\)) s
5 625 M
(\(define \(depends-printer state object\)) s
5 612 M
(  \(with-current-unparser-state state) s
5 599 M
(    \(lambda \(port\)) s
5 586 M
(      \(display "#\(value=" port\)) s
5 573 M
(      \(write \(vector-ref object 1\) port\) ; Avoid checking the length) s
5 560 M
(      \(display ",\\n   premises=" port\)) s
5 547 M
(      \(write \(vector-ref object 2\) port\)) s
5 534 M
(      \(if \(>= \(vector-length object\) 4\)) s
5 521 M
(          \(begin) s
5 508 M
(            \(display ",\\n   informants=" port\)) s
5 495 M
(            \(write) s
5 482 M
(             \(map \(lambda \(inf\)) s
5 469 M
(                    \(if \(symbol? inf\)) s
5 456 M
(                        inf) s
5 443 M
(                        \(cons \(name inf\)) s
5 430 M
(                              \(map name) s
5 417 M
(                                   \(diagram-inputs inf\)\)\)\)\)) s
5 404 M
(                  \(vector-ref object 3\)\)) s
5 391 M
(             port\)\)\)) s
5 378 M
(      \(display "\)" port\)\)\)\)) s
5 352 M
(\(define-structure) s
5 339 M
( \(v&s \(named 'supported\) \(type vector\)) s
5 326 M
(      \(constructor %supported\)) s
5 313 M
(      \(print-procedure depends-printer\)) s
5 300 M
(      \(safe-accessors #t\)\)) s
5 287 M
( value support informants\)) s
5 261 M
(\(define *active-diagram* 'user\)) s
5 235 M
(\(define \(supported value depends #!optional informants\)) s
5 222 M
(  \(%supported value depends) s
5 209 M
(              \(if \(default-object? informants\)) s
5 196 M
(                  \(list *active-diagram*\)) s
5 183 M
(                  informants\)\)\)) s
5 157 M
(;;; Aliases) s
5 131 M
(\(define make-dependent-value supported\)) s
5 118 M
(\(define depends? v&s?\)) s
5 105 M
(\(define depends-value v&s-value\)) s
5 92 M
(\(define depends-premises v&s-support\)) s
5 79 M
(\(define depends-informants v&s-informants\)) s
5 53 M
(\(define contingent supported\)) s
5 40 M
(\(define contingent? v&s?\)) s
5 27 M
(\(define contingent-info v&s-value\)) s
5 14 M
(\(define contingent-premises v&s-support\)) s
_R
S
%%Page: (3) 91
%%BeginPageSetup
_S
18 36 translate
/pagenum 3 def
/fname (core/supported-values.scm) def
/fdir (core/) def
/ftail (supported-values.scm) def
% User defined strings:
/fmodstr (Sat Oct 22 14:26:12 2011) def
/pagenumstr (3) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 690 M
(\(define contingent-informants v&s-informants\)) s
5 664 M
(\(declare-coercion-target contingent) s
5 651 M
(                         \(lambda \(thing\)) s
5 638 M
(                           \(contingent thing '\(\) '\(\)\)\)\)) s
5 612 M
(\(declare-coercion <symbol> ->contingent\)) s
5 599 M
(\(declare-coercion <number> ->contingent\)) s
5 586 M
(\(declare-coercion <boolean> ->contingent\)) s
5 573 M
(\(declare-coercion rtd:%interval ->contingent\)) s
5 560 M
(\(declare-coercion propagator-constructor? ->contingent\)) s
5 547 M
(\(declare-coercion closure? ->contingent\)) s
5 534 M
(\(declare-coercion pair? ->contingent\)) s
5 508 M
(\(define \(more-informative-support? v&s1 v&s2\)) s
5 495 M
(  \(and \(not \(lset= eq? \(v&s-support v&s1\) \(v&s-support v&s2\)\)\)) s
5 482 M
(       \(lset<= eq? \(v&s-support v&s1\) \(v&s-support v&s2\)\)\)\)) s
5 456 M
(\(define \(merge-supports . v&ss\)) s
5 443 M
(  \(apply lset-union eq? \(map v&s-support v&ss\)\)\)) s
_R
S
%%Page: (4) 92
%%BeginPageSetup
_S
18 36 translate
/pagenum 4 def
/fname (core/supported-values.scm) def
/fdir (core/) def
/ftail (supported-values.scm) def
% User defined strings:
/fmodstr (Sat Oct 22 14:26:12 2011) def
/pagenumstr (4) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 677 M
(\(define \(v&s-merge v&s1 v&s2\)) s
5 664 M
(  \(let* \(\(v&s1-value \(v&s-value v&s1\)\)) s
5 651 M
(         \(v&s2-value \(v&s-value v&s2\)\)) s
5 638 M
(         \(value-merge+effects \(->effectful \(merge v&s1-value v&s2-value\)\)\)\)) s
5 625 M
(    \(let \(\(value-merge \(effectful-info value-merge+effects\)\)) s
5 612 M
(          \(value-effects \(effectful-effects value-merge+effects\)\)\)) s
5 599 M
(      \(effectful->) s
5 586 M
(       \(make-effectful) s
5 573 M
(        \(cond \(\(eq? value-merge v&s1-value\)) s
5 560 M
(               \(if \(implies? v&s2-value value-merge\)) s
5 547 M
(                   ;; Confirmation of existing information) s
5 534 M
(                   \(if \(more-informative-support? v&s2 v&s1\)) s
5 521 M
(                       v&s2) s
5 508 M
(                       v&s1\)) s
5 495 M
(                   ;; New information is not interesting) s
5 482 M
(                   v&s1\)\)) s
5 469 M
(              \(\(eq? value-merge v&s2-value\)) s
5 456 M
(               ;; New information overrides old information) s
5 443 M
(               v&s2\)) s
5 430 M
(              \(else) s
5 417 M
(               ;; Interesting merge, need both provenances) s
5 404 M
(               \(supported value-merge) s
5 391 M
(                          \(merge-supports v&s1 v&s2\)) s
5 378 M
(                          \(lset-union eq?) s
5 365 M
(                                      \(v&s-informants v&s1\)) s
5 352 M
(                                      \(v&s-informants v&s2\)\)\)\)\)) s
5 339 M
(        \(map \(attach-support-to-effect \(merge-supports v&s1 v&s2\)\)) s
5 326 M
(             value-effects\)\)\)\)\)\)) s
5 300 M
(\(define \(\(attach-support-to-effect support\) effect\)) s
5 287 M
(  \(\(generic-attach-premises effect\) support\)\)) s
5 261 M
(\(define generic-attach-premises \(make-generic-operator 1 'attach-support\)\)) s
5 235 M
(\(defhandler generic-attach-premises) s
5 222 M
(  \(lambda \(effect\)) s
5 209 M
(    \(lambda \(support\)) s
5 196 M
(      \(make-cell-join-effect) s
5 183 M
(       \(cell-join-effect-cell1 effect\)) s
5 170 M
(       \(cell-join-effect-cell2 effect\)) s
5 157 M
(       \(generic-flatten ;; TODO Do I need to do this by flattening?) s
5 144 M
(        \(make-tms ;; TODO Get rid of this forward reference) s
5 131 M
(         \(supported) s
5 118 M
(          \(cell-join-effect-control effect\)) s
5 105 M
(          support\)\)\)\)\)\)) s
5 92 M
(  cell-join-effect?\)) s
5 66 M
(\(defhandler-coercing merge v&s-merge ->contingent\)) s
5 40 M
(\(define \(v&s-equivalent? v&s1 v&s2\)) s
5 27 M
(  \(and \(lset= eq? \(v&s-support v&s1\) \(v&s-support v&s2\)\)) s
5 14 M
(       \(equivalent? \(v&s-value v&s1\) \(v&s-value v&s2\)\)\)\)) s
_R
S
%%Page: (5) 93
%%BeginPageSetup
_S
18 36 translate
/pagenum 5 def
/fname (core/supported-values.scm) def
/fdir (core/) def
/ftail (supported-values.scm) def
% User defined strings:
/fmodstr (Sat Oct 22 14:26:12 2011) def
/pagenumstr (5) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 677 M
(\(defhandler-coercing equivalent? v&s-equivalent? ->contingent\)) s
5 651 M
(\(defhandler contradictory?) s
5 638 M
( \(lambda \(v&s\) \(contradictory? \(v&s-value v&s\)\)\)) s
5 625 M
( v&s?\)) s
_R
S
%%Page: (6) 94
%%BeginPageSetup
_S
18 36 translate
/pagenum 6 def
/fname (core/supported-values.scm) def
/fdir (core/) def
/ftail (supported-values.scm) def
% User defined strings:
/fmodstr (Sat Oct 22 14:26:12 2011) def
/pagenumstr (6) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 677 M
(\(define \(v&s-> v&s\)) s
5 664 M
(  \(if \(nothing? \(v&s-value v&s\)\)) s
5 651 M
(      nothing) s
5 638 M
(      v&s\)\)) s
5 612 M
(\(define \(v&s-binary-map v&s1 v&s2\)) s
5 599 M
(  \(lambda \(f\)) s
5 586 M
(    \(v&s->) s
5 573 M
(     \(supported) s
5 560 M
(      \(f \(v&s-value v&s1\) \(v&s-value v&s2\)\)) s
5 547 M
(      \(merge-supports v&s1 v&s2\)\)\)\)\)) s
5 521 M
(\(defhandler-coercing binary-map v&s-binary-map ->contingent\)) s
5 495 M
(\(defhandler generic-unpack) s
5 482 M
(  \(lambda \(v&s function\)) s
5 469 M
(    \(supported) s
5 456 M
(     \(generic-bind \(v&s-value v&s\) function\)) s
5 443 M
(     \(v&s-support v&s\)\)\)) s
5 430 M
(  v&s? any?\)) s
5 404 M
(;;; This particular predicate dispatch system doesn't actually do ) s
5 391 M
(;;; predicate specificity computations.  However, defining the most) s
5 378 M
(;;; general handler first has the desired effect.) s
5 365 M
(\(defhandler generic-flatten) s
5 352 M
(  \(lambda \(v&s\) v&s\)) s
5 339 M
(  v&s?\)) s
5 313 M
(\(defhandler generic-flatten) s
5 300 M
(  \(lambda \(v&s\) nothing\)) s
5 287 M
(  \(lambda \(thing\)) s
5 274 M
(    \(and \(v&s? thing\)) s
5 261 M
(         \(nothing? \(v&s-value thing\)\)\)\)\)) s
5 235 M
(\(defhandler generic-flatten) s
5 222 M
(  \(lambda \(v&s\)) s
5 209 M
(    \(generic-flatten) s
5 196 M
(     \(supported) s
5 183 M
(      \(v&s-value \(v&s-value v&s\)\)) s
5 170 M
(      \(merge-supports v&s \(v&s-value v&s\)\)\)\)\)) s
5 157 M
(  \(lambda \(thing\)) s
5 144 M
(    \(and \(v&s? thing\) \(v&s? \(v&s-value thing\)\)\)\)\)) s
_R
S
%%Page: (1) 95
%%BeginPageSetup
_S
18 36 translate
/pagenum 1 def
/fname (core/truth-maintenance.scm) def
/fdir (core/) def
/ftail (truth-maintenance.scm) def
% User defined strings:
/fmodstr (Mon Mar 28 10:23:46 2011) def
/pagenumstr (1) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 690 M
(;;; ----------------------------------------------------------------------) s
5 677 M
(;;; Copyright 2009 Massachusetts Institute of Technology.) s
5 664 M
(;;; ----------------------------------------------------------------------) s
5 651 M
(;;; This file is part of Propagator Network Prototype.) s
5 638 M
(;;; ) s
5 625 M
(;;; Propagator Network Prototype is free software; you can) s
5 612 M
(;;; redistribute it and/or modify it under the terms of the GNU) s
5 599 M
(;;; General Public License as published by the Free Software) s
5 586 M
(;;; Foundation, either version 3 of the License, or \(at your option\)) s
5 573 M
(;;; any later version.) s
5 560 M
(;;; ) s
5 547 M
(;;; Propagator Network Prototype is distributed in the hope that it) s
5 534 M
(;;; will be useful, but WITHOUT ANY WARRANTY; without even the implied) s
5 521 M
(;;; warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.) s
5 508 M
(;;; See the GNU General Public License for more details.) s
5 495 M
(;;; ) s
5 482 M
(;;; You should have received a copy of the GNU General Public License) s
5 469 M
(;;; along with Propagator Network Prototype.  If not, see) s
5 456 M
(;;; <http://www.gnu.org/licenses/>.) s
5 443 M
(;;; ----------------------------------------------------------------------) s
5 417 M
(\(declare \(usual-integrations make-cell cell?\)\)) s
5 391 M
(#|) s
5 378 M
(;;; This causes real trouble with pretty-printing) s
5 365 M
(\(define-structure) s
5 352 M
(  \(tms \(type vector\) \(named 'tms\)) s
5 339 M
(       \(constructor %make-tms\) \(print-procedure #f\)) s
5 326 M
(       \(safe-accessors #t\)\)) s
5 313 M
(  values\)) s
5 300 M
(|#) s
5 274 M
(\(define \(%make-tms values\)) s
5 261 M
(  \(vector 'tms values\)\)) s
5 235 M
(\(define \(tms? x\)) s
5 222 M
(  \(and \(vector? x\) \(eq? \(vector-ref x 0\) 'tms\)\)\)) s
5 196 M
(\(define \(tms-values tms\)) s
5 183 M
(  \(if \(not \(tms? tms\)\) \(error "Bad tms -- TMS-VALUES" tms\)\)) s
5 170 M
(  \(vector-ref tms 1\)\)) s
5 144 M
(\(define \(set-tms-values! tms new-values\)) s
5 131 M
(  \(if \(not \(tms? tms\)\) \(error "Bad tms -- SET-TMS-VALUES!" tms\)\)) s
5 118 M
(  \(vector-set! tms 1 new-values\)\)) s
5 79 M
(\(define \(make-tms arg\)) s
5 66 M
(  \(%make-tms \(listify arg\)\)\)) s
5 40 M
(;; Will be replaced by tms-merge in contradictions.scm) s
5 27 M
(\(define \(tms-merge tms1 tms2\)) s
5 14 M
(  \(let \(\(candidate \(tms-assimilate tms1 tms2\)\)\)) s
_R
S
%%Page: (2) 96
%%BeginPageSetup
_S
18 36 translate
/pagenum 2 def
/fname (core/truth-maintenance.scm) def
/fdir (core/) def
/ftail (truth-maintenance.scm) def
% User defined strings:
/fmodstr (Mon Mar 28 10:23:46 2011) def
/pagenumstr (2) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 690 M
(    \(effectful-bind \(strongest-consequence candidate\)) s
5 677 M
(      \(lambda \(consequence\)) s
5 664 M
(        \(tms-assimilate candidate consequence\)\)\)\)\)) s
5 638 M
(\(define \(tms-assimilate tms stuff\)) s
5 625 M
(  \(cond \(\(nothing? stuff\) tms\)) s
5 612 M
(        \(\(v&s? stuff\) \(tms-assimilate-one tms stuff\)\)) s
5 599 M
(        \(\(tms? stuff\)) s
5 586 M
(         \(fold-left tms-assimilate-one) s
5 573 M
(                    tms) s
5 560 M
(                    \(tms-values stuff\)\)\)) s
5 547 M
(        \(else \(error "This should never happen" stuff\)\)\)\)) s
5 521 M
(\(define \(subsumes? v&s1 v&s2\)) s
5 508 M
(  \(and \(lset<= eq? \(v&s-support v&s1\) \(v&s-support v&s2\)\)) s
5 495 M
(       \(implies? \(v&s-value v&s1\) \(v&s-value v&s2\)\)\)\)) s
_R
S
%%Page: (3) 97
%%BeginPageSetup
_S
18 36 translate
/pagenum 3 def
/fname (core/truth-maintenance.scm) def
/fdir (core/) def
/ftail (truth-maintenance.scm) def
% User defined strings:
/fmodstr (Mon Mar 28 10:23:46 2011) def
/pagenumstr (3) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 677 M
(\(define \(tms-assimilate-one tms v&s\)) s
5 664 M
(  \(if \(any \(lambda \(old-v&s\) \(subsumes? old-v&s v&s\)\)) s
5 651 M
(           \(tms-values tms\)\)) s
5 638 M
(      tms) s
5 625 M
(      \(let \(\(subsumed) s
5 612 M
(             \(filter \(lambda \(old-v&s\) \(subsumes? v&s old-v&s\)\)) s
5 599 M
(                     \(tms-values tms\)\)\)\)) s
5 586 M
(        \(make-tms) s
5 573 M
(         \(lset-adjoin eq?) s
5 560 M
(           \(lset-difference eq? \(tms-values tms\) subsumed\)) s
5 547 M
(           v&s\)\)\)\)\)) s
5 521 M
(\(define \(strongest-consequence tms\)) s
5 508 M
(  \(let \(\(cached \(cached-consequence tms\)\)\)) s
5 495 M
(    \(or cached) s
5 482 M
(        \(cache-consequence! tms \(compute-strongest-consequence tms\)\)\)\)\)) s
5 456 M
(\(define *consequence-cache* \(make-eq-hash-table\)\)) s
5 430 M
(\(define \(cached-consequence tms\)) s
5 417 M
(  \(let \(\(answer \(hash-table/get *consequence-cache* tms #f\)\)\)) s
5 404 M
(    \(and answer) s
5 391 M
(         \(= \(car answer\) *worldview-number*\)) s
5 378 M
(         \(cdr answer\)\)\)\)) s
5 352 M
(\(define \(cache-consequence! tms consequence\)) s
5 339 M
(  \(hash-table/put! *consequence-cache* tms) s
5 326 M
(   ;; Caching the data, not the effect \(if any\)) s
5 313 M
(   \(cons *worldview-number* \(effectful-info \(->effectful consequence\)\)\)\)) s
5 300 M
(  consequence\)) s
5 274 M
(\(define \(compute-strongest-consequence tms\)) s
5 261 M
(  \(let \(\(relevant-v&ss) s
5 248 M
(         \(filter v&s-believed? \(tms-values tms\)\)\)\)) s
5 235 M
(    \(merge* relevant-v&ss\)\)\)) s
5 209 M
(\(define \(v&s-believed? v&s\)) s
5 196 M
(  \(all-premises-in? \(v&s-support v&s\)\)\)) s
5 183 M
(\(define contingency-object-believed? v&s-believed?\)) s
5 157 M
(\(define \(all-premises-in? premise-list\)) s
5 144 M
(   \(every premise-in? premise-list\)\)) s
_R
S
%%Page: (4) 98
%%BeginPageSetup
_S
18 36 translate
/pagenum 4 def
/fname (core/truth-maintenance.scm) def
/fdir (core/) def
/ftail (truth-maintenance.scm) def
% User defined strings:
/fmodstr (Mon Mar 28 10:23:46 2011) def
/pagenumstr (4) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 677 M
(\(define initialize-scheduler) s
5 664 M
(  \(let \(\(initialize-scheduler initialize-scheduler\)\)) s
5 651 M
(    \(lambda \(\)) s
5 638 M
(      \(initialize-scheduler\)) s
5 625 M
(      \(set! *consequence-cache* \(make-eq-hash-table\)\)\)\)\)) s
5 599 M
(\(define with-independent-scheduler) s
5 586 M
(  \(let \(\(with-independent-scheduler with-independent-scheduler\)\)) s
5 573 M
(    \(lambda args) s
5 560 M
(      \(fluid-let \(\(*consequence-cache* #f\)\)) s
5 547 M
(        \(apply with-independent-scheduler args\)\)\)\)\)) s
5 521 M
(;; Will be replaced by tms-query in contradictions.scm) s
5 508 M
(\(define \(tms-query tms\)) s
5 495 M
(  \(let \(\(answer \(strongest-consequence tms\)\)\)) s
5 482 M
(    \(let \(\(better-tms \(tms-assimilate tms answer\)\)\)) s
5 469 M
(      \(if \(not \(eq? tms better-tms\)\)) s
5 456 M
(          \(set-tms-values! tms \(tms-values better-tms\)\)\)) s
5 443 M
(      answer\)\)\)) s
5 417 M
(\(define \(kick-out! premise\)) s
5 404 M
(  \(if \(premise-in? premise\)) s
5 391 M
(      \(begin) s
5 378 M
(        \(set! *worldview-number* \(+ *worldview-number* 1\)\)) s
5 365 M
(        \(alert-all-propagators!\)\)\)) s
5 352 M
(  \(mark-premise-out! premise\)\)) s
5 326 M
(\(define \(bring-in! premise\)) s
5 313 M
(  \(if \(not \(premise-in? premise\)\)) s
5 300 M
(      \(begin) s
5 287 M
(        \(set! *worldview-number* \(+ *worldview-number* 1\)\)) s
5 274 M
(        \(alert-all-propagators!\)\)\)) s
5 261 M
(  \(mark-premise-in! premise\)\)) s
_R
S
%%Page: (5) 99
%%BeginPageSetup
_S
18 36 translate
/pagenum 5 def
/fname (core/truth-maintenance.scm) def
/fdir (core/) def
/ftail (truth-maintenance.scm) def
% User defined strings:
/fmodstr (Mon Mar 28 10:23:46 2011) def
/pagenumstr (5) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 677 M
(\(defhandler generic-unpack) s
5 664 M
(  \(lambda \(tms function\)) s
5 651 M
(    \(let \(\(relevant-information \(tms-query tms\)\)\)) s
5 638 M
(      \(make-tms \(list \(generic-bind relevant-information function\)\)\)\)\)) s
5 625 M
(  tms? any?\)) s
5 599 M
(\(defhandler generic-flatten) s
5 586 M
(  \(lambda \(tms\)) s
5 573 M
(    \(tms->) s
5 560 M
(     \(make-tms) s
5 547 M
(      \(append-map tms-values) s
5 534 M
(                  \(map ->tms) s
5 521 M
(                       \(map generic-flatten \(tms-values tms\)\)\)\)\)\)\)) s
5 508 M
(  tms?\)) s
5 482 M
(\(defhandler generic-flatten) s
5 469 M
(  \(lambda \(v&s\)) s
5 456 M
(    \(generic-flatten) s
5 443 M
(     \(make-tms) s
5 430 M
(      \(generic-flatten) s
5 417 M
(       \(supported \(tms-query \(v&s-value v&s\)\)) s
5 404 M
(                  \(v&s-support v&s\)) s
5 391 M
(                  \(v&s-informants v&s\)\)\)\)\)\)) s
5 378 M
(  \(lambda \(thing\) \(and \(v&s? thing\) \(tms? \(v&s-value thing\)\)\)\)\)) s
5 352 M
(\(declare-coercion-target tms) s
5 339 M
(  \(lambda \(thing\)) s
5 326 M
(    \(make-tms \(list \(->contingent thing\)\)\)\)\)) s
5 300 M
(\(declare-coercion v&s? ->tms\)) s
5 287 M
(\(declare-coercion contingent-able? ->tms\)) s
5 274 M
(\(defhandler ->tms \(lambda \(nothing\) \(make-tms '\(\)\)\) nothing?\)) s
5 248 M
(\(define \(tms-equivalent? tms1 tms2\)) s
5 235 M
(  \(lset= v&s-equivalent? \(tms-values tms1\) \(tms-values tms2\)\)\)) s
5 222 M
(\(defhandler-coercing equivalent? tms-equivalent? ->tms\)) s
5 196 M
(\(define \(the-tms-handler thing1 thing2\)) s
5 183 M
(  \(tms-merge thing1 thing2\)\)) s
5 157 M
(\(defhandler-coercing merge the-tms-handler ->tms\)) s
5 131 M
(\(define \(tms-> tms\)) s
5 118 M
(  \(let \(\(values \(filter v&s? \(map v&s-> \(map ->contingent \(tms-values tms\)\)\)\)\)) s
5 105 M
(\)) s
5 92 M
(    \(cond \(\(null? values\)) s
5 79 M
(           nothing\)) s
5 66 M
(          \(\(and \(= 1 \(length values\)\)) s
5 53 M
(                \(v&s? \(car values\)\)) s
5 40 M
(                \(null? \(v&s-support \(car values\)\)\)\)) s
5 27 M
(           \(v&s-value \(car values\)\)\)) s
5 14 M
(          \(else) s
_R
S
%%Page: (6) 100
%%BeginPageSetup
_S
18 36 translate
/pagenum 6 def
/fname (core/truth-maintenance.scm) def
/fdir (core/) def
/ftail (truth-maintenance.scm) def
% User defined strings:
/fmodstr (Mon Mar 28 10:23:46 2011) def
/pagenumstr (6) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 690 M
(           \(make-tms values\)\)\)\)\)) s
5 664 M
(\(define \(tms-binary-map tms1 tms2\)) s
5 651 M
(  \(lambda \(f\)) s
5 638 M
(    \(tms-> \(make-tms \(list \(f \(tms-query tms1\) \(tms-query tms2\)\)\)\)\)\)\)) s
5 612 M
(\(defhandler-coercing binary-map tms-binary-map ->tms\)) s
_R
S
%%Page: (1) 101
%%BeginPageSetup
_S
18 36 translate
/pagenum 1 def
/fname (core/contradictions.scm) def
/fdir (core/) def
/ftail (contradictions.scm) def
% User defined strings:
/fmodstr (Sat Oct 22 17:00:41 2011) def
/pagenumstr (1) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 690 M
(;;; ----------------------------------------------------------------------) s
5 677 M
(;;; Copyright 2009 Massachusetts Institute of Technology.) s
5 664 M
(;;; ----------------------------------------------------------------------) s
5 651 M
(;;; This file is part of Propagator Network Prototype.) s
5 638 M
(;;; ) s
5 625 M
(;;; Propagator Network Prototype is free software; you can) s
5 612 M
(;;; redistribute it and/or modify it under the terms of the GNU) s
5 599 M
(;;; General Public License as published by the Free Software) s
5 586 M
(;;; Foundation, either version 3 of the License, or \(at your option\)) s
5 573 M
(;;; any later version.) s
5 560 M
(;;; ) s
5 547 M
(;;; Propagator Network Prototype is distributed in the hope that it) s
5 534 M
(;;; will be useful, but WITHOUT ANY WARRANTY; without even the implied) s
5 521 M
(;;; warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.) s
5 508 M
(;;; See the GNU General Public License for more details.) s
5 495 M
(;;; ) s
5 482 M
(;;; You should have received a copy of the GNU General Public License) s
5 469 M
(;;; along with Propagator Network Prototype.  If not, see) s
5 456 M
(;;; <http://www.gnu.org/licenses/>.) s
5 443 M
(;;; ----------------------------------------------------------------------) s
5 417 M
(\(declare \(usual-integrations make-cell cell?\)\)) s
5 391 M
(\(define \(tms-merge tms1 tms2\)) s
5 378 M
(  \(let \(\(candidate \(tms-assimilate tms1 tms2\)\)\)) s
5 365 M
(    \(effectful-bind \(strongest-consequence candidate\)) s
5 352 M
(      \(lambda \(consequence\)) s
5 339 M
(        \(if \(not \(contradictory? consequence\)\)  ; **) s
5 326 M
(            \(tms-assimilate candidate consequence\)) s
5 313 M
(            \(make-effectful) s
5 300 M
(             \(tms-assimilate candidate consequence\)) s
5 287 M
(             \(list \(make-nogood-effect) s
5 274 M
(                    \(v&s-support consequence\)\)\)\)\)\)\)\)\)) s
5 248 M
(;;; TODO TMS-QUERY is still hopelessly broken.  The problem is that) s
5 235 M
(;;; the effect of signaling a contradiction is being deferred from the) s
5 222 M
(;;; point at which the worldview changes to the point at which some) s
5 209 M
(;;; propagator tries to get the result.) s
5 170 M
(\(define \(tms-query tms\)) s
5 157 M
(  \(let \(\(answer \(strongest-consequence tms\)\)\)) s
5 144 M
(    \(let \(\(better-tms \(tms-assimilate tms answer\)\)\)) s
5 131 M
(      \(if \(not \(eq? tms better-tms\)\)) s
5 118 M
(          \(set-tms-values! tms \(tms-values better-tms\)\)\)) s
5 105 M
(      \(check-consistent! answer\)        ; **) s
5 92 M
(      answer\)\)\)) s
5 66 M
(\(define \(check-consistent! v&s\)) s
5 53 M
(  \(if \(contradictory? v&s\)) s
5 40 M
(      \(process-nogood! \(v&s-support v&s\)\)\)\)) s
5 14 M
(#|) s
_R
S
%%Page: (2) 102
%%BeginPageSetup
_S
18 36 translate
/pagenum 2 def
/fname (core/contradictions.scm) def
/fdir (core/) def
/ftail (contradictions.scm) def
% User defined strings:
/fmodstr (Sat Oct 22 17:00:41 2011) def
/pagenumstr (2) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 690 M
(;;; Sussman's tentative and unpleasant patch for Micah's bug.) s
5 677 M
(;;;  Required change to core/test/dependencies-test.scm.) s
5 651 M
(\(define \(tms-query tms\)) s
5 638 M
(  \(let \(\(answer \(strongest-consequence tms\)\)\)) s
5 625 M
(    \(let \(\(better-tms \(tms-assimilate tms answer\)\)\)) s
5 612 M
(      \(if \(not \(eq? tms better-tms\)\)) s
5 599 M
(          \(set-tms-values! tms \(tms-values better-tms\)\)\)) s
5 586 M
(      \(if \(contradictory? answer\)) s
5 573 M
(          \(begin \(process-nogood! \(v&s-support answer\)\)) s
5 560 M
(                 nothing\)) s
5 547 M
(          answer\)\)\)\)) s
5 534 M
(|#) s
_R
S
%%Page: (3) 103
%%BeginPageSetup
_S
18 36 translate
/pagenum 3 def
/fname (core/contradictions.scm) def
/fdir (core/) def
/ftail (contradictions.scm) def
% User defined strings:
/fmodstr (Sat Oct 22 17:00:41 2011) def
/pagenumstr (3) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 677 M
(;; Will be replaced by process-nogood! in search.scm) s
5 664 M
(\(define \(process-nogood! nogood\)) s
5 651 M
(  \(abort-process `\(contradiction ,nogood\)\)\)) s
5 625 M
(\(define-structure nogood-effect) s
5 612 M
(  nogood\)) s
5 586 M
(\(defhandler execute-effect) s
5 573 M
(  \(lambda \(nogood-effect\)) s
5 560 M
(    \(if \(all-premises-in? \(nogood-effect-nogood nogood-effect\)\)) s
5 547 M
(        \(process-nogood! \(nogood-effect-nogood nogood-effect\)\)\)\)) s
5 534 M
(  nogood-effect?\)) s
5 508 M
(\(defhandler generic-attach-premises) s
5 495 M
(  \(lambda \(effect\)) s
5 482 M
(    \(lambda \(support\)) s
5 469 M
(      \(make-nogood-effect) s
5 456 M
(       \(lset-union eq? \(nogood-effect-nogood effect\) support\)\)\)\)) s
5 443 M
(  nogood-effect?\)) s
_R
S
%%Page: (-) 104
S
%%Page: (1) 105
%%BeginPageSetup
_S
18 36 translate
/pagenum 1 def
/fname (core/search.scm) def
/fdir (core/) def
/ftail (search.scm) def
% User defined strings:
/fmodstr (Wed Nov 02 18:42:57 2011) def
/pagenumstr (1) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 690 M
(;;; ----------------------------------------------------------------------) s
5 677 M
(;;; Copyright 2009 Massachusetts Institute of Technology.) s
5 664 M
(;;; ----------------------------------------------------------------------) s
5 651 M
(;;; This file is part of Propagator Network Prototype.) s
5 638 M
(;;; ) s
5 625 M
(;;; Propagator Network Prototype is free software; you can) s
5 612 M
(;;; redistribute it and/or modify it under the terms of the GNU) s
5 599 M
(;;; General Public License as published by the Free Software) s
5 586 M
(;;; Foundation, either version 3 of the License, or \(at your option\)) s
5 573 M
(;;; any later version.) s
5 560 M
(;;; ) s
5 547 M
(;;; Propagator Network Prototype is distributed in the hope that it) s
5 534 M
(;;; will be useful, but WITHOUT ANY WARRANTY; without even the implied) s
5 521 M
(;;; warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.) s
5 508 M
(;;; See the GNU General Public License for more details.) s
5 495 M
(;;; ) s
5 482 M
(;;; You should have received a copy of the GNU General Public License) s
5 469 M
(;;; along with Propagator Network Prototype.  If not, see) s
5 456 M
(;;; <http://www.gnu.org/licenses/>.) s
5 443 M
(;;; ----------------------------------------------------------------------) s
5 417 M
(\(declare \(usual-integrations make-cell cell?\)\)) s
5 391 M
(\(define *false-premise-starts-out* #t\)) s
5 378 M
(\(define *avoid-false-true-flips* #f\)) s
5 352 M
(\(define \(binary-amb cell\)) s
5 339 M
(  \(let \(\(true-premise \(make-hypothetical 'true cell\)\)) s
5 326 M
(        \(false-premise \(make-hypothetical 'false cell\)\)\)) s
5 313 M
(    \(define \(amb-choose\)) s
5 300 M
(      \(if \(and *avoid-false-true-flips*) s
5 287 M
(               \(or \(premise-in? true-premise\)) s
5 274 M
(                   \(premise-in? false-premise\)\)\)) s
5 261 M
(          'ok ; the some-premise-is-in invariant holds) s
5 248 M
(          \(let \(\(reasons-against-true) s
5 235 M
(                 \(filter \(lambda \(nogood\)) s
5 222 M
(                           \(and \(all-premises-in? nogood\)) s
5 209 M
(                                \(not \(member false-premise nogood\)\)\)\)) s
5 196 M
(                         \(premise-nogoods true-premise\)\)\)) s
5 183 M
(                \(reasons-against-false) s
5 170 M
(                 \(filter \(lambda \(nogood\)) s
5 157 M
(                           \(and \(all-premises-in? nogood\)) s
5 144 M
(                                \(not \(member true-premise nogood\)\)\)\)) s
5 131 M
(                         \(premise-nogoods false-premise\)\)\)\)) s
5 118 M
(            \(cond \(\(null? reasons-against-true\)) s
5 105 M
(                   \(if *contradiction-wallp* ) s
5 92 M
(                       \(pp `\(asserting-true ,true-premise) s
5 79 M
(                                            ,false-premise) s
5 66 M
(                                            ,cell\)\)\)) s
5 53 M
(                   \(kick-out! false-premise\)) s
5 40 M
(                   \(bring-in! true-premise\)\)) s
5 27 M
(                  \(\(null? reasons-against-false\)) s
5 14 M
(                   \(if *contradiction-wallp* ) s
_R
S
%%Page: (2) 106
%%BeginPageSetup
_S
18 36 translate
/pagenum 2 def
/fname (core/search.scm) def
/fdir (core/) def
/ftail (search.scm) def
% User defined strings:
/fmodstr (Wed Nov 02 18:42:57 2011) def
/pagenumstr (2) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 690 M
(                       \(pp `\(asserting-false ,true-premise) s
5 677 M
(                                             ,false-premise) s
5 664 M
(                                             ,cell\)\)\)) s
5 651 M
(                   \(kick-out! true-premise\)) s
5 638 M
(                   \(bring-in! false-premise\)\)) s
5 625 M
(                  \(else                 ; this amb must fail.) s
5 612 M
(                   \(if *contradiction-wallp* ) s
5 599 M
(                       \(pp `\(amb-fail ,true-premise ,false-premise ,cell\)\)\)) s
5 586 M
(                   \(kick-out! true-premise\)) s
5 573 M
(                   \(kick-out! false-premise\)) s
5 560 M
(                   \(process-contradictions) s
5 547 M
(                    \(pairwise-resolve reasons-against-true) s
5 534 M
(                                      reasons-against-false\)\)\)\)\)\)\)) s
_R
S
%%Page: (3) 107
%%BeginPageSetup
_S
18 36 translate
/pagenum 3 def
/fname (core/search.scm) def
/fdir (core/) def
/ftail (search.scm) def
% User defined strings:
/fmodstr (Wed Nov 02 18:42:57 2011) def
/pagenumstr (3) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 677 M
(    \(name! amb-choose 'amb-choose\)) s
5 664 M
(    ;; This only affects run order, and only in some experimental) s
5 651 M
(    ;; schedulers) s
5 638 M
(    \(tag-slow! amb-choose\)) s
5 625 M
(    \(if *false-premise-starts-out*) s
5 612 M
(        ;; Let's have the false premise start unbelieved.) s
5 599 M
(        \(mark-premise-out! false-premise\)\)) s
5 586 M
(    ) s
5 573 M
(    ;; The cell is a spiritual neighbor...) s
5 560 M
(    \(propagator cell amb-choose\)) s
5 534 M
(    \(let \(\(diagram) s
5 521 M
(           \(make-anonymous-i/o-diagram amb-choose '\(\) \(list cell\)\)\)\)) s
5 508 M
(      \(\(constant \(make-tms) s
5 495 M
(                  \(list \(supported #t \(list true-premise\) \(list diagram\)\)) s
5 482 M
(                        \(supported #f \(list false-premise\) \(list diagram\)\)\)\)\)) s
5 469 M
(       cell\)) s
5 456 M
(      \(register-diagram diagram\)) s
5 443 M
(      diagram\)\)\)) s
5 417 M
(\(define \(pairwise-resolve nogoods1 nogoods2\)) s
5 404 M
(  \(append-map \(lambda \(nogood1\)) s
5 391 M
(                \(map \(lambda \(nogood2\)) s
5 378 M
(                       \(lset-union eq? nogood1 nogood2\)\)) s
5 365 M
(                     nogoods2\)\)) s
5 352 M
(              nogoods1\)\)) s
5 326 M
(\(define \(process-contradictions nogoods\)) s
5 313 M
(  \(process-one-contradiction) s
5 300 M
(   \(car \(sort-by nogoods) s
5 287 M
(          \(lambda \(nogood\)) s
5 274 M
(            \(length \(filter hypothetical? nogood\)\)\)\)\)\)\)) s
5 248 M
(\(define \(process-one-contradiction nogood\)) s
5 235 M
(  \(if *contradiction-wallp* \(pp `\(nogood ,@nogood\)\)\)) s
5 222 M
(  \(let \(\(hyps \(filter hypothetical? nogood\)\)\)) s
5 209 M
(    \(if \(null? hyps\)) s
5 196 M
(        \(begin) s
5 183 M
(          \(if *contradiction-wallp* \(pp 'nogood-aborted\)\)) s
5 170 M
(          \(abort-process `\(contradiction ,nogood\)\)\)) s
5 157 M
(        \(begin) s
5 144 M
(          \(if *contradiction-wallp*) s
5 131 M
(              \(pp `\(kicking-out ,\(car hyps\)\)\)\)) s
5 118 M
(          \(kick-out! \(car hyps\)\)) s
5 105 M
(          \(for-each \(lambda \(premise\)) s
5 92 M
(                      \(assimilate-nogood! premise nogood\)\)) s
5 79 M
(                    nogood\)\)\)\)\)) s
5 53 M
(\(define \(assimilate-nogood! premise new-nogood\)) s
5 40 M
(  \(let \(\(item \(delq premise new-nogood\)\)) s
5 27 M
(        \(set \(premise-nogoods premise\)\)\)) s
5 14 M
(    \(if \(any \(lambda \(old\) \(lset<= eq? old item\)\) set\)) s
_R
S
%%Page: (4) 108
%%BeginPageSetup
_S
18 36 translate
/pagenum 4 def
/fname (core/search.scm) def
/fdir (core/) def
/ftail (search.scm) def
% User defined strings:
/fmodstr (Wed Nov 02 18:42:57 2011) def
/pagenumstr (4) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 690 M
(        #f) s
5 677 M
(        \(let \(\(subsumed) s
5 664 M
(               \(filter \(lambda \(old\) \(lset<= eq? item old\)\)) s
5 651 M
(                       set\)\)\)) s
5 638 M
(          \(set-premise-nogoods! premise) s
5 625 M
(            \(lset-adjoin eq?) s
5 612 M
(              \(lset-difference eq? set subsumed\) item\)\)\)\)\)\)) s
_R
S
%%Page: (5) 109
%%BeginPageSetup
_S
18 36 translate
/pagenum 5 def
/fname (core/search.scm) def
/fdir (core/) def
/ftail (search.scm) def
% User defined strings:
/fmodstr (Wed Nov 02 18:42:57 2011) def
/pagenumstr (5) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 677 M
(\(define *number-of-calls-to-fail* 0\)) s
5 651 M
(\(define initialize-scheduler) s
5 638 M
(  \(let \(\(initialize-scheduler initialize-scheduler\)\)) s
5 625 M
(    \(lambda \(\)) s
5 612 M
(      \(initialize-scheduler\)) s
5 599 M
(      \(set! *number-of-calls-to-fail* 0\)\)\)\)) s
5 573 M
(\(define with-independent-scheduler) s
5 560 M
(  \(let \(\(with-independent-scheduler with-independent-scheduler\)\)) s
5 547 M
(    \(lambda args) s
5 534 M
(      \(fluid-let \(\(*number-of-calls-to-fail* #f\)\)) s
5 521 M
(        \(apply with-independent-scheduler args\)\)\)\)\)) s
5 482 M
(\(define *contradiction-wallp* #f\)) s
5 456 M
(\(define \(process-nogood! nogood\)) s
5 443 M
(  \(set! *number-of-calls-to-fail*) s
5 430 M
(        \(+ *number-of-calls-to-fail* 1\)\)) s
5 417 M
(  \(process-one-contradiction nogood\)\)) s
_R
S
%%Page: (-) 110
S
%%Page: (1) 111
%%BeginPageSetup
_S
18 36 translate
/pagenum 1 def
/fname (core/amb-utils.scm) def
/fdir (core/) def
/ftail (amb-utils.scm) def
% User defined strings:
/fmodstr (Thu Mar 24 17:11:38 2011) def
/pagenumstr (1) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 690 M
(;;; ----------------------------------------------------------------------) s
5 677 M
(;;; Copyright 2009 Massachusetts Institute of Technology.) s
5 664 M
(;;; ----------------------------------------------------------------------) s
5 651 M
(;;; This file is part of Propagator Network Prototype.) s
5 638 M
(;;; ) s
5 625 M
(;;; Propagator Network Prototype is free software; you can) s
5 612 M
(;;; redistribute it and/or modify it under the terms of the GNU) s
5 599 M
(;;; General Public License as published by the Free Software) s
5 586 M
(;;; Foundation, either version 3 of the License, or \(at your option\)) s
5 573 M
(;;; any later version.) s
5 560 M
(;;; ) s
5 547 M
(;;; Propagator Network Prototype is distributed in the hope that it) s
5 534 M
(;;; will be useful, but WITHOUT ANY WARRANTY; without even the implied) s
5 521 M
(;;; warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.) s
5 508 M
(;;; See the GNU General Public License for more details.) s
5 495 M
(;;; ) s
5 482 M
(;;; You should have received a copy of the GNU General Public License) s
5 469 M
(;;; along with Propagator Network Prototype.  If not, see) s
5 456 M
(;;; <http://www.gnu.org/licenses/>.) s
5 443 M
(;;; ----------------------------------------------------------------------) s
5 417 M
(\(declare \(usual-integrations make-cell cell?\)\)) s
5 391 M
(\(define-propagator \(require cell\)) s
5 378 M
(  \(\(constant #t\) cell\)\)) s
5 365 M
(\(define require p:require\)) s
5 339 M
(\(define-propagator \(forbid cell\)) s
5 326 M
(  \(\(constant #f\) cell\)\)) s
5 313 M
(\(define forbid p:forbid\)) s
5 287 M
(\(define-propagator-syntax \(require-distinct cells\)) s
5 274 M
(  \(for-each-distinct-pair) s
5 261 M
(   \(lambda \(c1 c2\)) s
5 248 M
(     \(forbid \(e:eqv? c1 c2\)\)\)) s
5 235 M
(   cells\)\)) s
5 209 M
(\(define-propagator-syntax \(one-of . cells\)) s
5 196 M
(  \(let \(\(output \(ensure-cell \(car \(last-pair cells\)\)\)\)) s
5 183 M
(        \(inputs \(map ensure-cell \(except-last-pair cells\)\)\)\)) s
5 170 M
(    \(cond \(\(= \(length inputs\) 2\)) s
5 157 M
(           \(conditional \(e:amb\) \(car inputs\) \(cadr inputs\) output\)\)) s
5 144 M
(          \(\(> \(length inputs\) 2\)) s
5 131 M
(           \(conditional \(e:amb\) \(car inputs\)) s
5 118 M
(                        \(apply e:one-of \(cdr inputs\)\) output\)\)) s
5 105 M
(          \(else) s
5 92 M
(           \(error "Inadequate choices for one-of") s
5 79 M
(                  inputs output\)\)\)\)\)) s
5 66 M
(\(propagator-constructor! one-of\)) s
5 53 M
(\(define p:one-of one-of\)) s
5 40 M
(\(define e:one-of \(expression-style-variant one-of\)\)) s
_R
S
%%Page: (2) 112
%%BeginPageSetup
_S
18 36 translate
/pagenum 2 def
/fname (core/amb-utils.scm) def
/fdir (core/) def
/ftail (amb-utils.scm) def
% User defined strings:
/fmodstr (Thu Mar 24 17:11:38 2011) def
/pagenumstr (2) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 677 M
(\(define p:amb binary-amb\)) s
5 664 M
(\(define \(e:amb\)) s
5 651 M
(  \(let \(\(answer \(make-named-cell \(generate-cell-name\)\)\)\)) s
5 638 M
(    \(binary-amb answer\)) s
5 625 M
(    \(eq-put! answer 'subexprs '\(\)\)) s
5 612 M
(    answer\)\)) s
_R
S
%%Page: (1) 113
%%BeginPageSetup
_S
18 36 translate
/pagenum 1 def
/fname (core/example-networks.scm) def
/fdir (core/) def
/ftail (example-networks.scm) def
% User defined strings:
/fmodstr (Wed Dec 01 10:09:22 2010) def
/pagenumstr (1) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 690 M
(;;; ----------------------------------------------------------------------) s
5 677 M
(;;; Copyright 2009 Massachusetts Institute of Technology.) s
5 664 M
(;;; ----------------------------------------------------------------------) s
5 651 M
(;;; This file is part of Propagator Network Prototype.) s
5 638 M
(;;; ) s
5 625 M
(;;; Propagator Network Prototype is free software; you can) s
5 612 M
(;;; redistribute it and/or modify it under the terms of the GNU) s
5 599 M
(;;; General Public License as published by the Free Software) s
5 586 M
(;;; Foundation, either version 3 of the License, or \(at your option\)) s
5 573 M
(;;; any later version.) s
5 560 M
(;;; ) s
5 547 M
(;;; Propagator Network Prototype is distributed in the hope that it) s
5 534 M
(;;; will be useful, but WITHOUT ANY WARRANTY; without even the implied) s
5 521 M
(;;; warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.) s
5 508 M
(;;; See the GNU General Public License for more details.) s
5 495 M
(;;; ) s
5 482 M
(;;; You should have received a copy of the GNU General Public License) s
5 469 M
(;;; along with Propagator Network Prototype.  If not, see) s
5 456 M
(;;; <http://www.gnu.org/licenses/>.) s
5 443 M
(;;; ----------------------------------------------------------------------) s
5 417 M
(\(declare \(usual-integrations make-cell cell?\)\)) s
5 391 M
(;;; Example usages of propagator networks) s
5 365 M
(;;; Unidirectional Fahrenheit to Celsius conversion) s
5 339 M
(\(define-e:propagator \(e:fahrenheit->celsius f\)) s
5 326 M
(  \(e:* \(e:- f 32\) 5/9\)\)) s
5 300 M
(#|) s
5 287 M
( \(initialize-scheduler\)) s
5 274 M
( \(define-cell f\)) s
5 261 M
( \(define-cell c\)) s
5 235 M
( \(p:fahrenheit->celsius f c\)) s
5 209 M
( \(add-content f 77\)) s
5 196 M
( \(run\)) s
5 183 M
( \(content c\)) s
5 170 M
( ;Value: 25) s
5 157 M
(|#) s
5 131 M
(#|) s
5 118 M
( ;;; Here is a much more explicit way to write the same program) s
5 92 M
( \(define-propagator \(fahrenheit->celsius f c\)) s
5 79 M
(   \(let-cells \(thirty-two f-32 five c*9 nine\)) s
5 66 M
(     \(\(constant 32\) thirty-two\)) s
5 53 M
(     \(\(constant 5\) five\)) s
5 40 M
(     \(\(constant 9\) nine\)) s
5 27 M
(     \(p:- f thirty-two f-32\)) s
5 14 M
(     \(p:* f-32 five c*9\)) s
_R
S
%%Page: (2) 114
%%BeginPageSetup
_S
18 36 translate
/pagenum 2 def
/fname (core/example-networks.scm) def
/fdir (core/) def
/ftail (example-networks.scm) def
% User defined strings:
/fmodstr (Wed Dec 01 10:09:22 2010) def
/pagenumstr (2) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 690 M
(     \(p:/ c*9 nine c\)\)\)) s
5 677 M
(|#) s
_R
S
%%Page: (3) 115
%%BeginPageSetup
_S
18 36 translate
/pagenum 3 def
/fname (core/example-networks.scm) def
/fdir (core/) def
/ftail (example-networks.scm) def
% User defined strings:
/fmodstr (Wed Dec 01 10:09:22 2010) def
/pagenumstr (3) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 677 M
(;;; Multidirectional Fahrenheit to Celsius to Kelvin conversion) s
5 651 M
(\(define-propagator \(c:fahrenheit-celsius f c\)) s
5 638 M
(  \(c:== \(ce:+ \(ce:* c 9/5\) 32\) f\)\)) s
5 625 M
(\(define-propagator \(c:celsius-kelvin c k\)) s
5 612 M
(  \(c:+ c 273.15 k\)\)) s
5 586 M
(#|) s
5 573 M
( \(initialize-scheduler\)) s
5 560 M
( \(define-cell f\)) s
5 547 M
( \(define-cell c\)) s
5 521 M
( \(c:fahrenheit-celsius f c\)) s
5 495 M
( \(add-content c 25\)) s
5 482 M
( \(run\)) s
5 469 M
( \(content f\)) s
5 456 M
( ;Value: 77) s
5 430 M
( \(define-cell k\)) s
5 404 M
( \(c:celsius-kelvin c k\)) s
5 391 M
( \(run\)) s
5 378 M
( \(content k\)) s
5 365 M
( ;Value: 298.15) s
5 352 M
(|#) s
5 326 M
(#|) s
5 313 M
( ;;; Same as above, but in diagram style) s
5 287 M
( \(define-propagator \(fahrenheit-celsius f c\)) s
5 274 M
(   \(let-cells \(f-32 c*9\)) s
5 261 M
(     \(c:+ 32 f-32 f\)) s
5 248 M
(     \(c:* f-32 5 c*9\)) s
5 235 M
(     \(c:* c 9 c*9\)\)\)) s
5 222 M
(|#) s
_R
S
%%Page: (4) 116
%%BeginPageSetup
_S
18 36 translate
/pagenum 4 def
/fname (core/example-networks.scm) def
/fdir (core/) def
/ftail (example-networks.scm) def
% User defined strings:
/fmodstr (Wed Dec 01 10:09:22 2010) def
/pagenumstr (4) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 677 M
(;;; Measuring the height of a building using a barometer) s
5 651 M
(\(define-e:propagator \(ce:fall-duration t\)) s
5 638 M
(  \(let-cell \(g \(make-interval 9.789 9.832\)\)) s
5 625 M
(    \(ce:* 1/2 \(ce:* g \(ce:square t\)\)\)\)\)) s
5 599 M
(#|) s
5 586 M
( \(initialize-scheduler\)) s
5 573 M
( \(define-cell fall-time\)) s
5 560 M
( \(define-cell building-height\)) s
5 547 M
( \(c:fall-duration fall-time building-height\)) s
5 521 M
( \(add-content fall-time \(make-interval 2.9 3.1\)\)) s
5 508 M
( \(run\)) s
5 495 M
( \(content building-height\)) s
5 482 M
( ;Value: #\(interval 41.163 47.243\)) s
5 469 M
(|#) s
5 456 M
(;;; In more ways than one) s
5 430 M
(\(define-propagator \(c:similar-triangles s-ba h-ba s h\)) s
5 417 M
(  \(c:== \(ce:* s-ba %% h-ba\)) s
5 404 M
(        \(ce:* s %% h\)\)\)) s
5 391 M
(#|) s
5 378 M
( \(initialize-scheduler\)) s
5 365 M
( \(define-cell barometer-height\)) s
5 352 M
( \(define-cell barometer-shadow\)) s
5 339 M
( \(define-cell building-height\)) s
5 326 M
( \(define-cell building-shadow\)) s
5 313 M
( \(c:similar-triangles barometer-shadow barometer-height) s
5 300 M
(                      building-shadow building-height\)) s
5 274 M
( \(add-content building-shadow \(make-interval 54.9 55.1\)\)) s
5 261 M
( \(add-content barometer-height \(make-interval 0.3 0.32\)\)) s
5 248 M
( \(add-content barometer-shadow \(make-interval 0.36 0.37\)\)) s
5 235 M
( \(run\)) s
5 222 M
( \(content building-height\)) s
5 209 M
( ;Value: #\(interval 44.514 48.978\)) s
_R
S
%%Page: (5) 117
%%BeginPageSetup
_S
18 36 translate
/pagenum 5 def
/fname (core/example-networks.scm) def
/fdir (core/) def
/ftail (example-networks.scm) def
% User defined strings:
/fmodstr (Wed Dec 01 10:09:22 2010) def
/pagenumstr (5) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 677 M
( \(define-cell fall-time\)) s
5 664 M
( \(c:fall-duration fall-time building-height\)) s
5 638 M
( \(add-content fall-time \(make-interval 2.9 3.1\)\)) s
5 625 M
( \(run\)) s
5 612 M
( \(content building-height\)) s
5 599 M
( ;Value: #\(interval 44.514 47.243\)) s
5 573 M
( \(content barometer-height\)) s
5 560 M
( ;Value: #\(interval .3 .31839\)) s
5 547 M
( ;; Refining the \(make-interval 0.3 0.32\) we put in originally) s
5 521 M
( \(content fall-time\)) s
5 508 M
( ;Value: #\(interval 3.0091 3.1\)) s
5 495 M
( ;; Refining \(make-interval 2.9 3.1\)) s
5 469 M
( \(add-content building-height \(make-interval 45 45\)\)) s
5 456 M
( \(run\)) s
5 443 M
( \(content barometer-height\)) s
5 430 M
( ;Value: #\(interval .3 .30328\)) s
5 404 M
( \(content barometer-shadow\)) s
5 391 M
( ;Value: #\(interval .366 .37\)) s
5 365 M
( \(content building-shadow\)) s
5 352 M
( ;Value: #\(interval 54.9 55.1\)) s
5 326 M
( \(content fall-time\)) s
5 313 M
( ;Value: #\(interval 3.0255 3.0322\)) s
5 300 M
(|#) s
5 274 M
(;;; More goodies in ../examples/*) s
_R
S
%%Trailer
%%Pages: 117
%%DocumentNeededResources: font Courier-Bold 
%%EOF
